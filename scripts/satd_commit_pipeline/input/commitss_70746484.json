[
  {
    "satd_id": 6631167,
    "satd_repo": 70746484,
    "satd_sha": "633ee118efecd04efb4be9bf6053deae6e8fac3b",
    "satd_text": " If we're padding a non-spatial dimension, don't simplify\n Convolution can only pad on spatial axes",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/simplify_expr.cc",
    "lines": [
      135,
      136
    ],
    "matched_text": "    // If we're padding a non-spatial dimension, don't simplify"
  },
  {
    "satd_id": 6631239,
    "satd_repo": 70746484,
    "satd_sha": "5c5aea620bb940fd4fb7106602ae51111c7af03a",
    "satd_text": " TODO: When topi test has an option for align corners and nearest neighbor that\n produces correct results, re-enable it.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/topi/python/test_topi_image.py",
    "lines": [
      97,
      98
    ],
    "matched_text": "                # TODO: When topi test has an option for align corners and nearest neighbor that"
  },
  {
    "satd_id": 6631240,
    "satd_repo": 70746484,
    "satd_sha": "5c5aea620bb940fd4fb7106602ae51111c7af03a",
    "satd_text": " TODO: Nearest neighbor case doesn't do anything with coordinate transform mode, and also\n nearest_neighbors and align_corners combination in topi doesn't match the output of this\n function.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/topi/python/test_topi_image.py",
    "lines": [
      62,
      63,
      64
    ],
    "matched_text": "        # TODO: Nearest neighbor case doesn't do anything with coordinate transform mode, and also"
  },
  {
    "satd_id": 6631262,
    "satd_repo": 70746484,
    "satd_sha": "09b0c8e6f688d1c25734b6371426972ab1c37183",
    "satd_text": " use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/unique.py",
    "lines": [
      156
    ],
    "matched_text": "        # use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]"
  },
  {
    "satd_id": 6631262,
    "satd_repo": 70746484,
    "satd_sha": "09b0c8e6f688d1c25734b6371426972ab1c37183",
    "satd_text": " use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/unique.py",
    "lines": [
      139
    ],
    "matched_text": "        # use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]"
  },
  {
    "satd_id": 6631273,
    "satd_repo": 70746484,
    "satd_sha": "09b0c8e6f688d1c25734b6371426972ab1c37183",
    "satd_text": " use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/unique.py",
    "lines": [
      156
    ],
    "matched_text": "        # use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]"
  },
  {
    "satd_id": 6631273,
    "satd_repo": 70746484,
    "satd_sha": "09b0c8e6f688d1c25734b6371426972ab1c37183",
    "satd_text": " use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/unique.py",
    "lines": [
      139
    ],
    "matched_text": "        # use indices_ptr as a tmp buffer to store tids with inc_scan[tid] != inc_scan[tid-1]"
  },
  {
    "satd_id": 6631298,
    "satd_repo": 70746484,
    "satd_sha": "63ea8e1fc934229a7fb56cac642a588ff3337e6e",
    "satd_text": " For non-concat axes, we want to enforce static shape constraint.\n However, if the concat axis is static, the output shape would become static while\n the input could be partially static/dynamic. To prevent runtime segfaults due to the lack\n of runtime input shape checking for such cases, static shape constraint is only enforced\n when the output concat axis is dynamic.\n\n Examples (both concat on the first axis):\n * [(?, 3), (?, ?)] -> (?, 3)\n * [(1, 3), (1, ?)] -> (2, ?)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/tensor/transform.h",
    "lines": [
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158
    ],
    "matched_text": "      // For non-concat axes, we want to enforce static shape constraint."
  },
  {
    "satd_id": 6631341,
    "satd_repo": 70746484,
    "satd_sha": "0ba37411aa7d2fb3753e2403f8cbf0cf1e878ec6",
    "satd_text": " NOTE: at present, export_libarary will always create _another_ shared object, and you\n can't stably combine two shared objects together (in this case, init_array is not\n populated correctly when you do that). So for now, must continue to use save() with the\n C++ library.\n TODO(areusch): Obliterate runtime.cc and replace with libtvm_runtime.so.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/build_model.py",
    "lines": [
      60,
      61,
      62,
      63,
      64
    ],
    "matched_text": "            # NOTE: at present, export_libarary will always create _another_ shared object, and you"
  },
  {
    "satd_id": 6631341,
    "satd_repo": 70746484,
    "satd_sha": "0ba37411aa7d2fb3753e2403f8cbf0cf1e878ec6",
    "satd_text": " NOTE: at present, export_libarary will always create _another_ shared object, and you\n can't stably combine two shared objects together (in this case, init_array is not\n populated correctly when you do that). So for now, must continue to use save() with the\n C++ library.\n TODO(areusch): Obliterate runtime.cc and replace with libtvm_runtime.so.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/build_model.py",
    "lines": [
      103,
      104,
      105,
      106,
      107
    ],
    "matched_text": "            # NOTE: at present, export_libarary will always create _another_ shared object, and you"
  },
  {
    "satd_id": 6631355,
    "satd_repo": 70746484,
    "satd_sha": "84359a97bdb896ddd2a74c65631a00da1ec5ec70",
    "satd_text": " todo: padding filter to accommodate the intrinsic",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      194
    ],
    "matched_text": "    # todo: padding filter to accommodate the intrinsic"
  },
  {
    "satd_id": 6631393,
    "satd_repo": 70746484,
    "satd_sha": "173f3fcc2199aa8c897275a5d6df48831d808e1a",
    "satd_text": " pylint: disable=no-else-return, too-many-locals, too-many-arguments, too-many-branches\n pylint: disable=undefined-variable, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/sparse_fill_empty_rows.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# pylint: disable=no-else-return, too-many-locals, too-many-arguments, too-many-branches"
  },
  {
    "satd_id": 6631397,
    "satd_repo": 70746484,
    "satd_sha": "173f3fcc2199aa8c897275a5d6df48831d808e1a",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks,\n pylint: disable=too-many-local-variables, too-many-arguments, no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks,"
  },
  {
    "satd_id": 6631409,
    "satd_repo": 70746484,
    "satd_sha": "e57e6448a66948d53d4be0c36aa21a7c4845c865",
    "satd_text": " TODO(masahi): Check -libs=thrust option",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/nms.py",
    "lines": [
      613
    ],
    "matched_text": "    # TODO(masahi): Check -libs=thrust option"
  },
  {
    "satd_id": 6631409,
    "satd_repo": 70746484,
    "satd_sha": "e57e6448a66948d53d4be0c36aa21a7c4845c865",
    "satd_text": " TODO(masahi): Check -libs=thrust option",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/scan.py",
    "lines": [
      355
    ],
    "matched_text": "        # TODO(masahi): Check -libs=thrust option"
  },
  {
    "satd_id": 6631449,
    "satd_repo": 70746484,
    "satd_sha": "fc48514f1d8ccffcebd12007cb6c602506975703",
    "satd_text": " alloc verilator device",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/verilator/verilator_runtime.cc",
    "lines": [
      105
    ],
    "matched_text": "  // alloc verilator device"
  },
  {
    "satd_id": 6631453,
    "satd_repo": 70746484,
    "satd_sha": "b8a83403ddca43b223d4e1cdd482e35b98171171",
    "satd_text": " Rebuild standalone_crt in build/ tree. This file is not currently archived by pack_lib() in\n Jenkinsfile. We expect config.cmake to be present from pack_lib().\n TODO(areusch): Make pack_lib() pack all the data dependencies of TVM.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_ci_setup.sh",
    "lines": [
      35,
      36,
      37
    ],
    "matched_text": "# Rebuild standalone_crt in build/ tree. This file is not currently archived by pack_lib() in"
  },
  {
    "satd_id": 6631469,
    "satd_repo": 70746484,
    "satd_sha": "d05d75d820c776aefc95547dd185bfbd28b14c46",
    "satd_text": " run_pytest ctypes ${TVM_INTEGRATION_TESTSUITE_NAME}-webgl tests/webgl",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      72
    ],
    "matched_text": "# run_pytest ctypes ${TVM_INTEGRATION_TESTSUITE_NAME}-webgl tests/webgl"
  },
  {
    "satd_id": 6631485,
    "satd_repo": 70746484,
    "satd_sha": "68b7e7147fff8960754e4a3a788fd2474749d121",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631485,
    "satd_repo": 70746484,
    "satd_sha": "68b7e7147fff8960754e4a3a788fd2474749d121",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6631485,
    "satd_repo": 70746484,
    "satd_sha": "68b7e7147fff8960754e4a3a788fd2474749d121",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631520,
    "satd_repo": 70746484,
    "satd_sha": "c789a2959dac48f217afca917034f1509a690f83",
    "satd_text": " TODO(u99127): Enable cython tests.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/scripts/task_python_arm_compute_library.sh",
    "lines": [
      25
    ],
    "matched_text": "# TODO(u99127): Enable cython tests."
  },
  {
    "satd_id": 6631520,
    "satd_repo": 70746484,
    "satd_sha": "c789a2959dac48f217afca917034f1509a690f83",
    "satd_text": " TODO(u99127): Enable cython tests.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/scripts/task_python_ethosn_tests.sh",
    "lines": [
      25
    ],
    "matched_text": "# TODO(u99127): Enable cython tests."
  },
  {
    "satd_id": 6631521,
    "satd_repo": 70746484,
    "satd_sha": "c789a2959dac48f217afca917034f1509a690f83",
    "satd_text": " TODO(u99127): Enable cython tests.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/scripts/task_python_arm_compute_library.sh",
    "lines": [
      25
    ],
    "matched_text": "# TODO(u99127): Enable cython tests."
  },
  {
    "satd_id": 6631521,
    "satd_repo": 70746484,
    "satd_sha": "c789a2959dac48f217afca917034f1509a690f83",
    "satd_text": " TODO(u99127): Enable cython tests.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/scripts/task_python_ethosn_tests.sh",
    "lines": [
      25
    ],
    "matched_text": "# TODO(u99127): Enable cython tests."
  },
  {
    "satd_id": 6631522,
    "satd_repo": 70746484,
    "satd_sha": "c789a2959dac48f217afca917034f1509a690f83",
    "satd_text": " run_pytest ${TVM_INTEGRATION_TESTSUITE_NAME}-webgl tests/webgl",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      70
    ],
    "matched_text": "# run_pytest ${TVM_INTEGRATION_TESTSUITE_NAME}-webgl tests/webgl"
  },
  {
    "satd_id": 6631664,
    "satd_repo": 70746484,
    "satd_sha": "0d303b46cac4420f2b83ed3a0f445060d2fd5982",
    "satd_text": " This test is flaky, disable for now\n verify_conv2d(\"float16\", \"float16\", tensor_format=0)",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_cudnn.py",
    "lines": [
      96,
      97
    ],
    "matched_text": "    # This test is flaky, disable for now"
  },
  {
    "satd_id": 6631665,
    "satd_repo": 70746484,
    "satd_sha": "96b09817fc1796a789524ae30cd2d7e9d6f73d6c",
    "satd_text": " TODO(masahi): It seems this rewrite causes flaky segfaults on CI\n See https://github.com/apache/tvm/issues/7363\n before = mod[\"main\"]\n mod = rewrite_batched_nms_with_max_out_size(mod)\n after = mod[\"main\"]\n assert not tvm.ir.structural_equal(after, before)",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/pytorch/test_object_detection.py",
    "lines": [
      148,
      149,
      150,
      151,
      152,
      153
    ],
    "matched_text": "    # TODO(masahi): It seems this rewrite causes flaky segfaults on CI"
  },
  {
    "satd_id": 6631668,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " todo: deal with unfixed shape when compiling wdl model",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/tensorcore_alter_op.py",
    "lines": [
      136
    ],
    "matched_text": "            # todo: deal with unfixed shape when compiling wdl model"
  },
  {
    "satd_id": 6631674,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " Pad input and output channels to use tensorcore schedule.\n todo: support int8/int4",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/tensorcore_alter_op.py",
    "lines": [
      57,
      58
    ],
    "matched_text": "    # Pad input and output channels to use tensorcore schedule."
  },
  {
    "satd_id": 6631674,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " Pad input and output channels to use tensorcore schedule.\n todo: support int8/int4",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/tensorcore_alter_op.py",
    "lines": [
      127,
      128
    ],
    "matched_text": "    # Pad input and output channels to use tensorcore schedule."
  },
  {
    "satd_id": 6631681,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " todo: support int8/int4",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv2d_alter_op.py",
    "lines": [
      350
    ],
    "matched_text": "    elif data_dtype in [\"float16\"]:  # todo: support int8/int4"
  },
  {
    "satd_id": 6631681,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " todo: support int8/int4",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/tensorcore_alter_op.py",
    "lines": [
      58
    ],
    "matched_text": "    if dtype in [\"float16\"]:  # todo: support int8/int4"
  },
  {
    "satd_id": 6631681,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " todo: support int8/int4",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/tensorcore_alter_op.py",
    "lines": [
      128
    ],
    "matched_text": "    if dtype in [\"float16\"]:  # todo: support int8/int4"
  },
  {
    "satd_id": 6631686,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " not to change by default\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/batch_matmul.py",
    "lines": [
      101,
      102
    ],
    "matched_text": "    # not to change by default"
  },
  {
    "satd_id": 6631686,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " not to change by default\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/dense.py",
    "lines": [
      104,
      105
    ],
    "matched_text": "    # not to change by default"
  },
  {
    "satd_id": 6631687,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " not to change by default\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/batch_matmul.py",
    "lines": [
      101,
      102
    ],
    "matched_text": "    # not to change by default"
  },
  {
    "satd_id": 6631687,
    "satd_repo": 70746484,
    "satd_sha": "3734d5f7f8475a2a7897f239b9942c913256fc96",
    "satd_text": " not to change by default\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/dense.py",
    "lines": [
      104,
      105
    ],
    "matched_text": "    # not to change by default"
  },
  {
    "satd_id": 6631697,
    "satd_repo": 70746484,
    "satd_sha": "44a071aa1e9ad11c20fbfcf725ddb6dd8a2823c4",
    "satd_text": " TODO(@jroesch): handle 3rd case",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/transform/memory_alloc.py",
    "lines": [
      226
    ],
    "matched_text": "                # TODO(@jroesch): handle 3rd case"
  },
  {
    "satd_id": 6631697,
    "satd_repo": 70746484,
    "satd_sha": "44a071aa1e9ad11c20fbfcf725ddb6dd8a2823c4",
    "satd_text": " TODO(@jroesch): handle 3rd case",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/memory_alloc.cc",
    "lines": [
      345
    ],
    "matched_text": "        // TODO(@jroesch): handle 3rd case"
  },
  {
    "satd_id": 6631711,
    "satd_repo": 70746484,
    "satd_sha": "44a071aa1e9ad11c20fbfcf725ddb6dd8a2823c4",
    "satd_text": " TODO(@jroesch): There is a bug with typing based on the constant shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/transform/memory_alloc.py",
    "lines": [
      178
    ],
    "matched_text": "        # TODO(@jroesch): There is a bug with typing based on the constant shape."
  },
  {
    "satd_id": 6631711,
    "satd_repo": 70746484,
    "satd_sha": "44a071aa1e9ad11c20fbfcf725ddb6dd8a2823c4",
    "satd_text": " TODO(@jroesch): There is a bug with typing based on the constant shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/memory_alloc.cc",
    "lines": [
      296
    ],
    "matched_text": "    // TODO(@jroesch): There is a bug with typing based on the constant shape."
  },
  {
    "satd_id": 6631718,
    "satd_repo": 70746484,
    "satd_sha": "ef032b3b30cb05f4fbf30f0c9e20869904a1cdc6",
    "satd_text": " TODO(mbrookhart, jroesch, masahi): this pass is very slow, and is\n incomplete to provide memory resuse optimizations. Disable it until we can\n rewrite it in C++ and complete it.\n // Perform memory planning in order to coalesce/reduce allocations.\n pass_seqs.push_back(transform::MemoryPlan());",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      988,
      989,
      990,
      991,
      992
    ],
    "matched_text": "  // TODO(mbrookhart, jroesch, masahi): this pass is very slow, and is"
  },
  {
    "satd_id": 6631722,
    "satd_repo": 70746484,
    "satd_sha": "f17cba780d2d513ce4593327b4108b527243f7bf",
    "satd_text": "!\n   * \\brief Assign the packed field using a typed lambda function. This variant is for functions\n   * without names.\n   *\n   * \\param flambda The lambda function.\n  ICHECK_EQ(CODE, T) << \"expected \" << ArgTypeCode2Str(T) << \" but got \" << ArgTypeCode2Str(CODE)\n      LOG(FATAL) << \"Expected \"\n                 << \"DLTensor* or NDArray but got \" << ArgTypeCode2Str(type_code_);\n  friend class TVMMovableArgValue_;\n/*!\n * \\brief Internal auxiliary struct for TypedPackedFunc to indicate a movable argument with\n * additional context information (function name and argument index) for better error reporting.\n *\n * \\sa MovableArgValue_\n * \\note For internal development purpose only.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6631746,
    "satd_repo": 70746484,
    "satd_sha": "6f75cffb64f20e72a2fad425ce58d0fd32c0d4c8",
    "satd_text": " calculate split indices. TODO(@altanh): support Any?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      369
    ],
    "matched_text": "    # calculate split indices. TODO(@altanh): support Any?"
  },
  {
    "satd_id": 6631762,
    "satd_repo": 70746484,
    "satd_sha": "5d3349104a1dc4b84f9a744aeee9b124df231f04",
    "satd_text": "################################################################\n Other Tips\n ----------\n 1. During the tuning, the auto-scheduler needs to compile many programs and\n    extract feature from them. This part is CPU-intensive,\n    so a high-performance CPU with many cores is recommended for faster search.\n 2. You can use :code:`python3 -m tvm.auto_scheduler.measure_record --mode distill --i log.json`\n    to distill the large log file and only save the best useful records.\n 3. You can resume a search from the previous log file. You just need to\n    add a new argument :code:`load_log_file` when creating the task scheduler\n    in function :code:`run_tuning`. Say,\n    :code:`tuner = auto_scheduler.TaskScheduler(tasks, task_weights, load_log_file=log_file)`\n 4. If you have multiple target CPUs, you can use all of them for measurements to\n    parallelize the measurements. Check this :ref:`section <tutorials-autotvm-rpc-tracker>`\n    to learn how to use the RPC Tracker and RPC Server.\n    To use the RPC Tracker in auto-scheduler, replace the runner in :code:`TuningOptions`\n    with :any:`auto_scheduler.RPCRunner`.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_arm.py",
    "lines": [
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6631766,
    "satd_repo": 70746484,
    "satd_sha": "5d3349104a1dc4b84f9a744aeee9b124df231f04",
    "satd_text": " change this to 20000 to achieve the best performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_arm.py",
    "lines": [
      282
    ],
    "matched_text": "        num_measure_trials=200,  # change this to 20000 to achieve the best performance"
  },
  {
    "satd_id": 6631773,
    "satd_repo": 70746484,
    "satd_sha": "5d3349104a1dc4b84f9a744aeee9b124df231f04",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized controller node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_arm.py",
    "lines": [
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6631777,
    "satd_repo": 70746484,
    "satd_sha": "5d3349104a1dc4b84f9a744aeee9b124df231f04",
    "satd_text": "#####################################################################\n .. note:: Explaining the printed information during tuning\n\n   During the tuning, a lot of information will be printed on the console.\n   They are used for debugging purposes. The most important info is the output\n   of the task scheduler. The following table is a sample output.\n\n   .. code-block:: c\n\n    ----------------------------------------------------------------------\n    ------------------------------  [ Task Scheduler ]\n    ----------------------------------------------------------------------\n    |  ID  | Latency (ms) | Speed (GFLOPS) | Trials |\n    -------------------------------------------------\n    |    0 |        0.013 |           0.31 |     64 |\n    |    1 |        0.845 |           2.43 |    448 |\n    |    2 |        0.046 |          -0.00 |     64 |\n    |    3 |        4.194 |          24.53 |   2112 |\n    |    4 |        0.109 |           9.21 |     64 |\n    |    5 |        1.759 |          29.27 |    896 |\n    |    6 |        0.083 |           6.01 |     64 |\n    |    7 |        3.084 |          33.38 |   7680 |\n    |    8 |        0.136 |          14.78 |    384 |\n    |    9 |        1.349 |          38.23 |    768 |\n    |   10 |        0.133 |           7.55 |    128 |\n    |   11 |        2.747 |          37.56 |   1536 |\n    |   12 |        0.338 |          11.87 |    192 |\n    |   13 |        1.295 |          40.00 |    704 |\n    |   14 |        0.482 |           4.16 |    256 |\n    |   15 |        2.686 |          38.56 |   1344 |\n    |   16 |        0.884 |           9.08 |    448 |\n    |   17 |        1.332 |          39.18 |    704 |\n    |   18 |        1.045 |           3.84 |    576 |\n    |   19 |        1.391 |          38.09 |    704 |\n    |   20 |        0.777 |          10.34 |    448 |\n    |   21 |        0.739 |          30.97 |    448 |\n    -------------------------------------------------\n     Estimated total latency: 38.347 ms      Trials: 19992   Used time : 19260 s     Next ID: 3\n\n   This table lists the latency and (estimated) speed of all tasks.\n   It also lists the allocation of measurement trials for all tasks.\n   The last line prints the total weighted latency of these tasks,\n   which can be a rough estimation of the end-to-end execution time\n   of the network.\n   The last line also prints the total number of measurement trials,\n   total time spent on auto-tuning and the id of the next task to tune.\n\n   There will also be some \"dmlc::Error\"s errors, because the\n   auto-scheduler will try some invalid schedules.\n   You can safely ignore them if the tuning can continue, because these\n   errors are isolated from the main process.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_arm.py",
    "lines": [
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6631781,
    "satd_repo": 70746484,
    "satd_sha": "5d3349104a1dc4b84f9a744aeee9b124df231f04",
    "satd_text": "################################################################\n Define a Network\n ----------------\n First, we need to define the network with relay frontend API.\n We can load some pre-defined network from :code:`tvm.relay.testing`.\n We can also load models from MXNet, ONNX, PyTorch, and TensorFlow\n (see :ref:`front end tutorials<tutorial-frontend>`).\n\n For convolutional neural networks, although auto-scheduler can work correctly\n with any layout, we found the best performance is typically achieved with NHWC layout.\n We also implemented more optimizations for NHWC layout with the auto-scheduler.\n So it is recommended to convert your models to NHWC layout to use the auto-scheduler.\n You can use :ref:`ConvertLayout <convert-layout-usage>` pass to do the layout conversion in TVM.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/auto_scheduler/tune_network_arm.py",
    "lines": [
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6631804,
    "satd_repo": 70746484,
    "satd_sha": "8524b28078928caf5c8ca82442ad0eab81dce838",
    "satd_text": "! \\brief Fill a buffer with random data.\n *\n * Cryptographically-secure random data is NOT required. This function is intended for use\n * cases such as filling autotuning input tensors and choosing the nonce used for microTVM RPC.\n *\n * This function does not need to be implemented for inference tasks. It is used only by\n * AutoTVM and the RPC server. When not implemented, an internal weak-linked stub is provided.\n *\n * Please take care that across successive resets, this function returns different sequences of\n * values. If e.g. the random number generator is seeded with the same value, it may make it\n * difficult for a host to detect device resets during autotuning or host-driven inference.\n *\n * \\param buffer Pointer to the 0th byte to write with random data. `num_bytes` of random data\n * should be written here.\n * \\param num_bytes Number of bytes to write.\n * \\return kTvmErrorNoError if successful; a descriptive error code otherwise.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/platform.h",
    "lines": [
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116
    ],
    "matched_text": "/*! \\brief Fill a buffer with random data."
  },
  {
    "satd_id": 6631806,
    "satd_repo": 70746484,
    "satd_sha": "8524b28078928caf5c8ca82442ad0eab81dce838",
    "satd_text": " NOTE: this is bad concurrent programming but in practice we don't really expect race\n conditions here, and even if they occur we don't particularly care whether a competing\n process computes a different random seed. This value is just chosen pseudo-randomly to\n form an initial distinct session id. Here we just want to protect against bad loads causing\n confusion.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      168,
      169,
      170,
      171,
      172
    ],
    "matched_text": "    // NOTE: this is bad concurrent programming but in practice we don't really expect race"
  },
  {
    "satd_id": 6631812,
    "satd_repo": 70746484,
    "satd_sha": "62f251bb34c16c5634eaafe4b43bd277189bcb37",
    "satd_text": " TODO(masahi): Support other binary operators",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/scan.py",
    "lines": [
      321
    ],
    "matched_text": "    # TODO(masahi): Support other binary operators"
  },
  {
    "satd_id": 6631851,
    "satd_repo": 70746484,
    "satd_sha": "b52267e703cd6077fe1e9af357f8c918dfdd520e",
    "satd_text": " This segment would be generated in C++ because of the usage\n of tvm::runtime::Array. This is not ideal, but this to demonstrate\n constant copying process used packed imports in other external\n codegen. Moreover, in uTVM we dont expect this part to be generated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen.cc",
    "lines": [
      237,
      238,
      239,
      240
    ],
    "matched_text": "      // This segment would be generated in C++ because of the usage"
  },
  {
    "satd_id": 6631851,
    "satd_repo": 70746484,
    "satd_sha": "b52267e703cd6077fe1e9af357f8c918dfdd520e",
    "satd_text": " This segment would be generated in C++ because of the usage\n of tvm::runtime::Array. This is not ideal, but this to demonstrate\n constant copying process used packed imports in other external\n codegen. Moreover, in uTVM we dont expect this part to be generated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen_c.h",
    "lines": [
      221,
      222,
      223,
      224
    ],
    "matched_text": "      // This segment would be generated in C++ because of the usage"
  },
  {
    "satd_id": 6631854,
    "satd_repo": 70746484,
    "satd_sha": "b52267e703cd6077fe1e9af357f8c918dfdd520e",
    "satd_text": " If there are constants, insert the __init_ and the wrapper\n This segment would be generated in C++ because of the usage\n of tvm::runtime::Array. This is not ideal, but this to demonstrate\n constant copying process used packed imports in other external\n codegen. Moreover, in uTVM we dont expect this part to be generated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen_c.h",
    "lines": [
      220,
      221,
      222,
      223,
      224
    ],
    "matched_text": "      // If there are constants, insert the __init_ and the wrapper"
  },
  {
    "satd_id": 6631867,
    "satd_repo": 70746484,
    "satd_sha": "c9474639dd3761b78a457ab274603d87a3dcf9b8",
    "satd_text": " TODO(ANSHUMAN87): Handle for sparse_lhs case too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      342
    ],
    "matched_text": "    # TODO(ANSHUMAN87): Handle for sparse_lhs case too"
  },
  {
    "satd_id": 6631867,
    "satd_repo": 70746484,
    "satd_sha": "c9474639dd3761b78a457ab274603d87a3dcf9b8",
    "satd_text": " TODO(ANSHUMAN87): Handle for sparse_lhs case too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      396
    ],
    "matched_text": "    # TODO(ANSHUMAN87): Handle for sparse_lhs case too"
  },
  {
    "satd_id": 6631876,
    "satd_repo": 70746484,
    "satd_sha": "7f4aa247814885c43428b9a7069243974f474709",
    "satd_text": " This iter is simplified by InferBound, so it must have a length of one.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/compute_dag.cc",
    "lines": [
      880
    ],
    "matched_text": "        // This iter is simplified by InferBound, so it must have a length of one."
  },
  {
    "satd_id": 6631901,
    "satd_repo": 70746484,
    "satd_sha": "86479badd125125c9109595e9cb4fed3c099e061",
    "satd_text": " pylint: disable=import-outside-toplevel, unused-argument, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch_utils.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=import-outside-toplevel, unused-argument, invalid-name"
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631904,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631905,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631906,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631907,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631908,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d.py",
    "lines": [
      162
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_conv2d_transpose.py",
    "lines": [
      154
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_dense.py",
    "lines": [
      119
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_group_conv2d.py",
    "lines": [
      157
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      298
    ],
    "matched_text": "                # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631909,
    "satd_repo": 70746484,
    "satd_sha": "b5a7de879e67aca80aa25bf9ea9c46315dccb026",
    "satd_text": " check_correctness=True, # TODO: re-enable when check_correctness works again.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      218
    ],
    "matched_text": "            # check_correctness=True, # TODO: re-enable when check_correctness works again."
  },
  {
    "satd_id": 6631929,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/batch_matmul_tensorcore.py",
    "lines": [
      214
    ],
    "matched_text": "        # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631929,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv2d_nhwc_tensorcore.py",
    "lines": [
      75
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631929,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv3d_ndhwc_tensorcore.py",
    "lines": [
      78
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631929,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/dense_tensorcore.py",
    "lines": [
      248
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631930,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " todo: deal with out_shape for broadcast, liuxin.ai",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/batch_matmul_tensorcore.py",
    "lines": [
      34
    ],
    "matched_text": "    # todo: deal with out_shape for broadcast, liuxin.ai"
  },
  {
    "satd_id": 6631940,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/batch_matmul_tensorcore.py",
    "lines": [
      214
    ],
    "matched_text": "        # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631940,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv2d_nhwc_tensorcore.py",
    "lines": [
      75
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631940,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv3d_ndhwc_tensorcore.py",
    "lines": [
      78
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631940,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/dense_tensorcore.py",
    "lines": [
      248
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631941,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/batch_matmul_tensorcore.py",
    "lines": [
      214
    ],
    "matched_text": "        # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631941,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv2d_nhwc_tensorcore.py",
    "lines": [
      75
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631941,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv3d_ndhwc_tensorcore.py",
    "lines": [
      78
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631941,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/dense_tensorcore.py",
    "lines": [
      248
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631942,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/batch_matmul_tensorcore.py",
    "lines": [
      214
    ],
    "matched_text": "        # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631942,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv2d_nhwc_tensorcore.py",
    "lines": [
      75
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631942,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/conv3d_ndhwc_tensorcore.py",
    "lines": [
      78
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631942,
    "satd_repo": 70746484,
    "satd_sha": "89e3688137b9d8dd0e431cbdadb84d42dae9eee3",
    "satd_text": " TODO: add checking here, datatype casting may cause precision loss",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/dense_tensorcore.py",
    "lines": [
      248
    ],
    "matched_text": "    # TODO: add checking here, datatype casting may cause precision loss"
  },
  {
    "satd_id": 6631947,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/random/_kernel.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631947,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/random/kernel.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631947,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631951,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/random/_kernel.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631951,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/random/kernel.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631951,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6631956,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " Create a temporary array to hold the generator state we will use to create the random\n numbers. We cannot use gen because we may need to update the key + path if there is not\n enough room in the counter.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/random/kernel.py",
    "lines": [
      237,
      238,
      239
    ],
    "matched_text": "        # Create a temporary array to hold the generator state we will use to create the random"
  },
  {
    "satd_id": 6631960,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " TODO should be wrapping",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/random/kernel.py",
    "lines": [
      138
    ],
    "matched_text": "        x = a + b  # TODO should be wrapping"
  },
  {
    "satd_id": 6631967,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " TODO wrapping",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/random/kernel.py",
    "lines": [
      170
    ],
    "matched_text": "                out_buf[out_offset + l * nwords + j] += key_schedule(i, j)  # TODO wrapping"
  },
  {
    "satd_id": 6631981,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " The paper has constants for 32 bit threefry, but we keep the implementation simple by only\n using 64-bit words.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/random/kernel.py",
    "lines": [
      132,
      133
    ],
    "matched_text": "    # The paper has constants for 32 bit threefry, but we keep the implementation simple by only"
  },
  {
    "satd_id": 6631984,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " TODO(tkonolige): for now we only use the last word of the counter for counting. It is too\n much work to figure out how to do 128 bit addition.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/random/kernel.py",
    "lines": [
      242,
      243
    ],
    "matched_text": "        # TODO(tkonolige): for now we only use the last word of the counter for counting. It is too"
  },
  {
    "satd_id": 6631993,
    "satd_repo": 70746484,
    "satd_sha": "701bcc2c5faf0d8f589478000a92d3ad577e8df6",
    "satd_text": " generate returns the next key and an array of random values\n TODO(@tkonolige, @altanh): support other output dtypes?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/random/kernel.cc",
    "lines": [
      41,
      42
    ],
    "matched_text": "  // generate returns the next key and an array of random values"
  },
  {
    "satd_id": 6632012,
    "satd_repo": 70746484,
    "satd_sha": "4911a08a1776dd63d1638c516d1c4097cb23da75",
    "satd_text": " Set handle to NULL to avoid cleanup in c++ runtime, transferring ownership.\n Both cython and ctypes FFI use c_void_p, so this is safe to assign here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/support.py",
    "lines": [
      42,
      43
    ],
    "matched_text": "        # Set handle to NULL to avoid cleanup in c++ runtime, transferring ownership."
  },
  {
    "satd_id": 6632041,
    "satd_repo": 70746484,
    "satd_sha": "d777e7c612cf7a9aae4d8433c36f031c6b6f985c",
    "satd_text": " Due to legacy reasons, some attr node can contain\n information(e.g. alignment) of buffer variables.\n remap these vars when needed\n TODO(tvm-team): remove the rewriting once the buffer var\n attrs are being refactored into the corresponding definition node",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_custom_datatypes.cc",
    "lines": [
      137,
      138,
      139,
      140,
      141
    ],
    "matched_text": "    // Due to legacy reasons, some attr node can contain"
  },
  {
    "satd_id": 6632053,
    "satd_repo": 70746484,
    "satd_sha": "040afb0245526e1cc71dc0ada6c3c5787394a5c6",
    "satd_text": " Set a training threshold related to `last_train_length` to reduce the training\n overhead when there're too many logs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/cost_model/xgb_model.py",
    "lines": [
      158,
      159
    ],
    "matched_text": "            # Set a training threshold related to `last_train_length` to reduce the training"
  },
  {
    "satd_id": 6632056,
    "satd_repo": 70746484,
    "satd_sha": "197594bfbf9f4c7ef80bd05c75cc1e1615c3609f",
    "satd_text": " Convert array to bool if needed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      2269
    ],
    "matched_text": "        # Convert array to bool if needed."
  },
  {
    "satd_id": 6632107,
    "satd_repo": 70746484,
    "satd_sha": "b8ac8d94dec93cdaaec436f9105ea9b2eef752d0",
    "satd_text": " TODO(areusch): should *really* rethink needing to return doubles",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/common/crt_runtime_api.c",
    "lines": [
      444
    ],
    "matched_text": "  // TODO(areusch): should *really* rethink needing to return doubles"
  },
  {
    "satd_id": 6632136,
    "satd_repo": 70746484,
    "satd_sha": "592ecc004c7e9013d2810e2cd261179abeed25cb",
    "satd_text": "################################################################\n Start an RPC Tracker and Register Devices to the Tracker\n --------------------------------------------------------\n Please refer to the \"Start RPC Tracker\" and \"Register Devices to RPC Tracker\" setions\n in this :ref:`tutorial <tutorials-autotvm-start-rpc-tracker>` to start an RPC tracker\n and register devices to the tracker.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/auto_scheduler/tune_network_mali.py",
    "lines": [
      148,
      149,
      150,
      151,
      152,
      153
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632177,
    "satd_repo": 70746484,
    "satd_sha": "968b6f60da37d85232af6f9a6070d8ff2ed4be8a",
    "satd_text": " `torch.jit.trace` cannot accept something that outputs\n a Bool, so `torch.jit.script` will be used instead",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3010,
      3011
    ],
    "matched_text": "            # `torch.jit.trace` cannot accept something that outputs"
  },
  {
    "satd_id": 6632179,
    "satd_repo": 70746484,
    "satd_sha": "968b6f60da37d85232af6f9a6070d8ff2ed4be8a",
    "satd_text": " todo(dvisnty): Run the test for bfloat16 when full bfloat16 support is implemented\n verify_script_model(IsFloatingPoint(), [(1,1)], targets, idtype=torch.bfloat16)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3018,
      3019
    ],
    "matched_text": "    # todo(dvisnty): Run the test for bfloat16 when full bfloat16 support is implemented"
  },
  {
    "satd_id": 6632185,
    "satd_repo": 70746484,
    "satd_sha": "98ca7718c89ce9196f1f4f8e71538388a0aec144",
    "satd_text": "################################################################\n Other Tips\n ----------\n 1. During the tuning, the auto-scheduler needs to compile many programs and\n    extract feature from them. This part is CPU-intensive,\n    so a high-performance CPU with many cores is recommended for faster search.\n 2. If you have multiple target devices, you can use all of them for measurements to\n    parallelize the measurements. Check this :ref:`section <tutorials-autotvm-rpc-tracker>`\n    to learn how to use the RPC Tracker and RPC Server.\n    To use the RPC Tracker in auto-scheduler, replace the runner in :code:`TuningOptions`\n    with :any:`auto_scheduler.RPCRunner`.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_mali.py",
    "lines": [
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632189,
    "satd_repo": 70746484,
    "satd_sha": "98ca7718c89ce9196f1f4f8e71538388a0aec144",
    "satd_text": "#####################################################################\n .. note:: Explain the printed information during tuning\n\n   During the tuning, a lot of information will be printed on the console.\n   They are used for debugging purposes. The most important info is the output\n   of the task scheduler. The following table is a sample output.\n\n   .. code-block:: c\n\n     ----------------------------------------------------------------------\n     ------------------------------  [ Task Scheduler ]\n     ----------------------------------------------------------------------\n     |  ID  | Latency (ms) | Speed (GFLOPS) | Trials |\n     -------------------------------------------------\n     |    0 |        0.010 |           0.40 |     64 |\n     |    1 |        0.087 |          47.19 |     64 |\n     |    2 |        0.008 |          -0.00 |     64 |\n     |    3 |        0.177 |         582.07 |     64 |\n     |    4 |        0.268 |         862.37 |    256 |\n     |    5 |        0.166 |         621.13 |    128 |\n     |    6 |        0.170 |         605.10 |    128 |\n     |    7 |        0.128 |         403.20 |     64 |\n     |    8 |        0.189 |         545.71 |     64 |\n     |    9 |        0.231 |        1001.01 |    448 |\n     |   10 |        0.155 |         664.80 |    256 |\n     |   11 |        0.155 |         662.86 |    256 |\n     |   12 |        0.119 |         434.08 |     64 |\n     |   13 |        0.199 |         522.13 |     64 |\n     |   14 |        0.235 |         986.56 |    320 |\n     |   15 |        0.149 |         689.13 |    128 |\n     |   16 |        0.155 |         664.80 |    192 |\n     |   17 |        0.151 |         340.64 |     64 |\n     |   18 |        0.176 |         597.55 |    128 |\n     |   19 |        0.220 |        1054.37 |    192 |\n     |   20 |        0.150 |         686.01 |    128 |\n     |   21 |        0.159 |         650.88 |    128 |\n     |   22 |        0.073 |         358.19 |     64 |\n     |   23 |        0.031 |          70.63 |     64 |\n     |   24 |        0.251 |         947.73 |    128 |\n     |   25 |        0.157 |         652.47 |    128 |\n     |   26 |        0.215 |         954.84 |    128 |\n     |   27 |        0.237 |         868.92 |    128 |\n     |   28 |        0.266 |         774.06 |    128 |\n     -------------------------------------------------\n     Estimated total latency: 10.016 ms      Trials: 3992    Used time : 1131 s      Next ID: 15\n\n   This table lists the latency and (estimated) speed of all tasks.\n   It also lists the allocation of measurement trials for all tasks.\n   The last line prints the total weighted latency of these tasks,\n   which can be a rough estimation of the end-to-end execution time\n   of the network.\n   The last line also prints the total number of measurement trials,\n   total time spent on auto-tuning and the id of the next task to tune.\n\n   There will also be some \"dmlc::Error\"s errors, because the\n   auto-scheduler will try some invalid schedules.\n   You can safely ignore them if the tuning can continue, because these\n   errors are isolated from the main process.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_mali.py",
    "lines": [
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6632190,
    "satd_repo": 70746484,
    "satd_sha": "98ca7718c89ce9196f1f4f8e71538388a0aec144",
    "satd_text": " change this to 20000 to achieve the best performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_mali.py",
    "lines": [
      217
    ],
    "matched_text": "        num_measure_trials=200,  # change this to 20000 to achieve the best performance"
  },
  {
    "satd_id": 6632197,
    "satd_repo": 70746484,
    "satd_sha": "98ca7718c89ce9196f1f4f8e71538388a0aec144",
    "satd_text": "################################################################\n Define a Network\n ----------------\n First, we need to define the network with relay frontend API.\n We can load some pre-defined network from :code:`tvm.relay.testing`.\n We can also load models from MXNet, ONNX, PyTorch, and TensorFlow\n (see :ref:`front end tutorials<tutorial-frontend>`).\n\n For convolutional neural networks, although auto-scheduler can work correctly\n with any layout, we found the best performance is typically achieved with NHWC layout.\n We also implemented more optimizations for NHWC layout with the auto-scheduler.\n So it is recommended to convert your models to NHWC layout to use the auto-scheduler.\n You can use :ref:`ConvertLayout <convert-layout-usage>` pass to do the layout conversion in TVM.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/auto_scheduler/tune_network_mali.py",
    "lines": [
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632208,
    "satd_repo": 70746484,
    "satd_sha": "9713d675c64ae3075e10be5acadeef1328a44bb5",
    "satd_text": " pylint: disable=invalid-name, unused-import, import-outside-toplevel, inconsistent-return-statements",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/runtime/module.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-import, import-outside-toplevel, inconsistent-return-statements"
  },
  {
    "satd_id": 6632209,
    "satd_repo": 70746484,
    "satd_sha": "9713d675c64ae3075e10be5acadeef1328a44bb5",
    "satd_text": " TODO(@manupa-arm): pass the function names to enable system-lib creation",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/contrib/dnnl/codegen.cc",
    "lines": [
      416
    ],
    "matched_text": "    // TODO(@manupa-arm): pass the function names to enable system-lib creation"
  },
  {
    "satd_id": 6632213,
    "satd_repo": 70746484,
    "satd_sha": "9713d675c64ae3075e10be5acadeef1328a44bb5",
    "satd_text": " TODO(@manupa-arm) : we should be able to use csource_metadata\n if the variables are empty when all the runtime modules implement get_func_names",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/target/source/source_module.cc",
    "lines": [
      88,
      89
    ],
    "matched_text": "    // TODO(@manupa-arm) : we should be able to use csource_metadata"
  },
  {
    "satd_id": 6632226,
    "satd_repo": 70746484,
    "satd_sha": "37af2d741d3efb37ca6aba261db8b78583dbc1cd",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/popen_pool.py",
    "lines": [
      308
    ],
    "matched_text": "        # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6632247,
    "satd_repo": 70746484,
    "satd_sha": "9e766d9e6c0c999be0aa1dbfd890edb702472c93",
    "satd_text": "# TODO(mbrookhart): This thrust function is actually doing argsort, not sort\n# For performance, we should probably rename the contrib function and add\n# a pure sort",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sort.py",
    "lines": [
      388,
      389,
      390
    ],
    "matched_text": "        ## TODO(mbrookhart): This thrust function is actually doing argsort, not sort"
  },
  {
    "satd_id": 6632250,
    "satd_repo": 70746484,
    "satd_sha": "bad149ed8a555444d813537608ee5cea9e95e97e",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/conv2d_transpose_nchw.py",
    "lines": [
      182
    ],
    "matched_text": "            # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      182
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      225
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      293
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      297
    ],
    "matched_text": "    def concatenate(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      390
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      408
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      412
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      432
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      436
    ],
    "matched_text": "    def add(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      461
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      512
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      516
    ],
    "matched_text": "    def tanh(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      520
    ],
    "matched_text": "    def sigmoid(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      524
    ],
    "matched_text": "    def erf(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      584
    ],
    "matched_text": "    def less(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      588
    ],
    "matched_text": "    def add(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      592
    ],
    "matched_text": "    def zeros_like(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      685
    ],
    "matched_text": "    def equal(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      689
    ],
    "matched_text": "    def sigmoid(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632267,
    "satd_repo": 70746484,
    "satd_sha": "4060b4f7cc358661eab733fb0ee7d348800269ed",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      693
    ],
    "matched_text": "    def erf(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6632277,
    "satd_repo": 70746484,
    "satd_sha": "862655b30ad0a77b74f9e06dccb6d70a69473d5a",
    "satd_text": " Case 1. If both are true means first input was dense and second was sparse\n Case 2. If both are false means first input was sparse and second was dense\n TODO(ANSHUMAN87): Support other adjoint option too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      958,
      959,
      960
    ],
    "matched_text": "        # Case 1. If both are true means first input was dense and second was sparse"
  },
  {
    "satd_id": 6632280,
    "satd_repo": 70746484,
    "satd_sha": "862655b30ad0a77b74f9e06dccb6d70a69473d5a",
    "satd_text": " TODO(ANSHUMAN87): Add for sparse_dense_bsrmm_v1 also",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      68
    ],
    "matched_text": "    # TODO(ANSHUMAN87): Add for sparse_dense_bsrmm_v1 also"
  },
  {
    "satd_id": 6632281,
    "satd_repo": 70746484,
    "satd_sha": "862655b30ad0a77b74f9e06dccb6d70a69473d5a",
    "satd_text": " TODO(ANSHUMAN87): Handle for sparse_lhs case too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      366
    ],
    "matched_text": "    # TODO(ANSHUMAN87): Handle for sparse_lhs case too"
  },
  {
    "satd_id": 6632339,
    "satd_repo": 70746484,
    "satd_sha": "f606637ac7b0fc8efb4ab7529e11b851df8c3c36",
    "satd_text": "!\n * \\brief Allocate memory for use by TVM.\n *\n * When this function returns something other than kTvmErrorNoError, *out_ptr should not be modified\n * and the caller is not obligated to call TVMPlatformMemoryFree in order to avoid a memory leak.\n *\n * \\param num_bytes Number of bytes requested.\n * \\param ctx Execution context that will be used with the allocated memory. Fixed to {kDLCPU, 0}.\n * \\param out_ptr A pointer to which is written a pointer to the newly-allocated memory.\n * \\return kTvmErrorNoError if successful; a descriptive error code otherwise.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/platform.h",
    "lines": [
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6632356,
    "satd_repo": 70746484,
    "satd_sha": "3144cec7fac88707f0a5e338a5157435be070d6b",
    "satd_text": " TODO(masahi): Support atomic for CPU backend",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/target/llvm/codegen_llvm.cc",
    "lines": [
      959
    ],
    "matched_text": "    // TODO(masahi): Support atomic for CPU backend"
  },
  {
    "satd_id": 6632416,
    "satd_repo": 70746484,
    "satd_sha": "fdfc7eb8876278cbfd31f6d1d82ca75829a7aac4",
    "satd_text": " FIXME",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/op/op.cc",
    "lines": [
      875
    ],
    "matched_text": "    LOG(FATAL) << \"only accept int or float\";  // FIXME"
  },
  {
    "satd_id": 6632419,
    "satd_repo": 70746484,
    "satd_sha": "fdfc7eb8876278cbfd31f6d1d82ca75829a7aac4",
    "satd_text": " TODO(tkonolige): need to convert all registered min functions to use the span.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/op/op.cc",
    "lines": [
      185
    ],
    "matched_text": "    // TODO(tkonolige): need to convert all registered min functions to use the span."
  },
  {
    "satd_id": 6632427,
    "satd_repo": 70746484,
    "satd_sha": "54cd235d7d0c01c05d29f4f26fd8788a50b84877",
    "satd_text": " TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have\n to use thrust to guarantee the correct results which has been tested locally.\n @tvm.testing.uses_gpu",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      225,
      226,
      227
    ],
    "matched_text": "# TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have"
  },
  {
    "satd_id": 6632427,
    "satd_repo": 70746484,
    "satd_sha": "54cd235d7d0c01c05d29f4f26fd8788a50b84877",
    "satd_text": " TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have\n to use thrust to guarantee the correct results which has been tested locally.\n @tvm.testing.uses_gpu",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/topi/python/test_topi_argwhere.py",
    "lines": [
      66,
      67,
      68
    ],
    "matched_text": "# TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have"
  },
  {
    "satd_id": 6632429,
    "satd_repo": 70746484,
    "satd_sha": "54cd235d7d0c01c05d29f4f26fd8788a50b84877",
    "satd_text": " TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have\n to use thrust to guarantee the correct results which has been tested locally.\n @tvm.testing.uses_gpu",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      225,
      226,
      227
    ],
    "matched_text": "# TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have"
  },
  {
    "satd_id": 6632429,
    "satd_repo": 70746484,
    "satd_sha": "54cd235d7d0c01c05d29f4f26fd8788a50b84877",
    "satd_text": " TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have\n to use thrust to guarantee the correct results which has been tested locally.\n @tvm.testing.uses_gpu",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/topi/python/test_topi_argwhere.py",
    "lines": [
      66,
      67,
      68
    ],
    "matched_text": "# TODO(zhiics) Enable argwhere gpu test after sort is fixed. Otherwise, we have"
  },
  {
    "satd_id": 6632456,
    "satd_repo": 70746484,
    "satd_sha": "8daa97ec87118ecdf38453ca878655cb08fba329",
    "satd_text": " TODO(@jroesch): consider moving to C++?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/__init__.py",
    "lines": [
      91
    ],
    "matched_text": "            # TODO(@jroesch): consider moving to C++?"
  },
  {
    "satd_id": 6632457,
    "satd_repo": 70746484,
    "satd_sha": "8daa97ec87118ecdf38453ca878655cb08fba329",
    "satd_text": " Not awesome parsing code here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1417
    ],
    "matched_text": "                  // Not awesome parsing code here."
  },
  {
    "satd_id": 6632458,
    "satd_repo": 70746484,
    "satd_sha": "8daa97ec87118ecdf38453ca878655cb08fba329",
    "satd_text": " TODO(@jroesch): might not handle trailing comma",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1407
    ],
    "matched_text": "            // TODO(@jroesch): might not handle trailing comma"
  },
  {
    "satd_id": 6632461,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      200,
      201
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6632461,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_x86.py",
    "lines": [
      194,
      195
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6632463,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": "################################################################\n Other Tips\n ----------\n 1. During the tuning, the auto-scheduler needs to compile many programs and\n    extract feature from them. This part is CPU-intensive,\n    so a high-performance CPU with many cores is recommended for faster search.\n 2. If you have multiple target CPUs, you can use all of them for measurements to\n    parallelize the measurements. Check this :ref:`section <tutorials-autotvm-rpc-tracker>`\n    to learn how to use the RPC Tracker and RPC Server.\n    To use the RPC Tracker in auto-scheduler, replace the runner in :code:`TuningOptions`\n    with :any:`auto_scheduler.RPCRunner`.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_x86.py",
    "lines": [
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632465,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": "#####################################################################\n .. note:: Explain the printed information during tuning\n\n   During the tuning, a lot of information will be printed on the console.\n   They are used for debugging purposes. The most important info is the output\n   of the task scheduler. The following table is a sample output.\n\n   .. code-block:: c\n\n     ----------------------------------------------------------------------\n     ------------------------------  [ Task Scheduler ]\n     ----------------------------------------------------------------------\n     |  ID  | Latency (ms) | Speed (GFLOPS) | Trials |\n     -------------------------------------------------\n     |    0 |        0.010 |           0.40 |     64 |\n     |    1 |        0.087 |          47.19 |     64 |\n     |    2 |        0.008 |          -0.00 |     64 |\n     |    3 |        0.177 |         582.07 |     64 |\n     |    4 |        0.268 |         862.37 |    256 |\n     |    5 |        0.166 |         621.13 |    128 |\n     |    6 |        0.170 |         605.10 |    128 |\n     |    7 |        0.128 |         403.20 |     64 |\n     |    8 |        0.189 |         545.71 |     64 |\n     |    9 |        0.231 |        1001.01 |    448 |\n     |   10 |        0.155 |         664.80 |    256 |\n     |   11 |        0.155 |         662.86 |    256 |\n     |   12 |        0.119 |         434.08 |     64 |\n     |   13 |        0.199 |         522.13 |     64 |\n     |   14 |        0.235 |         986.56 |    320 |\n     |   15 |        0.149 |         689.13 |    128 |\n     |   16 |        0.155 |         664.80 |    192 |\n     |   17 |        0.151 |         340.64 |     64 |\n     |   18 |        0.176 |         597.55 |    128 |\n     |   19 |        0.220 |        1054.37 |    192 |\n     |   20 |        0.150 |         686.01 |    128 |\n     |   21 |        0.159 |         650.88 |    128 |\n     |   22 |        0.073 |         358.19 |     64 |\n     |   23 |        0.031 |          70.63 |     64 |\n     |   24 |        0.251 |         947.73 |    128 |\n     |   25 |        0.157 |         652.47 |    128 |\n     |   26 |        0.215 |         954.84 |    128 |\n     |   27 |        0.237 |         868.92 |    128 |\n     |   28 |        0.266 |         774.06 |    128 |\n     -------------------------------------------------\n     Estimated total latency: 10.016 ms      Trials: 3992    Used time : 1131 s      Next ID: 15\n\n   This table lists the latency and (estimated) speed of all tasks.\n   It also lists the allocation of measurement trials for all tasks.\n   The last line prints the total weighted latency of these tasks,\n   which can be a rough estimation of the end-to-end execution time\n   of the network.\n   The last line also prints the total number of measurement trials,\n   total time spent on auto-tuning and the id of the next task to tune.\n\n   There will also be some \"dmlc::Error\"s errors, because the\n   auto-scheduler will try some invalid schedules.\n   You can safely ignore them if the tuning can continue, because these\n   errors are isolated from the main process.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_x86.py",
    "lines": [
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6632467,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": " change this to 20000 to achieve the best performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      192
    ],
    "matched_text": "        num_measure_trials=200,  # change this to 20000 to achieve the best performance"
  },
  {
    "satd_id": 6632467,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": " change this to 20000 to achieve the best performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_x86.py",
    "lines": [
      186
    ],
    "matched_text": "        num_measure_trials=200,  # change this to 20000 to achieve the best performance"
  },
  {
    "satd_id": 6632475,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": "################################################################\n Define a Network\n ----------------\n First, we need to define the network with relay frontend API.\n We can load some pre-defined network from :code:`tvm.relay.testing`.\n We can also load models from MXNet, ONNX, PyTorch, and TensorFlow\n (see :ref:`front end tutorials<tutorial-frontend>`).\n\n For convolutional neural networks, although auto-scheduler can work correctly\n with any layout, we found the best performance is typically achieved with NHWC layout.\n We also implemented more optimizations for NHWC layout with the auto-scheduler.\n So it is recommended to convert your models to NHWC layout to use the auto-scheduler.\n You can use :ref:`ConvertLayout <convert-layout-usage>` pass to do the layout conversion in TVM.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632475,
    "satd_repo": 70746484,
    "satd_sha": "3afde624f1eaf744460428fba6cdaa55bf23a668",
    "satd_text": "################################################################\n Define a Network\n ----------------\n First, we need to define the network with relay frontend API.\n We can load some pre-defined network from :code:`tvm.relay.testing`.\n We can also load models from MXNet, ONNX, PyTorch, and TensorFlow\n (see :ref:`front end tutorials<tutorial-frontend>`).\n\n For convolutional neural networks, although auto-scheduler can work correctly\n with any layout, we found the best performance is typically achieved with NHWC layout.\n We also implemented more optimizations for NHWC layout with the auto-scheduler.\n So it is recommended to convert your models to NHWC layout to use the auto-scheduler.\n You can use :ref:`ConvertLayout <convert-layout-usage>` pass to do the layout conversion in TVM.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/auto_scheduler/tune_network_x86.py",
    "lines": [
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632486,
    "satd_repo": 70746484,
    "satd_sha": "a7bf97936ce51e5ece2f66d7fa9602b35a3aa1fa",
    "satd_text": " Insert a new op to do layout transform. (This will be simplified by FoldConstant later).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/auto_scheduler_layout_rewrite.cc",
    "lines": [
      78
    ],
    "matched_text": "      // Insert a new op to do layout transform. (This will be simplified by FoldConstant later)."
  },
  {
    "satd_id": 6632515,
    "satd_repo": 70746484,
    "satd_sha": "a7bf97936ce51e5ece2f66d7fa9602b35a3aa1fa",
    "satd_text": " Infer shape for the rewritten layout\n todo(merrymercy): wrap this with a more general interface.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/nn/conv2d.py",
    "lines": [
      383,
      384
    ],
    "matched_text": "        # Infer shape for the rewritten layout"
  },
  {
    "satd_id": 6632541,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/scatter.py",
    "lines": [
      599,
      600
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632541,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/scatter.py",
    "lines": [
      267,
      268
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632541,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/x86/scatter.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632547,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " For now we avoid parallizing over dimensions indexed by `indices` as\n there may be repeated indices and hadling parallel accumulation can\n be hard. So we parallelize over X_M .. X_{N-1} instead. This will\n work well when these dimensions are large enough to saturate memory\n bandwidth, but performance will be bad when these dimensions are\n small.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/scatter.py",
    "lines": [
      585,
      586,
      587,
      588,
      589,
      590
    ],
    "matched_text": "        # For now we avoid parallizing over dimensions indexed by `indices` as"
  },
  {
    "satd_id": 6632549,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/scatter.py",
    "lines": [
      599,
      600
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632549,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/scatter.py",
    "lines": [
      267,
      268
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632549,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/x86/scatter.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632553,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/scatter.py",
    "lines": [
      599,
      600
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632553,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/scatter.py",
    "lines": [
      267,
      268
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632553,
    "satd_repo": 70746484,
    "satd_sha": "0421efba4c3a42c6cf8d692734c24fe8e08e3884",
    "satd_text": " zero data\n TODO(tkonolige): could we use topi.full to zero it instead?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/x86/scatter.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "        # zero data"
  },
  {
    "satd_id": 6632559,
    "satd_repo": 70746484,
    "satd_sha": "7950ea19d40f41c278803c19296073a6eea6acb5",
    "satd_text": " [Box Tol, Score Tol, Label Tol, Mask Tol]\n Because of certain ops, there are certain minor differences in TVM outputs and PT outputs,\n This means that the tolerance can't be 1e-4 or 1e-5 throughout. The ideal way to get around\n this is to test it on an entire dataset and compare mAP with the original model.\n However, since that is not practically possible on CI, the following compromise is made.\n These tolerances are chosen based on their impact or lack thereof to the mAP score, e.g:\n 0.1 pixel difference of a box in a 300X300 image wont make any change.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/contrib/test_tensorrt.py",
    "lines": [
      1206,
      1207,
      1208,
      1209,
      1210,
      1211,
      1212
    ],
    "matched_text": "    tol = [1e-1, 5e-3, 1e-5, 4e-1]  # [Box Tol, Score Tol, Label Tol, Mask Tol]"
  },
  {
    "satd_id": 6632648,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " When multiple elements fit per line, divide the available space by the size of one element,\n and return the largest power of 2 less than the result. Using power-of-2-sized elements allows\n for easily traversing the generated code.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      43,
      44,
      45
    ],
    "matched_text": "  // When multiple elements fit per line, divide the available space by the size of one element,"
  },
  {
    "satd_id": 6632654,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " \"0x\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      57
    ],
    "matched_text": "  int one_element_size_bytes = (sizeof(T) / 4) + (2 /* \"0x\" */) + (2 /* \", \" */);"
  },
  {
    "satd_id": 6632654,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " \"0x\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      89
    ],
    "matched_text": "      os << \"0x\" << std::setw(sizeof(T) * 8 / 4) << static_cast<std::uint64_t>(to_print);"
  },
  {
    "satd_id": 6632654,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " \"0x\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      94
    ],
    "matched_text": "      os << \"0x\" << std::setw(sizeof(T) * 8 / 4) << static_cast<std::uint64_t>(elem);"
  },
  {
    "satd_id": 6632654,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " \"0x\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      112
    ],
    "matched_text": "  int one_element_size_bytes = (sizeof(T) / 4) + (2 /* \"0x\" */) + (2 /* \", \" */) + 1 /* sign */ +"
  },
  {
    "satd_id": 6632661,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": "! \\brief maximum line length of generated parameters, including indent. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_params.cc",
    "lines": [
      36
    ],
    "matched_text": "/*! \\brief maximum line length of generated parameters, including indent. */"
  },
  {
    "satd_id": 6632674,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " Note: for debugging, set this to an integer (i.e. 1.0). Then all \"random\" tensors will become\n predictable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_link_params.py",
    "lines": [
      56,
      57
    ],
    "matched_text": "# Note: for debugging, set this to an integer (i.e. 1.0). Then all \"random\" tensors will become"
  },
  {
    "satd_id": 6632683,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_crt.py",
    "lines": [
      54,
      55,
      56,
      57
    ],
    "matched_text": "        # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6632683,
    "satd_repo": 70746484,
    "satd_sha": "81d9f11ab87dc3ef5fc906aa6ca23737885f7b27",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_link_params.py",
    "lines": [
      361,
      362,
      363,
      364
    ],
    "matched_text": "                # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6632733,
    "satd_repo": 70746484,
    "satd_sha": "926a3153721882121522deee06e8c67fa1aaf689",
    "satd_text": " Disable as tests are flaky - https://github.com/apache/tvm/issues/6064",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1103
    ],
    "matched_text": "        # Disable as tests are flaky - https://github.com/apache/tvm/issues/6064"
  },
  {
    "satd_id": 6632763,
    "satd_repo": 70746484,
    "satd_sha": "580bf6dbaff1bd6d476e06efc5e58b5ab8f744b8",
    "satd_text": " Lack of timeout prints.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_micro_transport.py",
    "lines": [
      95
    ],
    "matched_text": "            # Lack of timeout prints."
  },
  {
    "satd_id": 6632763,
    "satd_repo": 70746484,
    "satd_sha": "580bf6dbaff1bd6d476e06efc5e58b5ab8f744b8",
    "satd_text": " Lack of timeout prints.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_micro_transport.py",
    "lines": [
      148
    ],
    "matched_text": "            # Lack of timeout prints."
  },
  {
    "satd_id": 6632825,
    "satd_repo": 70746484,
    "satd_sha": "e8de2c527db270e8e6208c7cf09f00de9491bf56",
    "satd_text": " Verbose level:\n 0: Completely silent.\n 1: Warning the missing configs for querying complex tasks.\n 2: Warning the missing configs for querying all tasks.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/dispatcher.py",
    "lines": [
      245,
      246,
      247,
      248
    ],
    "matched_text": "        # Verbose level:"
  },
  {
    "satd_id": 6632853,
    "satd_repo": 70746484,
    "satd_sha": "f9d26fb8bdbec2c5dad2a0181760059e77fc26fb",
    "satd_text": "! \\brief Called by the microTVM RPC server to implement TVMLogf.\n *\n * Not required to be implemented when the RPC server is not linked into the binary. This\n * function's signature matches that of vsnprintf, so trivial implementations can just call\n * vsnprintf.\n *\n * \\param out_buf A char buffer where the formatted string should be written.\n * \\param out_buf_size_bytes Number of bytes available for writing in out_buf.\n * \\param fmt The printf-style formatstring.\n * \\param args extra arguments to be formatted.\n * \\return number of bytes written.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/platform.h",
    "lines": [
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55
    ],
    "matched_text": "/*! \\brief Called by the microTVM RPC server to implement TVMLogf."
  },
  {
    "satd_id": 6632874,
    "satd_repo": 70746484,
    "satd_sha": "050a836b18c419213f34b8ac76afced425d9d70e",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      198,
      199
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6632874,
    "satd_repo": 70746484,
    "satd_sha": "050a836b18c419213f34b8ac76afced425d9d70e",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      255,
      256
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6632879,
    "satd_repo": 70746484,
    "satd_sha": "050a836b18c419213f34b8ac76afced425d9d70e",
    "satd_text": " change this to 20000 to achieve the best performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      190
    ],
    "matched_text": "        num_measure_trials=200,  # change this to 20000 to achieve the best performance"
  },
  {
    "satd_id": 6632883,
    "satd_repo": 70746484,
    "satd_sha": "050a836b18c419213f34b8ac76afced425d9d70e",
    "satd_text": "#####################################################################\n .. note:: Explain the printed information during tuning\n\n   During the tuning, a lot of information will be printed on the console.\n   They are used for debugging purposes. The most important info is the output\n   of the task scheduler. The following table is a sample output.\n\n   .. code-block:: c\n\n     ----------------------------------------------------------------------\n     ------------------------------  [ Task Scheduler ]\n     ----------------------------------------------------------------------\n     |  ID  | Latency (ms) | Speed (GFLOPS) | Trials |\n     -------------------------------------------------\n     |    0 |        0.014 |          72.07 |     64 |\n     |    1 |        0.185 |        1250.68 |    128 |\n     |    2 |        0.142 |        1626.36 |    192 |\n     |    3 |        0.137 |        1689.42 |    128 |\n     |    4 |        0.097 |        1189.75 |    128 |\n     |    5 |        0.092 |        2505.25 |    128 |\n     |    6 |        0.080 |        2893.08 |    128 |\n     |    7 |        0.119 |        1947.84 |    128 |\n     |    8 |        0.090 |        1292.62 |     64 |\n     |    9 |        0.107 |        2172.30 |     64 |\n     |   10 |        0.095 |        2439.36 |     64 |\n     |   11 |        0.077 |        3003.22 |     64 |\n     |   12 |        0.068 |        1695.13 |     64 |\n     |   13 |        0.058 |        3979.29 |     64 |\n     |   14 |        0.048 |        4859.95 |    128 |\n     |   15 |        0.073 |        3151.76 |     64 |\n     |   16 |        0.056 |        4265.94 |     64 |\n     |   17 |        0.009 |        2754.90 |     64 |\n     |   18 |        0.011 |        1156.08 |     64 |\n     |   19 |        0.013 |         955.80 |     64 |\n     |   20 |        0.029 |         437.71 |     64 |\n     -------------------------------------------------\n     Estimated total latency: 1.649 ms  Trials: 1920  Used time : 3598 s  Next ID: 9\n\n   This table lists the latency and (estimated) speed of all tasks.\n   It also lists the allocation of measurement trials for all tasks.\n   The last line prints the total weighted latency of these tasks,\n   which can be a rough estimation of the end-to-end execution time\n   of the network.\n   The last line also prints the total number of measurement trials,\n   total time spent on auto-tuning and the id of the next task to tune.\n\n   There will also be some \"dmlc::Error\"s and CUDA errors, because the\n   auto-scheduler will try some invalid schedules.\n   You can safely ignore them if the tuning can continue, because these\n   errors are isolated from the master process.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6632886,
    "satd_repo": 70746484,
    "satd_sha": "050a836b18c419213f34b8ac76afced425d9d70e",
    "satd_text": "################################################################\n Other Tips\n --------------------\n 1. During the tuning, the auto-scheduler needs to compile many programs and\n    extract feature from them. This part is CPU-intensive,\n    so a high-performance CPU with many cores is recommended for faster search.\n 2. If you have multiple GPUs, you can use all of them for measurements to\n    parallelize the measurements. Check this :ref:`section <tutorials-autotvm-rpc-tracker>`\n    to learn how to use the RPC Tracker and RPC Server.\n    To use the RPC Tracker in auto-scheduler, replace the runner in :code:`TuningOptions`\n    with :any:`auto_scheduler.RPCRunner`.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_network_cuda.py",
    "lines": [
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6632913,
    "satd_repo": 70746484,
    "satd_sha": "1fbe1744258a3a6bc949ddf70c7ce0fa8767e36f",
    "satd_text": " Todo(merrymercy): when the cpu backend is upstreamed, do the following things:\n 1. compile without history to test the fallback mechanism\n 2. check the correctness of layout rewrite / winograd pre-transform",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_auto_scheduler_tuning.py",
    "lines": [
      56,
      57,
      58
    ],
    "matched_text": "    # Todo(merrymercy): when the cpu backend is upstreamed, do the following things:"
  },
  {
    "satd_id": 6632919,
    "satd_repo": 70746484,
    "satd_sha": "a7b22ab9ba79211fca95a0e8570d4aa75f47875a",
    "satd_text": " TODO(mbrookhart): Enable when we can get it working",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level6.py",
    "lines": [
      25
    ],
    "matched_text": "# TODO(mbrookhart): Enable when we can get it working"
  },
  {
    "satd_id": 6632921,
    "satd_repo": 70746484,
    "satd_sha": "a11af8bc3676b6013e16465045f5c0cbfa7d9ecf",
    "satd_text": " Workaround for GCC8.1 / GCC8.2",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir/attrs.h",
    "lines": [
      416
    ],
    "matched_text": "// Workaround for GCC8.1 / GCC8.2"
  },
  {
    "satd_id": 6632951,
    "satd_repo": 70746484,
    "satd_sha": "83b75f8e13656c59fe995e83accbeff81c9b3fcc",
    "satd_text": " TODO(giuseros) Need LLVM-11 in order to compile with +i8mm extension\n (\n   \"llvm --device arm_cpu --mtriple aarch64-linux-gnu -mattr=+v8.2a,+i8mm\",\n   topi.arm_cpu.compute_conv2d_NHWC_quantized_interleaved,\n   topi.arm_cpu.schedule_conv2d_NHWC_quantized_interleaved,\n ),",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/topi/python/test_topi_conv2d_int8.py",
    "lines": [
      75,
      76,
      77,
      78,
      79,
      80
    ],
    "matched_text": "        # TODO(giuseros) Need LLVM-11 in order to compile with +i8mm extension"
  },
  {
    "satd_id": 6633011,
    "satd_repo": 70746484,
    "satd_sha": "d164aac058eff0101a043690ca24f374b3900e7e",
    "satd_text": " Raise exception on the first error we hit. TODO remove",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/script/diagnostics.py",
    "lines": [
      51
    ],
    "matched_text": "        self.diag_ctx.render()  # Raise exception on the first error we hit. TODO remove"
  },
  {
    "satd_id": 6633014,
    "satd_repo": 70746484,
    "satd_sha": "d164aac058eff0101a043690ca24f374b3900e7e",
    "satd_text": " If no positional argument was found in the AST, we see if it was\n defined by name instead.\n TODO(tkonolige): this error message is not quite correct. The\n number of required arguments is >= pos",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/script/parser.py",
    "lines": [
      65,
      66,
      67,
      68
    ],
    "matched_text": "            # If no positional argument was found in the AST, we see if it was"
  },
  {
    "satd_id": 6633022,
    "satd_repo": 70746484,
    "satd_sha": "b31f4ae9b2abeba3bb28c555742e38384c6375de",
    "satd_text": " TODO: (electriclilies) enable AlterOpLayout when it is fixed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_qnn_dequantize.py",
    "lines": [
      139
    ],
    "matched_text": "        # TODO: (electriclilies) enable AlterOpLayout when it is fixed"
  },
  {
    "satd_id": 6633022,
    "satd_repo": 70746484,
    "satd_sha": "b31f4ae9b2abeba3bb28c555742e38384c6375de",
    "satd_text": " TODO: (electriclilies) enable AlterOpLayout when it is fixed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_qnn_quantize.py",
    "lines": [
      154
    ],
    "matched_text": "        # TODO: (electriclilies) enable AlterOpLayout when it is fixed"
  },
  {
    "satd_id": 6633023,
    "satd_repo": 70746484,
    "satd_sha": "b31f4ae9b2abeba3bb28c555742e38384c6375de",
    "satd_text": " TODO: (electriclilies) enable AlterOpLayout when it is fixed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_qnn_dequantize.py",
    "lines": [
      139
    ],
    "matched_text": "        # TODO: (electriclilies) enable AlterOpLayout when it is fixed"
  },
  {
    "satd_id": 6633023,
    "satd_repo": 70746484,
    "satd_sha": "b31f4ae9b2abeba3bb28c555742e38384c6375de",
    "satd_text": " TODO: (electriclilies) enable AlterOpLayout when it is fixed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_qnn_quantize.py",
    "lines": [
      154
    ],
    "matched_text": "        # TODO: (electriclilies) enable AlterOpLayout when it is fixed"
  },
  {
    "satd_id": 6633054,
    "satd_repo": 70746484,
    "satd_sha": "0c0278057e8840b24d6cf42a4d6a630ac03ec6ff",
    "satd_text": " If both are true means First input was dense and second was sparse\n TODO(ANSHUMAN87): Support other adjoint option too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      934,
      935
    ],
    "matched_text": "        # If both are true means First input was dense and second was sparse"
  },
  {
    "satd_id": 6633056,
    "satd_repo": 70746484,
    "satd_sha": "0c0278057e8840b24d6cf42a4d6a630ac03ec6ff",
    "satd_text": " TODO(ANSHUMAN87): False case for flip need to be supported\n _test_sparse_dense_matmul([[0, 0], [1, 2]], [4.0, 8.0], [3, 4], [4, 3], \"float32\")",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1797,
      1798
    ],
    "matched_text": "    # TODO(ANSHUMAN87): False case for flip need to be supported"
  },
  {
    "satd_id": 6633058,
    "satd_repo": 70746484,
    "satd_sha": "0c0278057e8840b24d6cf42a4d6a630ac03ec6ff",
    "satd_text": " TODO(ANSHUMAN87): There is an issue in cuda scheduling for csr, work in progress",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1779
    ],
    "matched_text": "                # TODO(ANSHUMAN87): There is an issue in cuda scheduling for csr, work in progress"
  },
  {
    "satd_id": 6633060,
    "satd_repo": 70746484,
    "satd_sha": "0c0278057e8840b24d6cf42a4d6a630ac03ec6ff",
    "satd_text": " TODO(ANSHUMAN87): Support adjoint options too",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1761
    ],
    "matched_text": "    # TODO(ANSHUMAN87): Support adjoint options too"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      196
    ],
    "matched_text": "def add_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      216
    ],
    "matched_text": "def batch_norm_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      230
    ],
    "matched_text": "def softmax_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      244
    ],
    "matched_text": "def conv2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      264
    ],
    "matched_text": "def dense_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      283
    ],
    "matched_text": "def bias_add_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      298
    ],
    "matched_text": "def max_pool_2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      315
    ],
    "matched_text": "def avg_pool_2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      345
    ],
    "matched_text": "def global_max_pool_2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      359
    ],
    "matched_text": "def global_avg_pool_2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      373
    ],
    "matched_text": "def expand_dims_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      387
    ],
    "matched_text": "def squeeze_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      404
    ],
    "matched_text": "def concatenate_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      425
    ],
    "matched_text": "def conv2d_transpose_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      450
    ],
    "matched_text": "def transpose_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      464
    ],
    "matched_text": "def layout_transform_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      485
    ],
    "matched_text": "def reshape_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      518
    ],
    "matched_text": "def pad_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      582
    ],
    "matched_text": "def strided_slice_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      608
    ],
    "matched_text": "def adapative_max_pool2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      622
    ],
    "matched_text": "def adapative_avg_pool2d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      636
    ],
    "matched_text": "def conv3d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      658
    ],
    "matched_text": "def max_pool_3d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      674
    ],
    "matched_text": "def avg_pool_3d_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      690
    ],
    "matched_text": "def conv3d_transpose_annotate_fn(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      182
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      224
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      243
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      247
    ],
    "matched_text": "    def concatenate(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      334
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      338
    ],
    "matched_text": "    def add(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      362
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      366
    ],
    "matched_text": "    def tanh(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      370
    ],
    "matched_text": "    def sigmoid(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      374
    ],
    "matched_text": "    def erf(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      433
    ],
    "matched_text": "    def less(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      437
    ],
    "matched_text": "    def add(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      441
    ],
    "matched_text": "    def zeros_like(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      517
    ],
    "matched_text": "    def equal(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      521
    ],
    "matched_text": "    def sigmoid(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      525
    ],
    "matched_text": "    def erf(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1038
    ],
    "matched_text": "    def abs(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1099
    ],
    "matched_text": "    def batch_norm(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1103
    ],
    "matched_text": "    def relu(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1180
    ],
    "matched_text": "    def add(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1226
    ],
    "matched_text": "    def split(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633061,
    "satd_repo": 70746484,
    "satd_sha": "6e36fc44e79efce2c547ff3f9121b529da09d525",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1230
    ],
    "matched_text": "    def abs(expr):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      182
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      224
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      243
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      247
    ],
    "matched_text": "    def concatenate(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      334
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      338
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      362
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      366
    ],
    "matched_text": "    def tanh(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      370
    ],
    "matched_text": "    def sigmoid(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      374
    ],
    "matched_text": "    def erf(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      433
    ],
    "matched_text": "    def less(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      437
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      441
    ],
    "matched_text": "    def zeros_like(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      517
    ],
    "matched_text": "    def equal(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      521
    ],
    "matched_text": "    def sigmoid(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633069,
    "satd_repo": 70746484,
    "satd_sha": "b4db11291057c094bc3146bf843d02e1a63b05aa",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      525
    ],
    "matched_text": "    def erf(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633073,
    "satd_repo": 70746484,
    "satd_sha": "174e21a6b0d10ebd8f28a4ed385b9a3aebbce7dc",
    "satd_text": " Disable for now due to being flaky on i386\n test_correctness_layout_rewrite_rewrite_for_preTransformed()\n test_correctness_layout_rewrite_insert_transform_stage()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_auto_scheduler_layout_rewrite.py",
    "lines": [
      169,
      170,
      171
    ],
    "matched_text": "    # Disable for now due to being flaky on i386"
  },
  {
    "satd_id": 6633116,
    "satd_repo": 70746484,
    "satd_sha": "883954ee45b51ca8e2ff96714520a676cd1f8f74",
    "satd_text": " todo unify wih source name",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "rust/tvm/src/ir/diagnostics/codespan.rs",
    "lines": [
      139
    ],
    "matched_text": "    // todo unify wih source name"
  },
  {
    "satd_id": 6633152,
    "satd_repo": 70746484,
    "satd_sha": "a261454d865fb25e8f27ff11fbfa591aa5dfe64d",
    "satd_text": " a set to prevent print duplicated message",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/dispatcher.py",
    "lines": [
      242
    ],
    "matched_text": "        # a set to prevent print duplicated message"
  },
  {
    "satd_id": 6633154,
    "satd_repo": 70746484,
    "satd_sha": "a261454d865fb25e8f27ff11fbfa591aa5dfe64d",
    "satd_text": " cache this config to avoid duplicated warning message",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/dispatcher.py",
    "lines": [
      262
    ],
    "matched_text": "        # cache this config to avoid duplicated warning message"
  },
  {
    "satd_id": 6633164,
    "satd_repo": 70746484,
    "satd_sha": "a261454d865fb25e8f27ff11fbfa591aa5dfe64d",
    "satd_text": " todo(merrymercy, minminsun): port layout rewrite",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/auto_scheduler/relay_integration.py",
    "lines": [
      227
    ],
    "matched_text": "        # todo(merrymercy, minminsun): port layout rewrite"
  },
  {
    "satd_id": 6633171,
    "satd_repo": 70746484,
    "satd_sha": "a261454d865fb25e8f27ff11fbfa591aa5dfe64d",
    "satd_text": " Todo(merrymercy): compile without any history to test the fallback mechanism",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_auto_scheduler_tuning.py",
    "lines": [
      56
    ],
    "matched_text": "    # Todo(merrymercy): compile without any history to test the fallback mechanism"
  },
  {
    "satd_id": 6633196,
    "satd_repo": 70746484,
    "satd_sha": "6be6363cc0e353d391e19c94646e7d35f6305805",
    "satd_text": " This pool is not doing computationally intensive work, so we can use threads",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/measure.py",
    "lines": [
      643
    ],
    "matched_text": "    # This pool is not doing computationally intensive work, so we can use threads"
  },
  {
    "satd_id": 6633196,
    "satd_repo": 70746484,
    "satd_sha": "6be6363cc0e353d391e19c94646e7d35f6305805",
    "satd_text": " This pool is not doing computationally intensive work, so we can use threads",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/measure.py",
    "lines": [
      1027
    ],
    "matched_text": "    # This pool is not doing computationally intensive work, so we can use threads"
  },
  {
    "satd_id": 6633200,
    "satd_repo": 70746484,
    "satd_sha": "380e2e99671fd8236db97e6ce327a4315bfb12ea",
    "satd_text": " Lambda function to extract the int value from PrimExpr",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/intrin_rule.cc",
    "lines": [
      131
    ],
    "matched_text": "      // Lambda function to extract the int value from PrimExpr"
  },
  {
    "satd_id": 6633226,
    "satd_repo": 70746484,
    "satd_sha": "8e6481e11c0c51f6c8269cd2b5c1be8f2b34c095",
    "satd_text": " Use global variable to pass common arguments. This is only used when\n new processes are started with fork. We have to set the globals\n before we create the pool, so that processes in the pool get the\n correct globals.\n If we are forking, we can pass arguments in globals for better performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6633230,
    "satd_repo": 70746484,
    "satd_sha": "39cd612cdbf9a2443b5561b90b4b4a55996274f1",
    "satd_text": " TODO(@altanh): we currently assume indices are in range",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      689
    ],
    "matched_text": "    # TODO(@altanh): we currently assume indices are in range"
  },
  {
    "satd_id": 6633237,
    "satd_repo": 70746484,
    "satd_sha": "39cd612cdbf9a2443b5561b90b4b4a55996274f1",
    "satd_text": " TODO: testing arange numerically is strange because two-sided approx can\n       produce different output shapes",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_grad_level3.py",
    "lines": [
      109,
      110
    ],
    "matched_text": "    # TODO: testing arange numerically is strange because two-sided approx can"
  },
  {
    "satd_id": 6633290,
    "satd_repo": 70746484,
    "satd_sha": "1831c17998b29f3797f364410980809bfef554ca",
    "satd_text": " This way the \"ICHECK\" above can be removed with minimal effort.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6633294,
    "satd_repo": 70746484,
    "satd_sha": "efe3a79aacd934ea5ffb13170230bf199a473e72",
    "satd_text": " # TODO: add scatter gpu schedule to enable gpu test.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3152
    ],
    "matched_text": "    # TODO: add scatter gpu schedule to enable gpu test."
  },
  {
    "satd_id": 6633294,
    "satd_repo": 70746484,
    "satd_sha": "efe3a79aacd934ea5ffb13170230bf199a473e72",
    "satd_text": " # TODO: add scatter gpu schedule to enable gpu test.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3160
    ],
    "matched_text": "    # # TODO: add scatter gpu schedule to enable gpu test."
  },
  {
    "satd_id": 6633298,
    "satd_repo": 70746484,
    "satd_sha": "aaa9886d83afcc59c1434a9f300115bdea61df8f",
    "satd_text": " remove touched cmake config",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "conda/recipe/build.sh",
    "lines": [
      40
    ],
    "matched_text": "# remove touched cmake config"
  },
  {
    "satd_id": 6633301,
    "satd_repo": 70746484,
    "satd_sha": "aaa9886d83afcc59c1434a9f300115bdea61df8f",
    "satd_text": " remove touched cmake config",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "conda/recipe/build.sh",
    "lines": [
      40
    ],
    "matched_text": "# remove touched cmake config"
  },
  {
    "satd_id": 6633305,
    "satd_repo": 70746484,
    "satd_sha": "7158a4bf14c550320cc8af46b5bc48ed56d3037c",
    "satd_text": " Reduce the target size to avoid too-long time in this phase if no valid state was found\n in the past iterations",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      443,
      444
    ],
    "matched_text": "      // Reduce the target size to avoid too-long time in this phase if no valid state was found"
  },
  {
    "satd_id": 6633308,
    "satd_repo": 70746484,
    "satd_sha": "7158a4bf14c550320cc8af46b5bc48ed56d3037c",
    "satd_text": " Run the cost model to make filter out states that failed to extract features.\n This may happen due to illegal schedules or the schedules that uses too much\n memory on GPU.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      414,
      415,
      416
    ],
    "matched_text": "      // Run the cost model to make filter out states that failed to extract features."
  },
  {
    "satd_id": 6633321,
    "satd_repo": 70746484,
    "satd_sha": "129333b717c397f3469bc2b67fea18b81efafae5",
    "satd_text": " pylint: disable=redefined-builtin, unused-argument, invalid-name, relative-beyond-top-level",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/script/scope_handler.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=redefined-builtin, unused-argument, invalid-name, relative-beyond-top-level"
  },
  {
    "satd_id": 6633331,
    "satd_repo": 70746484,
    "satd_sha": "e1b053ac07bf6f52ec56713801de5dd040d7f4ac",
    "satd_text": " TODO (jwfromm) Test with strided slice once type unifier for this case is fixed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      2092
    ],
    "matched_text": "        # TODO (jwfromm) Test with strided slice once type unifier for this case is fixed."
  },
  {
    "satd_id": 6633349,
    "satd_repo": 70746484,
    "satd_sha": "e1b053ac07bf6f52ec56713801de5dd040d7f4ac",
    "satd_text": " Now we can remove loop iter variables from our inner loop's inputs.\n This is kind of a hack since we have graph inputs that we don't\n want to treat as actual inputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      2109,
      2110,
      2111
    ],
    "matched_text": "        # Now we can remove loop iter variables from our inner loop's inputs."
  },
  {
    "satd_id": 6633356,
    "satd_repo": 70746484,
    "satd_sha": "e1b053ac07bf6f52ec56713801de5dd040d7f4ac",
    "satd_text": " pylint: disable=redefined-builtin, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/tensor.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=redefined-builtin, unused-argument"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      195
    ],
    "matched_text": "def add_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      214
    ],
    "matched_text": "def batch_norm_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      226
    ],
    "matched_text": "def softmax_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      238
    ],
    "matched_text": "def conv2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      256
    ],
    "matched_text": "def dense_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      273
    ],
    "matched_text": "def bias_add_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      286
    ],
    "matched_text": "def max_pool_2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      301
    ],
    "matched_text": "def avg_pool_2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      329
    ],
    "matched_text": "def global_max_pool_2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      341
    ],
    "matched_text": "def global_avg_pool_2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      353
    ],
    "matched_text": "def expand_dims_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      365
    ],
    "matched_text": "def squeeze_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      380
    ],
    "matched_text": "def concatenate_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      399
    ],
    "matched_text": "def conv2d_transpose_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      422
    ],
    "matched_text": "def transpose_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      434
    ],
    "matched_text": "def layout_transform_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      453
    ],
    "matched_text": "def reshape_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      484
    ],
    "matched_text": "def pad_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      546
    ],
    "matched_text": "def strided_slice_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      570
    ],
    "matched_text": "def adapative_max_pool2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      582
    ],
    "matched_text": "def adapative_avg_pool2d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      594
    ],
    "matched_text": "def conv3d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      614
    ],
    "matched_text": "def max_pool_3d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      628
    ],
    "matched_text": "def avg_pool_3d_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633362,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      642
    ],
    "matched_text": "def conv3d_transpose_annotate_fn(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633366,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " Remove invalid subgraphs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      671
    ],
    "matched_text": "    # Remove invalid subgraphs for implicit batch mode."
  },
  {
    "satd_id": 6633366,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " Remove invalid subgraphs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/tensorrt.py",
    "lines": [
      737
    ],
    "matched_text": "    # Remove invalid subgraphs"
  },
  {
    "satd_id": 6633414,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": "! \\brief Whether to automatically convert model to 16-bit floating point precision. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tensorrt/tensorrt_builder.h",
    "lines": [
      142
    ],
    "matched_text": "  /*! \\brief Whether to automatically convert model to 16-bit floating point precision. */"
  },
  {
    "satd_id": 6633418,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": "!\n   * \\brief Takes network definition and \"compiles\" a TensorRT engine which can be used for\n   * inference. This step is time confusing.\n   * \\return TRT engine, context, and input/output information.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tensorrt/tensorrt_builder.h",
    "lines": [
      102,
      103,
      104,
      105,
      106
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6633421,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": "! \\brief Clean up resources used to create engine. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tensorrt/tensorrt_builder.h",
    "lines": [
      116
    ],
    "matched_text": "  /*! \\brief Clean up resources used to create engine. */"
  },
  {
    "satd_id": 6633434,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " count_include_pad=True is useless if there is no padding. TRT doesn't\n like count_include_pad in combination with strides even when there is\n no padding or assymetric padding even, so turn off inclusive to avoid\n error message. Note: Padding will always be symmetric with\n count_include_pad since partitioner will prevent unsupported case.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tensorrt/tensorrt_ops.cc",
    "lines": [
      507,
      508,
      509,
      510,
      511
    ],
    "matched_text": "      // count_include_pad=True is useless if there is no padding. TRT doesn't"
  },
  {
    "satd_id": 6633456,
    "satd_repo": 70746484,
    "satd_sha": "af8636a84314fc41134a3777c1a980435aa9663d",
    "satd_text": " TODO(trevmorr): Support reduce to scalar.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tensorrt/tensorrt_ops.cc",
    "lines": [
      932
    ],
    "matched_text": "    // TODO(trevmorr): Support reduce to scalar."
  },
  {
    "satd_id": 6633549,
    "satd_repo": 70746484,
    "satd_sha": "c5dc98c1c336610eb2763583078312b6f3e07c13",
    "satd_text": " Avoid rfactor if we have enough parallelism on space iters",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      338
    ],
    "matched_text": "      // Avoid rfactor if we have enough parallelism on space iters"
  },
  {
    "satd_id": 6633567,
    "satd_repo": 70746484,
    "satd_sha": "94679b5cf46bd89872ae611995ff43f6dae78786",
    "satd_text": " best_costs[i] saves the best latency of task i",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/task_scheduler.py",
    "lines": [
      197
    ],
    "matched_text": "        # best_costs[i] saves the best latency of task i"
  },
  {
    "satd_id": 6633575,
    "satd_repo": 70746484,
    "satd_sha": "94679b5cf46bd89872ae611995ff43f6dae78786",
    "satd_text": " Forcely rewrite the initial values.\n This can make this test more stable on the slow CI machines",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_auto_scheduler_task_scheduler.py",
    "lines": [
      92,
      93
    ],
    "matched_text": "        # Forcely rewrite the initial values."
  },
  {
    "satd_id": 6633585,
    "satd_repo": 70746484,
    "satd_sha": "94679b5cf46bd89872ae611995ff43f6dae78786",
    "satd_text": " Randomly choose a sketch\n TODO(merrymercy, comaniac): add crossover.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6633590,
    "satd_repo": 70746484,
    "satd_sha": "94679b5cf46bd89872ae611995ff43f6dae78786",
    "satd_text": " Infer bound. This is necessary for computing the correct ToStr() for redundancy check",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      174
    ],
    "matched_text": "      // Infer bound. This is necessary for computing the correct ToStr() for redundancy check"
  },
  {
    "satd_id": 6633590,
    "satd_repo": 70746484,
    "satd_sha": "94679b5cf46bd89872ae611995ff43f6dae78786",
    "satd_text": " Infer bound. This is necessary for computing the correct ToStr() for redundancy check",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      234
    ],
    "matched_text": "  // Infer bound. This is necessary for computing the correct ToStr() for redundancy check"
  },
  {
    "satd_id": 6633625,
    "satd_repo": 70746484,
    "satd_sha": "c7ff88516f99ea9ee275e9975cbd30e8979054e9",
    "satd_text": " TODO(weberlo) verify this is necessary",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/micro/qemu/test_zephyr.py",
    "lines": [
      68
    ],
    "matched_text": "    # TODO(weberlo) verify this is necessary"
  },
  {
    "satd_id": 6633627,
    "satd_repo": 70746484,
    "satd_sha": "c7ff88516f99ea9ee275e9975cbd30e8979054e9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/micro/qemu/test_zephyr.py",
    "lines": [
      82,
      83,
      84,
      85
    ],
    "matched_text": "            # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6633627,
    "satd_repo": 70746484,
    "satd_sha": "c7ff88516f99ea9ee275e9975cbd30e8979054e9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_crt.py",
    "lines": [
      54,
      55,
      56,
      57
    ],
    "matched_text": "        # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6633660,
    "satd_repo": 70746484,
    "satd_sha": "c7ff88516f99ea9ee275e9975cbd30e8979054e9",
    "satd_text": " TODO: tests for dir symlinks, symlinks out of bounds, loading malformed artifact tars.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_micro_artifact.py",
    "lines": [
      137
    ],
    "matched_text": "    # TODO: tests for dir symlinks, symlinks out of bounds, loading malformed artifact tars."
  },
  {
    "satd_id": 6633666,
    "satd_repo": 70746484,
    "satd_sha": "c7ff88516f99ea9ee275e9975cbd30e8979054e9",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_microtvm.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6633761,
    "satd_repo": 70746484,
    "satd_sha": "60ed9261058c0f1faa2632cb97319f29b26b9573",
    "satd_text": " duplication",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_iter_affine_map.py",
    "lines": [
      95
    ],
    "matched_text": "    # duplication"
  },
  {
    "satd_id": 6633761,
    "satd_repo": 70746484,
    "satd_sha": "60ed9261058c0f1faa2632cb97319f29b26b9573",
    "satd_text": " duplication",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_iter_affine_map.py",
    "lines": [
      99
    ],
    "matched_text": "    # duplication 2"
  },
  {
    "satd_id": 6633762,
    "satd_repo": 70746484,
    "satd_sha": "60ed9261058c0f1faa2632cb97319f29b26b9573",
    "satd_text": " simple symbolic bound\n TODO(tvm-team) improve symbolic divisible check to enable\n more complicated symbolic bound",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_iter_affine_map.py",
    "lines": [
      131,
      132,
      133
    ],
    "matched_text": "    # simple symbolic bound"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      182
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      224
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      243
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      247
    ],
    "matched_text": "    def concatenate(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      334
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      338
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      362
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      366
    ],
    "matched_text": "    def tanh(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      370
    ],
    "matched_text": "    def sigmoid(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      374
    ],
    "matched_text": "    def erf(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      433
    ],
    "matched_text": "    def less(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      437
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633774,
    "satd_repo": 70746484,
    "satd_sha": "d5728bdeb8e4eb3e633c608366a0c5795a236d93",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      441
    ],
    "matched_text": "    def zeros_like(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6633811,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " XXX: this will fail if we don't include the data_t Tensor in the schedule\n ops. Maybe create_schedule should do some analysis so this isn't\n necessary",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      318,
      319,
      320
    ],
    "matched_text": "    # XXX: this will fail if we don't include the data_t Tensor in the schedule"
  },
  {
    "satd_id": 6633812,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " cache dense matrix\n each thread has a row\n TODO: ideally we could vectorize this",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      229,
      230,
      231
    ],
    "matched_text": "            # cache dense matrix"
  },
  {
    "satd_id": 6633813,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " TODO(tkonolige): how do I compute the number of warps per block?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      186
    ],
    "matched_text": "        ni = 1  # TODO(tkonolige): how do I compute the number of warps per block?"
  },
  {
    "satd_id": 6633815,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " Use 4 warps per block. Slightly faster than 1 warp per block",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      125
    ],
    "matched_text": "        # Use 4 warps per block. Slightly faster than 1 warp per block"
  },
  {
    "satd_id": 6633819,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " This memory acces should be out of bounds when\n m_index >= mb (which occurs when the dense matrix\n rows % 32 != 0), but it seems to work just fine...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      235,
      236,
      237
    ],
    "matched_text": "                        # This memory acces should be out of bounds when"
  },
  {
    "satd_id": 6633821,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " This is a hack to make the scheduling language realize that this axis\n can be scheduled.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      121,
      122
    ],
    "matched_text": "        # This is a hack to make the scheduling language realize that this axis"
  },
  {
    "satd_id": 6633823,
    "satd_repo": 70746484,
    "satd_sha": "6d0351a7f0e23eb5428c59a976edd2bfb8207c0d",
    "satd_text": " pylint: disable=invalid-name\n TODO(tkonolige): use tensorcores for block multiply\n TODO(tkonolige): use vectorize on loads\n TODO(tkonolige): seperate implementation if M is small\n TODO(tkonolige): seperate implementation for large block sizes",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/cuda/sparse.py",
    "lines": [
      159,
      160,
      161,
      162,
      163
    ],
    "matched_text": "        # pylint: disable=invalid-name"
  },
  {
    "satd_id": 6633835,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": "! \\brief Display diagnostics in a given display format.\n *\n * A diagnostic renderer is responsible for converting the\n * raw diagnostics into consumable output.\n *\n * For example the terminal renderer will render a sequence\n * of compiler diagnostics to std::out and std::err in\n * a human readable form.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir/diagnostic.h",
    "lines": [
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177
    ],
    "matched_text": "/*! \\brief Display diagnostics in a given display format."
  },
  {
    "satd_id": 6633863,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): eventually modularize the rendering interface to provide control of how to\n format errors.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/diagnostic.cc",
    "lines": [
      281,
      282
    ],
    "matched_text": "// TODO(@jroesch): eventually modularize the rendering interface to provide control of how to"
  },
  {
    "satd_id": 6633868,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch, @junru): we need to deal with unique spans for global/var.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/span_check.cc",
    "lines": [
      42
    ],
    "matched_text": "// TODO(@jroesch, @junru): we need to deal with unique spans for global/var."
  },
  {
    "satd_id": 6633875,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO extract test case from inference failures\n setting this wrong causes crashes",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_tensor_array.py",
    "lines": [
      156,
      157
    ],
    "matched_text": "        # TODO extract test case from inference failures"
  },
  {
    "satd_id": 6633893,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): we have temporarily removed kind checking here, and will consolidate\n to the type checker in follow up PR.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/module.cc",
    "lines": [
      227,
      228
    ],
    "matched_text": "  // TODO(@jroesch): we have temporarily removed kind checking here, and will consolidate"
  },
  {
    "satd_id": 6633894,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): refactor to use diagnostic context",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/module.cc",
    "lines": [
      185
    ],
    "matched_text": "  // TODO(@jroesch): refactor to use diagnostic context"
  },
  {
    "satd_id": 6633895,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): rename into IRModule.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/module.cc",
    "lines": [
      344
    ],
    "matched_text": "      // TODO(@jroesch): rename into IRModule."
  },
  {
    "satd_id": 6633903,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): split into error and help\n deal with multiple rendering",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1193,
      1194
    ],
    "matched_text": "              // TODO(@jroesch): split into error and help"
  },
  {
    "satd_id": 6633904,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): in a secondary pass adjust spans.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1408
    ],
    "matched_text": "      // TODO(@jroesch): in a secondary pass adjust spans."
  },
  {
    "satd_id": 6633906,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): expose substring on tvm::String.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/parser/source_map.cc",
    "lines": [
      74
    ],
    "matched_text": "  // TODO(@jroesch): expose substring on tvm::String."
  },
  {
    "satd_id": 6633907,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): fix this",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/source_map.cc",
    "lines": [
      94
    ],
    "matched_text": "// TODO(@jroesch): fix this"
  },
  {
    "satd_id": 6633909,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): This is unsound right now, and we need to revist it.\n if (clause->rhs.as<LetNode>()) {\n only add braces if there are multiple lines on the rhs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/relay_text_printer.cc",
    "lines": [
      525,
      526,
      527
    ],
    "matched_text": "    // TODO(@jroesch): This is unsound right now, and we need to revist it."
  },
  {
    "satd_id": 6633911,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): can probably relax to just emit",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/analysis/kind_check.cc",
    "lines": [
      143
    ],
    "matched_text": "      // TODO(@jroesch): can probably relax to just emit"
  },
  {
    "satd_id": 6633917,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): move away from eager type checking for performance reasons\n make issue.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/transform.cc",
    "lines": [
      164,
      165
    ],
    "matched_text": "  // TODO(@jroesch): move away from eager type checking for performance reasons"
  },
  {
    "satd_id": 6633923,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): we should be able to move the type inferencer outside\n of this function but it seems to be more stateful then I expect.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/type_infer.cc",
    "lines": [
      775,
      776
    ],
    "matched_text": "            // TODO(@jroesch): we should be able to move the type inferencer outside"
  },
  {
    "satd_id": 6633930,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): Can we optimize this?",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/transforms/type_infer.cc",
    "lines": [
      723
    ],
    "matched_text": "// TODO(@jroesch): Can we optimize this?"
  },
  {
    "satd_id": 6633931,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " NB: it is illegal to reuse variables inside and outside a scope in Relay\n if you want to duplicate types and names you must re-allocate them.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/contrib/test_ethosn/infrastructure.py",
    "lines": [
      96,
      97
    ],
    "matched_text": "    # NB: it is illegal to reuse variables inside and outside a scope in Relay"
  },
  {
    "satd_id": 6633932,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): when we remove new fn pass behavior we need to remove\n change this back to 3",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_manager.py",
    "lines": [
      568,
      569
    ],
    "matched_text": "    # TODO(@jroesch): when we remove new fn pass behavior we need to remove"
  },
  {
    "satd_id": 6633933,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): look into optimizing away the need to do this",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_vm_serialization.py",
    "lines": [
      81
    ],
    "matched_text": "    # TODO(@jroesch): look into optimizing away the need to do this"
  },
  {
    "satd_id": 6633933,
    "satd_repo": 70746484,
    "satd_sha": "98c2096f4944bdbdbbb2b7b20ccd35c6c11dfbf6",
    "satd_text": " TODO(@jroesch): look into optimizing away the need to do this",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_vm_serialization.py",
    "lines": [
      90
    ],
    "matched_text": "    # TODO(@jroesch): look into optimizing away the need to do this"
  },
  {
    "satd_id": 6633946,
    "satd_repo": 70746484,
    "satd_sha": "277bfc86aac94442625e8307aa55a9215e2fddd6",
    "satd_text": " TODO(@jroesch): rename to field_pats ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/adt.h",
    "lines": [
      193
    ],
    "matched_text": "  /* TODO(@jroesch): rename to field_pats */"
  },
  {
    "satd_id": 6633952,
    "satd_repo": 70746484,
    "satd_sha": "277bfc86aac94442625e8307aa55a9215e2fddd6",
    "satd_text": " See above TODO\n mv rust/target/doc _docs/api/rust",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tests/scripts/task_python_docs.sh",
    "lines": [
      85,
      86
    ],
    "matched_text": "# See above TODO"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      697,
      698
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      900,
      901
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1289,
      1290
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1582,
      1583
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1675,
      1676
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      2221,
      2222
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      2395,
      2396
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      3429,
      3430
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633962,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_op_level10.py",
    "lines": [
      383,
      384
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633963,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " Convolution with dilation\n TODO(mbrookhart): Relay doesn't currently support convtranspose with dilation\n verify_convtranspose_with_padding(\n     (1, 1) + repeat(5, D),\n     (1, 1) + repeat(3, D),\n     (1, 1) + repeat(5, D),\n     2 * repeat(2, D),\n     repeat(3, D),\n     repeat(1, D),\n     repeat(2, D),\n )",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      2739,
      2740,
      2741,
      2742,
      2743,
      2744,
      2745,
      2746,
      2747,
      2748,
      2749
    ],
    "matched_text": "        # Convolution with dilation"
  },
  {
    "satd_id": 6633965,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6633968,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable cuda once VM supports heterogenous execution",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      982
    ],
    "matched_text": "# TODO(mbrookhart): enable cuda once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633968,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable cuda once VM supports heterogenous execution",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1033
    ],
    "matched_text": "# TODO(mbrookhart): enable cuda once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633973,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): Enable when the VM supports heterogenus execution",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      30
    ],
    "matched_text": "# TODO(mbrookhart): Enable when the VM supports heterogenus execution"
  },
  {
    "satd_id": 6633973,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): Enable when the VM supports heterogenus execution",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      85
    ],
    "matched_text": "# TODO(mbrookhart): Enable when the VM supports heterogenus execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      697,
      698
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      900,
      901
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1289,
      1290
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1582,
      1583
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1675,
      1676
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      2221,
      2222
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      2395,
      2396
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      3429,
      3430
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633974,
    "satd_repo": 70746484,
    "satd_sha": "2658ebe737d38b441dee6121c01ba3f9f83ce518",
    "satd_text": " TODO(mbrookhart): enable once VM supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_op_level10.py",
    "lines": [
      383,
      384
    ],
    "matched_text": "# TODO(mbrookhart): enable once VM supports heterogenous execution"
  },
  {
    "satd_id": 6633977,
    "satd_repo": 70746484,
    "satd_sha": "e892c95cd18ee66d3ec7357565ebd3bab6d883c8",
    "satd_text": "!\n * \\brief To be used as a temperory switch to ensure\n * compatibility with the previous version of the api\n * while needed e.g. by docker images. Can be removed\n * along with associated compatibility measures when no\n * longer necessary.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/ethosn/ethosn_api_version.h",
    "lines": [
      25,
      26,
      27,
      28,
      29,
      30,
      31
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6633984,
    "satd_repo": 70746484,
    "satd_sha": "9f5b9da3ba98f09fe809d08322b2db8f794ad97f",
    "satd_text": "#####################################################################\n Tuning the model\n ----------------\n\n In some cases, we might not get the expected performance when running\n inferences using our compiled module. In cases like this, we can make use\n of the auto-tuner, to find a better configuration for our model and\n get a boost in performance.\n\n Tuning in TVM refers to the process by which a model is optimized\n to run faster on a given target. This differs from training or\n fine-tuning in that it does not affect the accuracy of the model,\n but only the runtime performance.\n\n As part of the tuning process, TVM will try running many different\n operator implementation variants to see which perform best. The\n results of these runs are stored in a tuning records file, which is\n ultimately the output of the ``tune`` subcommand.\n\n In the simplest form, tuning requires you to provide three things:\n\n - the target specification of the device you intend to run this model on;\n - the path to an output file in which the tuning records will be stored, and finally,\n - a path to the model to be tuned.\n\n\n The example below demonstrates how that works in practice:\n\n .. code-block:: bash\n\n   tvmc tune \\\n     --target \"llvm\" \\\n     --output autotuner_records.json \\\n     resnet50-v2-7.onnx\n\n\n Tuning sessions can take a long time, so ``tvmc tune`` offers many options to\n customize your tuning process, in terms of number of repetitions (``--repeat`` and\n ``--number``, for example), the tuning algorithm to be use, and so on.\n Check ``tvmc tune --help`` for more information.\n\n As an output of the tuning process above, we obtained the tuning records stored\n in ``autotuner_records.json``. This file can be used in two ways:\n\n - as an input to further tuning (via ``tvmc tune --tuning-records``), or\n - as an input to the compiler\n\n The compiler will use the results to generate high performance code for the model\n on your specified target. To do that we can use ``tvmc compile --tuning-records``.\n Check ``tvmc compile --help`` for more information.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/get_started/tvmc_command_line_driver.py",
    "lines": [
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6633985,
    "satd_repo": 70746484,
    "satd_sha": "9f5b9da3ba98f09fe809d08322b2db8f794ad97f",
    "satd_text": "#####################################################################\n Output post-processing\n ----------------------\n\n As previously mentioned, each model will have its own particular way\n of providing output tensors.\n\n In our case, we need to run some post-processing to render the\n outputs from ResNet 50 V2 into a more human-readable form.\n\n The script below shows an example of the post-processing to extract\n labels from the output of our compiled module.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/get_started/tvmc_command_line_driver.py",
    "lines": [
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634004,
    "satd_repo": 70746484,
    "satd_sha": "5db80f023cc0908943ad47a2a2e49c8f7e157989",
    "satd_text": " TODO --device needs to be extended and tested to support other targets,\n      like 'cl', 'webgpu', etc (@leandron)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/driver/tvmc/runner.py",
    "lines": [
      49,
      50
    ],
    "matched_text": "    # TODO --device needs to be extended and tested to support other targets,"
  },
  {
    "satd_id": 6634011,
    "satd_repo": 70746484,
    "satd_sha": "5db80f023cc0908943ad47a2a2e49c8f7e157989",
    "satd_text": " TODO expand to other supported devices, as listed in tvm.rpc.client (@leandron)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/driver/tvmc/runner.py",
    "lines": [
      364
    ],
    "matched_text": "        # TODO expand to other supported devices, as listed in tvm.rpc.client (@leandron)"
  },
  {
    "satd_id": 6634024,
    "satd_repo": 70746484,
    "satd_sha": "5db80f023cc0908943ad47a2a2e49c8f7e157989",
    "satd_text": " TODO we need to update this return to use the updated graph module APIs\n      as these getter functions will be deprecated in the next release (@leandron)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/compiler.py",
    "lines": [
      213,
      214
    ],
    "matched_text": "    # TODO we need to update this return to use the updated graph module APIs"
  },
  {
    "satd_id": 6634042,
    "satd_repo": 70746484,
    "satd_sha": "c0a6bc32d3b6e4ac07ab4d0a678d5189fee5241b",
    "satd_text": " TODO (@leandron) This is a path to a physical file, but\n     can be improved in future to add integration with a modelzoo\n     or URL, for example.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/autotuner.py",
    "lines": [
      138,
      139,
      140
    ],
    "matched_text": "    # TODO (@leandron) This is a path to a physical file, but"
  },
  {
    "satd_id": 6634045,
    "satd_repo": 70746484,
    "satd_sha": "c0a6bc32d3b6e4ac07ab4d0a678d5189fee5241b",
    "satd_text": " extra arguments validation before importing the model, so that obvious errors\n are pointed in advance.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/autotuner.py",
    "lines": [
      153,
      154
    ],
    "matched_text": "    # extra arguments validation before importing the model, so that obvious errors"
  },
  {
    "satd_id": 6634049,
    "satd_repo": 70746484,
    "satd_sha": "c0a6bc32d3b6e4ac07ab4d0a678d5189fee5241b",
    "satd_text": " TODO(@leandron) We don't have an API to collect a list of supported\n       targets yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/driver/tvmc/common.py",
    "lines": [
      100,
      101
    ],
    "matched_text": "    # TODO(@leandron) We don't have an API to collect a list of supported"
  },
  {
    "satd_id": 6634050,
    "satd_repo": 70746484,
    "satd_sha": "c0a6bc32d3b6e4ac07ab4d0a678d5189fee5241b",
    "satd_text": " TODO In a separate PR, eliminate the duplicated code here and in compiler.py (@leandron)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/common.py",
    "lines": [
      77
    ],
    "matched_text": "# TODO In a separate PR, eliminate the duplicated code here and in compiler.py (@leandron)"
  },
  {
    "satd_id": 6634057,
    "satd_repo": 70746484,
    "satd_sha": "4cad71d19fda6d8f7b750c791284c6dfdddf1f07",
    "satd_text": " For these steps, we have to update stage_id because these steps will make stage_id\n out-dated. But here we just simply give up this mutation for simplicity.\n This is not an issue because this will never happend in normal cases where all these steps\n are before parallel steps.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      1157,
      1158,
      1159,
      1160
    ],
    "matched_text": "      // For these steps, we have to update stage_id because these steps will make stage_id"
  },
  {
    "satd_id": 6634077,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " our custom datatype is float, so the following redundant cast to float\n is to remind users to cast their own custom datatype to float",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/datatype/myfloat/myfloat.cc",
    "lines": [
      69,
      70
    ],
    "matched_text": "  // our custom datatype is float, so the following redundant cast to float"
  },
  {
    "satd_id": 6634079,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " This is a helper function to wrap your custom datatype in a uint.\n the following line should be replaced with the appropriate function\n that converts your custom datatype into a uint",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/datatype/myfloat/myfloat.cc",
    "lines": [
      52,
      53,
      54
    ],
    "matched_text": "  // This is a helper function to wrap your custom datatype in a uint."
  },
  {
    "satd_id": 6634082,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": "!\n * \\file 3rdparty/byodt/my-custom-datatype.cc\n * \\brief Example Custom Datatype with the Bring Your Own Datatypes (BYODT) framework.\n * This is a toy example that under the hood simulates floats.\n *\n * Users interested in using the BYODT framework can use this file as a template.\n *\n * TODO(@gussmith23 @hypercubestart) Link to BYODT docs when they exist?\n ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/target/datatype/myfloat/myfloat.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6634083,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " This is a helper function to interpret the uint as your custom dataype.\n The following line should be replaced with the appropriate function\n that interprets the bits in `in` and returns your custom datatype",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/datatype/myfloat/myfloat.cc",
    "lines": [
      43,
      44,
      45
    ],
    "matched_text": "  // This is a helper function to interpret the uint as your custom dataype."
  },
  {
    "satd_id": 6634099,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " Vectorization is not implemented with custom datatypes",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/unittest/test_custom_datatypes.py",
    "lines": [
      100
    ],
    "matched_text": "    # Vectorization is not implemented with custom datatypes"
  },
  {
    "satd_id": 6634099,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " Vectorization is not implemented with custom datatypes",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/dev/bring_your_own_datatypes.py",
    "lines": [
      309
    ],
    "matched_text": "    # Vectorization is not implemented with custom datatypes."
  },
  {
    "satd_id": 6634099,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " Vectorization is not implemented with custom datatypes",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/dev/bring_your_own_datatypes.py",
    "lines": [
      399
    ],
    "matched_text": "# Vectorization is not implemented with custom datatypes."
  },
  {
    "satd_id": 6634109,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " we use a random seed to generate input_data\n to guarantee stable tests",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_custom_datatypes.py",
    "lines": [
      67,
      68
    ],
    "matched_text": "# we use a random seed to generate input_data"
  },
  {
    "satd_id": 6634128,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " Vectorization is not implemented with custom datatypes.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/dev/bring_your_own_datatypes.py",
    "lines": [
      309
    ],
    "matched_text": "    # Vectorization is not implemented with custom datatypes."
  },
  {
    "satd_id": 6634128,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " Vectorization is not implemented with custom datatypes.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/dev/bring_your_own_datatypes.py",
    "lines": [
      399
    ],
    "matched_text": "# Vectorization is not implemented with custom datatypes."
  },
  {
    "satd_id": 6634135,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": "#####################################################################\n When we attempt to run the model, we get a familiar error telling us that more funcions need to be registerd for myfloat.\n\n Because this is a neural network, many more operations are required.\n Here, we register all the needed functions:",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/dev/bring_your_own_datatypes.py",
    "lines": [
      315,
      316,
      317,
      318,
      319
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634154,
    "satd_repo": 70746484,
    "satd_sha": "5aafff913b963879f6ea6f24e01533793ea1a68a",
    "satd_text": " TODO(@hypercubestart) Document this change (and others associated with the overflowing\n floatimm min bug)",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/tir/op/op.cc",
    "lines": [
      185,
      186
    ],
    "matched_text": "    // TODO(@hypercubestart) Document this change (and others associated with the overflowing"
  },
  {
    "satd_id": 6634167,
    "satd_repo": 70746484,
    "satd_sha": "56b18ecf2d1fbf4033e3b7374e23c83d30b259c1",
    "satd_text": " Random choose a starting sketch\n TODO(jcf94, merrymercy): Maybe choose sketches in different\n possibility for they may have different potential on generating state\n with better performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      350,
      351,
      352,
      353
    ],
    "matched_text": "                            // Random choose a starting sketch"
  },
  {
    "satd_id": 6634189,
    "satd_repo": 70746484,
    "satd_sha": "74a2293c35a57ad04ef149b62faa9f08a033148c",
    "satd_text": " TODO(jroesch): eventually modularize the rendering interface to provide control of how to",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/diagnostic.h",
    "lines": [
      163
    ],
    "matched_text": "  // TODO(jroesch): eventually modularize the rendering interface to provide control of how to"
  },
  {
    "satd_id": 6634210,
    "satd_repo": 70746484,
    "satd_sha": "eee04c089caf2b31e44709b6ca50dfa6e3c391a4",
    "satd_text": "#####################################################################\n A more complicated example is to resume the search.\n In this case, we need to create the search policy and cost model by ourselves\n and resume the status of search policy and cost model with the log file.\n In the example below we resume the status and do more 5 trials.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_conv2d_layer_cuda.py",
    "lines": [
      170,
      171,
      172,
      173,
      174
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634210,
    "satd_repo": 70746484,
    "satd_sha": "eee04c089caf2b31e44709b6ca50dfa6e3c391a4",
    "satd_text": "#####################################################################\n A more complicated example is to resume the search.\n In this case, we need to create the search policy and cost model by ourselves\n and resume the status of search policy and cost model with the log file.\n In the example below we resume the status and do more 5 trials.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_matmul_x86.py",
    "lines": [
      156,
      157,
      158,
      159,
      160
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634242,
    "satd_repo": 70746484,
    "satd_sha": "eee04c089caf2b31e44709b6ca50dfa6e3c391a4",
    "satd_text": " Enumerate compute_at location at target_stage\n TODO(merrymercy): More analysis here to make smarter choices",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/utils.cc",
    "lines": [
      83,
      84
    ],
    "matched_text": "  // Enumerate compute_at location at target_stage"
  },
  {
    "satd_id": 6634251,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " TODO (@leandron) This is a path to a physical file, but\n     can be improved in future to add integration with a modelzoo\n     or URL, for example.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/compiler.py",
    "lines": [
      82,
      83,
      84
    ],
    "matched_text": "    # TODO (@leandron) This is a path to a physical file, but"
  },
  {
    "satd_id": 6634253,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " TODO lib.get_source call have inconsistent behavior for unsupported\n      formats (@leandron).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/compiler.py",
    "lines": [
      206,
      207
    ],
    "matched_text": "        # TODO lib.get_source call have inconsistent behavior for unsupported"
  },
  {
    "satd_id": 6634254,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " TODO(@leandron) We don't have an API to collect a list of supported\n       targets yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/driver/tvmc/compiler.py",
    "lines": [
      182,
      183
    ],
    "matched_text": "    # TODO(@leandron) We don't have an API to collect a list of supported"
  },
  {
    "satd_id": 6634257,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " TODO (@leandron) a new PR will introduce the 'tune' subcommand\n      the is used to generate the tuning records file",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/tvmc/compiler.py",
    "lines": [
      189,
      190
    ],
    "matched_text": "        # TODO (@leandron) a new PR will introduce the 'tune' subcommand"
  },
  {
    "satd_id": 6634279,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " This test will be skipped if the AArch64 cross-compilation toolchain is not installed.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/driver/tvmc/test_compiler.py",
    "lines": [
      59
    ],
    "matched_text": "# This test will be skipped if the AArch64 cross-compilation toolchain is not installed."
  },
  {
    "satd_id": 6634279,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " This test will be skipped if the AArch64 cross-compilation toolchain is not installed.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/driver/tvmc/test_compiler.py",
    "lines": [
      95
    ],
    "matched_text": "# This test will be skipped if the AArch64 cross-compilation toolchain is not installed."
  },
  {
    "satd_id": 6634279,
    "satd_repo": 70746484,
    "satd_sha": "292b640f1338317af6d90cc3f4e96f0bacde4ca4",
    "satd_text": " This test will be skipped if the AArch64 cross-compilation toolchain is not installed.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/driver/tvmc/test_compiler.py",
    "lines": [
      133
    ],
    "matched_text": "# This test will be skipped if the AArch64 cross-compilation toolchain is not installed."
  },
  {
    "satd_id": 6634297,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d.py",
    "lines": [
      161
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634297,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_spatial_pack.py",
    "lines": [
      61
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634297,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_transpose.py",
    "lines": [
      92
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634298,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d.py",
    "lines": [
      161
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634298,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_spatial_pack.py",
    "lines": [
      61
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634298,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_transpose.py",
    "lines": [
      92
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634299,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d.py",
    "lines": [
      161
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634299,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_spatial_pack.py",
    "lines": [
      61
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634299,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support tuning/optimization for dynamic shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/topi/arm_cpu/conv2d_transpose.py",
    "lines": [
      92
    ],
    "matched_text": "    # TODO(@kevinthesun): Support tuning/optimization for dynamic shape."
  },
  {
    "satd_id": 6634301,
    "satd_repo": 70746484,
    "satd_sha": "1d6ee60e69ec3bca31adcaedc30aff1eb80170d2",
    "satd_text": " TODO(@kevinthesun): Support gpu to enable gpu tests.\n TODO(@kevinthesun): Support gpu to enable gpu tests.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634331,
    "satd_repo": 70746484,
    "satd_sha": "8f524f83066f1b221652cdfed834220157bfaf44",
    "satd_text": "#####################################################################\n Download a test image and pre-process\n -------------------------------------",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tutorials/frontend/deploy_object_detection_pytorch.py",
    "lines": [
      96,
      97,
      98
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634339,
    "satd_repo": 70746484,
    "satd_sha": "8b4ca61c801db2c16096b7ce9e186a825e836084",
    "satd_text": " TODO: add scatter gpu schedule to enable gpu test.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3098
    ],
    "matched_text": "    # TODO: add scatter gpu schedule to enable gpu test."
  },
  {
    "satd_id": 6634339,
    "satd_repo": 70746484,
    "satd_sha": "8b4ca61c801db2c16096b7ce9e186a825e836084",
    "satd_text": " TODO: add scatter gpu schedule to enable gpu test.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      3105
    ],
    "matched_text": "    # TODO: add scatter gpu schedule to enable gpu test."
  },
  {
    "satd_id": 6634348,
    "satd_repo": 70746484,
    "satd_sha": "8843e7625a238566d33ee8561a7df62ce6e45384",
    "satd_text": "#####################################################################\n .. note::\n   We cannot run the line above because of the conflict between\n   python's multiprocessing and tvm's thread pool.\n   After running a tvm generated binary (L112), the python's multiprocessing\n   library will hang forever.\n   You have to make sure that you don't run any tvm generated binaries before\n   calling ansor's search. To run the L156 above, you should comment out L112-114.\n\n   You should be careful about this problem in your applications.\n   There are other workarounds for this problem.\n   For example, you can start a new thread/process (with the builtin python library\n   threading or multiprocessing) and run the tvm binaries in the new thread/process.\n   This provides an isolation and avoids the conflict in the main thread/process.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_matmul_x86.py",
    "lines": [
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634351,
    "satd_repo": 70746484,
    "satd_sha": "8843e7625a238566d33ee8561a7df62ce6e45384",
    "satd_text": "#####################################################################\n A more complicated example is to resume the search.\n In this case, we need to create the search policy and cost model by ourselves\n and resume the status of search policy and cost model with the log file.\n In the example below we resume the status and do more 5 trials.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/auto_scheduler/tune_matmul_x86.py",
    "lines": [
      139,
      140,
      141,
      142,
      143
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6634366,
    "satd_repo": 70746484,
    "satd_sha": "d4919df1179b15333c7e627590130a2ccfb68e2b",
    "satd_text": " Use a two-dimensional array to store multiple multi-dimensional accesses.\n The innermost vector stores the multi-dimensional indices of one access.\n The type of vectorization position\n The product of lengths of loops outside the scope of the allocation\n The product of lengths of loops inside the score of the allocation\n The product of lengths of outer loops\n then this stage must compute_at somewhere under this axis and this axis is simplified out\n The normalized throughputs for n records",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634431,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " \\brief Finish writing one packet by sending the CRC.\n   *\n   * When transmitting paylaods that are too large to be buffered, call this function after sending\n   * the entire payload using WritePayloadChunk.\n   *\n   * \\return\n   *     - kTvmErrorNoError when no error occurs\n   *     - kTvmErrorFramingInvalidState when StartPacket() has not been called.\n   *     - kTvmErrorFramingPayloadIncomplete when less bytes were written using WritePayloadChunk()\n   *       than were declared in the payload_size_bytes parameter given to StartPacket().\n   *     - kTvmErrorWriteStreamShortWrite if the WriteStream passed to constructor's Write()\n   *       function returns 0.\n   *     - kTvmErrorWriteStreamShortWrite if the WriteStream passed to constructor's Write()\n   *       function returns an invalid positive number.\n   *     - Any negative value (i.e. with bits in kTvmErrorSystemErrorMask set) returned by the\n   *       WriteStream's Write() function.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/rpc_common/framing.h",
    "lines": [
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219
    ],
    "matched_text": "  /* \\brief Finish writing one packet by sending the CRC."
  },
  {
    "satd_id": 6634446,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": "! \\brief Unescape and consume input bytes, storing into buffer.\n   *\n   * \\param buffer A buffer to fill with consumed, unescaped bytes.\n   * \\param buffer_size_bytes Size of buffer, in bytes.\n   * \\param bytes_filled A pointer to an accumulator to which is added the number of bytes written\n   *      to `buffer`.\n   * \\param update_crc true when the CRC should be updated with the escaped bytes.\n   * \\return\n   *     - kTvmErrorNoError if successful\n   *     - kTvmErrorFramingShortPacket if a start-of-packet escape code was encountered. If so,\n   *       *bytes_filled indicates the number of bytes before the Escape::kEscapeStart byte.\n   *     - kTvmErrorFramingInvalidEscape if an invalid escape sequence was seen.\n   *     - kTvmErrorWriteStreamShortWrite if the WriteStream passed to constructor's Write()\n   *       function returns 0.\n   *     - kTvmErrorWriteStreamShortWrite if the WriteStream passed to constructor's Write()\n   *       function returns an invalid positive number.\n   *     - Any negative value (i.e. with bits in kTvmErrorSystemErrorMask set) returned by the\n   *       WriteStream's Write() function.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/rpc_common/framing.h",
    "lines": [
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111
    ],
    "matched_text": "  /*! \\brief Unescape and consume input bytes, storing into buffer."
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/rpc_common/session.h",
    "lines": [
      192
    ],
    "matched_text": "    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)"
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/utvm_rpc_server/rpc_server.cc",
    "lines": [
      107
    ],
    "matched_text": "  void operator delete(void*) noexcept {}  // NOLINT(readability/casting)"
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      54
    ],
    "matched_text": "  char* p = (char*)s;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      56
    ],
    "matched_text": "    *p = (char)c;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      71
    ],
    "matched_text": "  const char* from_pp = (char*)from;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634461,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      75
    ],
    "matched_text": "  char* to_pp = (char*)to;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634526,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " TODO(areusch): Handle endianness.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/crt/utvm_rpc_common/framing.cc",
    "lines": [
      266
    ],
    "matched_text": "  // TODO(areusch): Handle endianness."
  },
  {
    "satd_id": 6634539,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOTE(areusch): In the future, this function is intended to work from an IRQ context. That's not\n needed at present.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/crt/utvm_rpc_server/rpc_server.cc",
    "lines": [
      247,
      248
    ],
    "matched_text": "  // NOTE(areusch): In the future, this function is intended to work from an IRQ context. That's not"
  },
  {
    "satd_id": 6634540,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " Most header-based logging frameworks tend to insert '\\n' at the end of the log message.\n Remove that for remote logging, since the remote logger will do the same.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/utvm_rpc_server/rpc_server.cc",
    "lines": [
      223,
      224
    ],
    "matched_text": "  // Most header-based logging frameworks tend to insert '\\n' at the end of the log message."
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/rpc_common/session.h",
    "lines": [
      192
    ],
    "matched_text": "    void operator delete(void*) noexcept {}  // NOLINT(readability/casting)"
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/utvm_rpc_server/rpc_server.cc",
    "lines": [
      107
    ],
    "matched_text": "  void operator delete(void*) noexcept {}  // NOLINT(readability/casting)"
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      54
    ],
    "matched_text": "  char* p = (char*)s;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      56
    ],
    "matched_text": "    *p = (char)c;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      71
    ],
    "matched_text": "  const char* from_pp = (char*)from;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634541,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " NOLINT(readability/casting)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      75
    ],
    "matched_text": "  char* to_pp = (char*)to;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6634574,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_crt.py",
    "lines": [
      54,
      55,
      56,
      57
    ],
    "matched_text": "    # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6634574,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/micro/micro_tflite.py",
    "lines": [
      176,
      177,
      178,
      179
    ],
    "matched_text": "  # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6634600,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": "!\n * Initialize the global memory manager.\n *\n * Call this function once before invoking any other CRT functions beginning with `TVM`.\n * Repeated calls will cause TVMPlatformAbort to be invoked.\n * \\param memory_pool Pointer to the global memory pool used by the CRT.\n * \\param memory_pool_size_bytes Size of `memory_pool`, in bytes.\n * \\param page_size_bytes_log2 log2 of the page size, in bytes.\n * \\return An error code indicating the status of the operation.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/include/tvm/runtime/crt/internal/common/memory.h",
    "lines": [
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6634606,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " Unused here, implemented for uTVM framing layer.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_endpoint.cc",
    "lines": [
      208
    ],
    "matched_text": "    // Unused here, implemented for uTVM framing layer."
  },
  {
    "satd_id": 6634606,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " Unused here, implemented for uTVM framing layer.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_endpoint.cc",
    "lines": [
      223
    ],
    "matched_text": "    // Unused here, implemented for uTVM framing layer."
  },
  {
    "satd_id": 6634612,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_crt.py",
    "lines": [
      54,
      55,
      56,
      57
    ],
    "matched_text": "    # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6634612,
    "satd_repo": 70746484,
    "satd_sha": "745e542e4deaf44f3d6e5665299aa85ef8f4a6b9",
    "satd_text": " the x86 compiler *expects* you to give the exact same dictionary for both\n lib_opts and bin_opts. so the library compiler is mutating lib_opts and\n the binary compiler is expecting those mutations to be in bin_opts.\n TODO(weberlo) fix this very bizarre behavior",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/micro/micro_tflite.py",
    "lines": [
      176,
      177,
      178,
      179
    ],
    "matched_text": "  # the x86 compiler *expects* you to give the exact same dictionary for both"
  },
  {
    "satd_id": 6634622,
    "satd_repo": 70746484,
    "satd_sha": "cdd3206f8d20a2cc59138e257786f2179d1dc8cd",
    "satd_text": " TODO(@jroesch): enable black check\n echo \"black check...\"\n tests/lint/python_format.sh",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_lint.sh",
    "lines": [
      42,
      43,
      44
    ],
    "matched_text": "# TODO(@jroesch): enable black check"
  },
  {
    "satd_id": 6634642,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/topi_recipe/conv/test_conv_int8_arm.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return"
  },
  {
    "satd_id": 6634642,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/topi_recipe/conv/test_conv_int8_intel.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/__init__.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/bsr_dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/simplify_fc_transpose.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/utils.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition_conversions.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634644,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/__init__.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/bsr_dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/simplify_fc_transpose.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/utils.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition_conversions.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634645,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/__init__.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/bsr_dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/simplify_fc_transpose.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/data_dep_optimization/utils.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition_conversions.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634646,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6634651,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument, len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634651,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument, len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/target/coreml.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, import-outside-toplevel"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite_flexbuffer.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/arm_compute_lib.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/coreml.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/dnnl.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/ethosn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/image/_image.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/image/_image.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_yolo.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/qnn/op/layout_conversions.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634652,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/qnn/op/legalizations.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/target/coreml.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, import-outside-toplevel"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite_flexbuffer.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/arm_compute_lib.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/coreml.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/dnnl.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/ethosn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/image/_image.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/image/_image.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_yolo.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/qnn/op/layout_conversions.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634653,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/qnn/op/legalizations.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6634670,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " TODO(for user): replace the line with the path to imagenet validation dataset",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634673,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " TODO(mbrookhart): fix static strided_slice with dynamic input and negative begin\n verify((3, 4, 3), [1, -1, 0], [4, -5, 3], [2, -1, 1], (1, 4, 3))\n verify((3, 4, 3), [1, -1, 0], [2, -3, 3], [1, -1, 1], (1, 2, 3))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634674,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " TODO(mbrookhart): enable once vm supports heterogenous execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634681,
    "satd_repo": 70746484,
    "satd_sha": "f13fed55cfe872ba7f40970f6a35f965d186a30a",
    "satd_text": " test with warp_tile 16x16x16\n test with warp_tile 8x32x16\n test with warp_tile 32x8x16",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634789,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " TODO(@tvm-team): Deprecate the helper functions below. Encourage the usage of config dict instead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/target/target.py",
    "lines": [
      153
    ],
    "matched_text": "# TODO(@tvm-team): Deprecate the helper functions below. Encourage the usage of config dict instead."
  },
  {
    "satd_id": 6634790,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/feature.py",
    "lines": [
      65
    ],
    "matched_text": "    def raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6634790,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      38
    ],
    "matched_text": "def _raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6634790,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/peak.py",
    "lines": [
      215
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6634790,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/te/hybrid/runtime.py",
    "lines": [
      36
    ],
    "matched_text": "def allocate(shape, dtype='float32', scope='global'):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6634806,
    "satd_repo": 70746484,
    "satd_sha": "6b6661ed92ecd46dfbce5f112e4dfa95f0a1af33",
    "satd_text": " do extra pre-processing",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/target.cc",
    "lines": [
      608
    ],
    "matched_text": "  // do extra pre-processing"
  },
  {
    "satd_id": 6634833,
    "satd_repo": 70746484,
    "satd_sha": "50adbfac6a533f231a930bf80617c8eb3d7097a7",
    "satd_text": " TODO(tvm-team) Fix dense schedule\n @tvm.testing.uses_gpu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      491,
      492
    ],
    "matched_text": "# TODO(tvm-team) Fix dense schedule"
  },
  {
    "satd_id": 6634843,
    "satd_repo": 70746484,
    "satd_sha": "8499d5824b655a23496982922e4bd9e56ebbaa91",
    "satd_text": " fused iters have been replaced with iter->orig_iters.\n So there should be only one ori iter name extracted from iter->name.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/compute_dag.cc",
    "lines": [
      802,
      803
    ],
    "matched_text": "    // fused iters have been replaced with iter->orig_iters."
  },
  {
    "satd_id": 6634846,
    "satd_repo": 70746484,
    "satd_sha": "8499d5824b655a23496982922e4bd9e56ebbaa91",
    "satd_text": " Check whether this placeholder has already been handled",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/auto_scheduler/compute_dag.cc",
    "lines": [
      852
    ],
    "matched_text": "      // Check whether this placeholder has already been handled"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      56,
      57
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      69,
      70
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      136,
      137
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      38,
      39
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      64,
      65
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      82,
      83
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      100,
      101
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      117,
      118
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level4.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level5.py",
    "lines": [
      39,
      40
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634854,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level6.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634857,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634858,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu\n TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      56,
      57
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      69,
      70
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      136,
      137
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      38,
      39
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      64,
      65
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      82,
      83
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      100,
      101
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      117,
      118
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level4.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level5.py",
    "lines": [
      39,
      40
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634859,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level6.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level10.py",
    "lines": [
      56,
      57
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      30,
      31
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      69,
      70
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level2.py",
    "lines": [
      136,
      137
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      38,
      39
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      64,
      65
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      82,
      83
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      100,
      101
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level3.py",
    "lines": [
      117,
      118
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level4.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level5.py",
    "lines": [
      39,
      40
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634860,
    "satd_repo": 70746484,
    "satd_sha": "eee413f9d9f1157b777737adf39060dda1991841",
    "satd_text": " TODO(mbrookhart): Enable when VM supports heterogenus execution\n @tvm.testing.uses_gpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/dyn/test_dynamic_op_level6.py",
    "lines": [
      26,
      27
    ],
    "matched_text": "# TODO(mbrookhart): Enable when VM supports heterogenus execution"
  },
  {
    "satd_id": 6634893,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " The shape for alloc_tensor should be on CPU.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/analysis/context_analysis.cc",
    "lines": [
      495
    ],
    "matched_text": "    // The shape for alloc_tensor should be on CPU."
  },
  {
    "satd_id": 6634920,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " TODO(@zhiics) Apply the pass to all functions/entries",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/analysis/context_analysis.cc",
    "lines": [
      694
    ],
    "matched_text": "  // TODO(@zhiics) Apply the pass to all functions/entries"
  },
  {
    "satd_id": 6634933,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " The arguments of alloc storage should be on CPU.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/analysis/context_analysis.cc",
    "lines": [
      475
    ],
    "matched_text": "    // The arguments of alloc storage should be on CPU."
  },
  {
    "satd_id": 6634942,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " Step into the callee. We need to skip recursive calls, otherwise, it\n would be a infinite loop.\n\n TODO(@zhiics) This may cause problem for mutual recursive calls as well.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/analysis/context_analysis.cc",
    "lines": [
      612,
      613,
      614,
      615
    ],
    "matched_text": "    // Step into the callee. We need to skip recursive calls, otherwise, it"
  },
  {
    "satd_id": 6634959,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " alignment of alloc_storage is on cpu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_context_analysis.py",
    "lines": [
      122
    ],
    "matched_text": "    # alignment of alloc_storage is on cpu"
  },
  {
    "satd_id": 6634960,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " storage of alloc_tensor falls back to the default device gpu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_context_analysis.py",
    "lines": [
      149
    ],
    "matched_text": "    # storage of alloc_tensor falls back to the default device gpu"
  },
  {
    "satd_id": 6634966,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " shape of alloc_tensor is on cpu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_context_analysis.py",
    "lines": [
      151
    ],
    "matched_text": "    # shape of alloc_tensor is on cpu"
  },
  {
    "satd_id": 6634979,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " TODO(zhiics) There is bug if all expressions are annotated with the device\n that is different the first one in the target list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      642,
      643
    ],
    "matched_text": "                     // TODO(zhiics) There is bug if all expressions are annotated with the device"
  },
  {
    "satd_id": 6634996,
    "satd_repo": 70746484,
    "satd_sha": "1224d56ca95825b4244d337df4cd04546108c9cd",
    "satd_text": " TODO(@zhiics) argwhere gpu schedule is currently not avaiable\n check_result([data], mod, expected, flatten=True)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      202,
      203
    ],
    "matched_text": "    # TODO(@zhiics) argwhere gpu schedule is currently not avaiable"
  },
  {
    "satd_id": 6635053,
    "satd_repo": 70746484,
    "satd_sha": "1899ad82f78976f1711972e6a0cbb7009c1228d6",
    "satd_text": " Skip redundant states.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      408
    ],
    "matched_text": "      // Skip redundant states."
  },
  {
    "satd_id": 6635056,
    "satd_repo": 70746484,
    "satd_sha": "1899ad82f78976f1711972e6a0cbb7009c1228d6",
    "satd_text": " The set of explored states to avoid redundancy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      391
    ],
    "matched_text": "  // The set of explored states to avoid redundancy."
  },
  {
    "satd_id": 6635059,
    "satd_repo": 70746484,
    "satd_sha": "1899ad82f78976f1711972e6a0cbb7009c1228d6",
    "satd_text": " TODO(@comaniac): Perform cross over.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      473
    ],
    "matched_text": "    // TODO(@comaniac): Perform cross over."
  },
  {
    "satd_id": 6635138,
    "satd_repo": 70746484,
    "satd_sha": "e35b7fc4bcdcfe008c5dfea60c2297b93dbff99e",
    "satd_text": " TODO(@M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/doc.cc",
    "lines": [
      132
    ],
    "matched_text": "  // TODO(@M.K.): add escape."
  },
  {
    "satd_id": 6635139,
    "satd_repo": 70746484,
    "satd_sha": "e35b7fc4bcdcfe008c5dfea60c2297b93dbff99e",
    "satd_text": " TODO(@M.K.) refactor AD to always use mod.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/gradient.cc",
    "lines": [
      454
    ],
    "matched_text": "  // TODO(@M.K.) refactor AD to always use mod."
  },
  {
    "satd_id": 6635140,
    "satd_repo": 70746484,
    "satd_sha": "e35b7fc4bcdcfe008c5dfea60c2297b93dbff99e",
    "satd_text": " TODO(@M.K.): stricter checking",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/gradient.cc",
    "lines": [
      75
    ],
    "matched_text": "  // TODO(@M.K.): stricter checking"
  },
  {
    "satd_id": 6635141,
    "satd_repo": 70746484,
    "satd_sha": "e35b7fc4bcdcfe008c5dfea60c2297b93dbff99e",
    "satd_text": " todo: concatenating string to add attribute seems like a brittle hack.\n maybe get module indexed by a rose tree of string?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/gradient.cc",
    "lines": [
      586,
      587
    ],
    "matched_text": "    // todo: concatenating string to add attribute seems like a brittle hack."
  },
  {
    "satd_id": 6635149,
    "satd_repo": 70746484,
    "satd_sha": "44d97ad08002a6e89c6aed6cd9ae242a3e15b222",
    "satd_text": " pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel\n pylint: disable=no-else-return, no-else-continue",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6635237,
    "satd_repo": 70746484,
    "satd_sha": "1a26a2e9e073e7fb579390edba8baf826743909c",
    "satd_text": " TODO(@M.K.): why take Expr?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/gradient.cc",
    "lines": [
      399
    ],
    "matched_text": "// TODO(@M.K.): why take Expr?"
  },
  {
    "satd_id": 6635238,
    "satd_repo": 70746484,
    "satd_sha": "1a26a2e9e073e7fb579390edba8baf826743909c",
    "satd_text": " TODO(@M.K.): ToANF should be called on rev. Enhance ToANF for that.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/gradient.cc",
    "lines": [
      532
    ],
    "matched_text": "        // TODO(@M.K.): ToANF should be called on rev. Enhance ToANF for that."
  },
  {
    "satd_id": 6635265,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": " Currently it's hard to detect if all of the search space has been traversed\n Stop if no extra valid states found in several retries",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      174,
      175
    ],
    "matched_text": "      // Currently it's hard to detect if all of the search space has been traversed"
  },
  {
    "satd_id": 6635270,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": " Don't cache_read a stage if its consumer does cross-thread reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      160
    ],
    "matched_text": "  // Don't cache_read a stage if its consumer does cross-thread reduction"
  },
  {
    "satd_id": 6635282,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": " Split out an extra iterator for vectorization\n The later EvolutionarySearch will try more possiblity",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      901,
      902
    ],
    "matched_text": "      // Split out an extra iterator for vectorization"
  },
  {
    "satd_id": 6635295,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": " Check if the total space extent is too small for multi-level thread binding",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      837
    ],
    "matched_text": "      // Check if the total space extent is too small for multi-level thread binding"
  },
  {
    "satd_id": 6635304,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": "! \\brief Handle special cases in Winograd transformation for GPU. We need to change the compute\n * location of the producers of compute ops that perform \"fake reduction\" with const tensors. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.h",
    "lines": [
      118,
      119
    ],
    "matched_text": "/*! \\brief Handle special cases in Winograd transformation for GPU. We need to change the compute"
  },
  {
    "satd_id": 6635307,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": "! \\brief The rule that use cross thread reduction for GPU. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.h",
    "lines": [
      115
    ],
    "matched_text": "/*! \\brief The rule that use cross thread reduction for GPU. */"
  },
  {
    "satd_id": 6635312,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": "! \\brief Get the last reduce iterator in the outermost reduce tile. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/utils.h",
    "lines": [
      500
    ],
    "matched_text": "/*! \\brief Get the last reduce iterator in the outermost reduce tile. */"
  },
  {
    "satd_id": 6635318,
    "satd_repo": 70746484,
    "satd_sha": "b1f8f15031848f55855cc8489cba3d8faeb65b3f",
    "satd_text": "! \\brief Return whether the stage does cross thread reduction. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/utils.h",
    "lines": [
      442
    ],
    "matched_text": "/*! \\brief Return whether the stage does cross thread reduction. */"
  },
  {
    "satd_id": 6635338,
    "satd_repo": 70746484,
    "satd_sha": "061bb016677debd38477ae72a355a6ab5c05bd4a",
    "satd_text": " TODO(tvm-team): Add invariant check to make sure\n IsPointerPType(buffer_var->type_annotation, dtype)\n once we fix the allocate hybrid script printing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/ir/stmt.cc",
    "lines": [
      266,
      267,
      268
    ],
    "matched_text": "  // TODO(tvm-team): Add invariant check to make sure"
  },
  {
    "satd_id": 6635391,
    "satd_repo": 70746484,
    "satd_sha": "3cff7429e776c0879aa5a60492e3314694decb45",
    "satd_text": " The fields in a tuple should not themselves be tuples\n Nested tuples are not supported",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/ethosn/codegen.cc",
    "lines": [
      207,
      208
    ],
    "matched_text": "    // The fields in a tuple should not themselves be tuples"
  },
  {
    "satd_id": 6635507,
    "satd_repo": 70746484,
    "satd_sha": "7aa2de31157ef11b43c38ccba5bf9c9539406abf",
    "satd_text": " pylint: disable=bad-whitespace",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/hexagon.py",
    "lines": [
      102
    ],
    "matched_text": "        # pylint: disable=bad-whitespace"
  },
  {
    "satd_id": 6635507,
    "satd_repo": 70746484,
    "satd_sha": "7aa2de31157ef11b43c38ccba5bf9c9539406abf",
    "satd_text": " pylint: disable=bad-whitespace",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/hexagon.py",
    "lines": [
      114
    ],
    "matched_text": "    # pylint: disable=bad-whitespace"
  },
  {
    "satd_id": 6635507,
    "satd_repo": 70746484,
    "satd_sha": "7aa2de31157ef11b43c38ccba5bf9c9539406abf",
    "satd_text": " pylint: disable=bad-whitespace",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/hexagon.py",
    "lines": [
      203
    ],
    "matched_text": "    # pylint: disable=bad-whitespace"
  },
  {
    "satd_id": 6635510,
    "satd_repo": 70746484,
    "satd_sha": "7aa2de31157ef11b43c38ccba5bf9c9539406abf",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/hexagon.py",
    "lines": [
      121
    ],
    "matched_text": "def lower_vtcm_(get_alloc, get_free, def_align, func, mod, ctx):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6635551,
    "satd_repo": 70746484,
    "satd_sha": "7aa2de31157ef11b43c38ccba5bf9c9539406abf",
    "satd_text": " If there is an error, execution will never get here, but return\n {ec, name} anyway to allow caller to handle error conditions.\n This way the \"CHECK\" above can be removed with minimal effort.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_hexagon.cc",
    "lines": [
      772,
      773,
      774
    ],
    "matched_text": "    // If there is an error, execution will never get here, but return"
  },
  {
    "satd_id": 6635590,
    "satd_repo": 70746484,
    "satd_sha": "e5b793f39fd5b4f84b0aedf06aa376ebe45cf2bc",
    "satd_text": " todo(merrymercy): automatically decrease learning rate when the loss is too large",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_scheduler/cost_model/xgb_model.py",
    "lines": [
      100
    ],
    "matched_text": "            # todo(merrymercy): automatically decrease learning rate when the loss is too large"
  },
  {
    "satd_id": 6635624,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Here we simplify the reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1157
    ],
    "matched_text": "      // Here we simplify the reduction"
  },
  {
    "satd_id": 6635625,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " If the expression does not use vars then it is probably better to keep it inlined",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1017
    ],
    "matched_text": "  // If the expression does not use vars then it is probably better to keep it inlined"
  },
  {
    "satd_id": 6635627,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Note that RemoveRedundantInequalities can sometimes propagate equalities which\n other simplifiers cannot, like (i % 3) == 0.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1210,
      1211
    ],
    "matched_text": "  // Note that RemoveRedundantInequalities can sometimes propagate equalities which"
  },
  {
    "satd_id": 6635628,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Simplify the original expression first, mostly to simplify combiners",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1148
    ],
    "matched_text": "  // Simplify the original expression first, mostly to simplify combiners"
  },
  {
    "satd_id": 6635639,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " If it's already tensor[...] then it will probably be useless to further simplify it.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1024
    ],
    "matched_text": "  // If it's already tensor[...] then it will probably be useless to further simplify it."
  },
  {
    "satd_id": 6635642,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " For Div we simply use the condition of the numerator.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      331
    ],
    "matched_text": "    // For Div we simply use the condition of the numerator."
  },
  {
    "satd_id": 6635646,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " TODO(yzhliu): This is mostly done to simplify if_then_else\n which is not realized by the canonical simplifier",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1004,
      1005
    ],
    "matched_text": "  // TODO(yzhliu): This is mostly done to simplify if_then_else"
  },
  {
    "satd_id": 6635648,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Factor conditions out of a reduction by applying Fourier-Motzkin elimination and moving out\n (in)equalities which do not depend on the reduction variables.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      839,
      840
    ],
    "matched_text": "// Factor conditions out of a reduction by applying Fourier-Motzkin elimination and moving out"
  },
  {
    "satd_id": 6635650,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " TODO(sgrechanik-h): There are some other operations which behave like sum",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1152
    ],
    "matched_text": "    // TODO(sgrechanik-h): There are some other operations which behave like sum"
  },
  {
    "satd_id": 6635654,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Simplify an iteration domain.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      769
    ],
    "matched_text": "// Simplify an iteration domain."
  },
  {
    "satd_id": 6635654,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Simplify an iteration domain.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_util.h",
    "lines": [
      103
    ],
    "matched_text": " * \\brief Simplify an iteration domain."
  },
  {
    "satd_id": 6635663,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " TODO(sgrechanik-h): NOTs could be pushed down using De Morgan laws\n before running this function but this case didn't seem to be important enough.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      820,
      821
    ],
    "matched_text": "  // TODO(sgrechanik-h): NOTs could be pushed down using De Morgan laws"
  },
  {
    "satd_id": 6635680,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " A counter for naming new variables",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      717
    ],
    "matched_text": "  // A counter for naming new variables"
  },
  {
    "satd_id": 6635681,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Perform simplification mainly to remove a possibly empty reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      806
    ],
    "matched_text": "    // Perform simplification mainly to remove a possibly empty reduction."
  },
  {
    "satd_id": 6635688,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Use the condition of a reduction op to simplify its domain (axis)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      789
    ],
    "matched_text": "// Use the condition of a reduction op to simplify its domain (axis)"
  },
  {
    "satd_id": 6635695,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Propagate information from conditions and remove redundant inequalities",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      986
    ],
    "matched_text": "// Propagate information from conditions and remove redundant inequalities"
  },
  {
    "satd_id": 6635696,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " Currently in TVM reductions are only allowed at the top level of compute,\n we need to extract intermediate inlined reduction as a separate stage (tensor).\n Sometimes TrySimplifyCompute doesn't perform lift / extraction,\n so there may be some non-top reductions left, take care of them.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      1215,
      1216,
      1217,
      1218
    ],
    "matched_text": "  // Currently in TVM reductions are only allowed at the top level of compute,"
  },
  {
    "satd_id": 6635699,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " TODO(sgrechanik-h): Repeating the following steps has a positive effect, however we probably\n should find a better terminating criterion (like stop when the domain volume stops decreasing)\n Also 2 steps seems to be slightly better than 3",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_simplify.cc",
    "lines": [
      778,
      779,
      780
    ],
    "matched_text": "  // TODO(sgrechanik-h): Repeating the following steps has a positive effect, however we probably"
  },
  {
    "satd_id": 6635704,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " According to experiments two best simplifications orders were can->rw and rw->can->rw,\n but rw->can->rw is better for a couple of cases.\n Also we should end with rw because it factors multipliers out.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arith/int_solver.h",
    "lines": [
      44,
      45,
      46
    ],
    "matched_text": "// According to experiments two best simplifications orders were can->rw and rw->can->rw,"
  },
  {
    "satd_id": 6635715,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " If this is a reduction then we have to replicate it",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_util.cc",
    "lines": [
      82
    ],
    "matched_text": "  // If this is a reduction then we have to replicate it"
  },
  {
    "satd_id": 6635721,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": "!\n * \\brief Perform lifting of conditions of being possible to be non-zero together with\n *  applying some transformations like simplifying the reduction domain. Works only with\n *  this particular tensor's body, i.e. doesn't perform inlining.\n *\n * \\param tensor The original tensor;\n * \\param vranges Optional map from free variables to their value ranges.\n * \\return An optimized tensor.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_util.h",
    "lines": [
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6635724,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": "!\n * \\brief Simplify an iteration domain.\n *\n *  An iteration domain is basically an array of variables and a condition. The function will do the\n *  following:\n *  - Replace div and mod operations with new variables (optional).\n *  - Extract (in)equalities from the condition.\n *  - Perform Fourier-Motzkin elimination.\n *  - Shear the domain of iteration (e.g. if `y <= x <= y + 2` then x will be replaced with `y + d`\n *    where `d` is a new variable such that `0 <= d <= 2`).\n *  - Remove redundant variables.\n *  - Infer new variable ranges (hopefully more precise).\n *\n * \\param iter_domains The original domain.\n * \\param eliminate_div_mod Whether to eliminate div and mod by introducing new variables.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/ad_util.h",
    "lines": [
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6635727,
    "satd_repo": 70746484,
    "satd_sha": "ff2a76f90bc2f3b9eeb6e57c820aa300cfd2ab49",
    "satd_text": " TODO(yzhliu): it is better to visit the expression and do assertion",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_te_autodiff.py",
    "lines": [
      57
    ],
    "matched_text": "            # TODO(yzhliu): it is better to visit the expression and do assertion"
  },
  {
    "satd_id": 6635752,
    "satd_repo": 70746484,
    "satd_sha": "e4dc5c82f29d22667853b939dd02dcd053160e57",
    "satd_text": " pylint: disable=unnecessary-comprehension",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/support.py",
    "lines": [
      29
    ],
    "matched_text": "    return {k: v for k, v in GetLibInfo().items()}  # pylint: disable=unnecessary-comprehension"
  },
  {
    "satd_id": 6635764,
    "satd_repo": 70746484,
    "satd_sha": "97779a948d4b67cc4d2f96f435731ccc29725f7a",
    "satd_text": " TODO(weberlo) use graph pattern matching?",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/quantize/_partition_conversions.py",
    "lines": [
      164
    ],
    "matched_text": "        # TODO(weberlo) use graph pattern matching?"
  },
  {
    "satd_id": 6635847,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Group 4: Allocation related features\n The size of allocated buffer in bytes\n The product of lenghts of loops outside the scope of the allocation\n The product of lenghts of loops inside the score of the allocation\n alloc_outer_prod * alloc_inner_prod",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      158,
      159,
      160,
      161,
      162
    ],
    "matched_text": "  // Group 4: Allocation related features"
  },
  {
    "satd_id": 6635849,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Have LoopMultipleRead reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      534
    ],
    "matched_text": "      // Have LoopMultipleRead reuse"
  },
  {
    "satd_id": 6635851,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " todo(merrymercy): Detect MAD (Multiply\u2013add)\n The number of float MAD (Multiply\u2013add) ops\n The number of float add and sub ops\n The number of float multiply ops\n The number of float div and mod ops\n The number of float comparison ops\n The number of float math func calls\n The number of other float func calls\n The number of integer MAD (Multiply\u2013add) ops\n The number of integer add and sub ops\n The number of float multiply ops\n The number of float div and mod ops\n The number of float comparison ops\n The number of float math func calls\n The number of other float func calls\n The number of bool ops\n The number of select ops",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337
    ],
    "matched_text": "  // todo(merrymercy): Detect MAD (Multiply\u2013add)"
  },
  {
    "satd_id": 6635858,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Compute reuse distance and reuse ratio for accesses to a buffer\n return values: reuse_type, reuse_dis_iter, reuse_dis_bytes, reuse_ct",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      496,
      497
    ],
    "matched_text": "// Compute reuse distance and reuse ratio for accesses to a buffer"
  },
  {
    "satd_id": 6635875,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Compute the coefficient for an loop iterator in an expression\n Note: we use an approximation strategy to find coefficient.\n Hopefully, it is faster than DetectLinearEquation and can handle more cases (non-linear)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      382,
      383,
      384
    ],
    "matched_text": "// Compute the coefficient for an loop iterator in an expression"
  },
  {
    "satd_id": 6635878,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " If the axis is not found in both spatial args and reduce axis,\n then this stage must compute_at somewhere under this aixs and this axis is simplified out\n We assume it is an outer spatial",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      222,
      223,
      224
    ],
    "matched_text": "      // If the axis is not found in both spatial args and reduce axis,"
  },
  {
    "satd_id": 6635883,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " todo(merrymercy): this feature requires operation (tvm.compute) information\n GetAnnotationPosEncoding(vec_for_stack_.back()->loop_var,\n node->args, pcompute->axis, pcompute->reduce_axis);",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      728,
      729,
      730
    ],
    "matched_text": "      // todo(merrymercy): this feature requires operation (tvm.compute) information"
  },
  {
    "satd_id": 6635892,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " If it is not found in spacial args, then it is a reduce iterator.\n Use name to match",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      204,
      205
    ],
    "matched_text": "    // If it is not found in spacial args, then it is a reduce iterator."
  },
  {
    "satd_id": 6635896,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " The name of the buffer\n The type of the access\n The touched memory in bytes\n The touched unique memory in bytes\n The number of touched cache lines\n The number touched unique cache lines\n Tye type of data reuse\n The reuse distance in iterator number\n The reuse distance in total touched bytes\n The reuse ratio\n bytes / reuse_ct\n unique_bytes / reuse_ct\n lines / reuse_ct\n unique_lines / reuse_ct\n The stride in access",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108
    ],
    "matched_text": "  std::string buffer_name;        // The name of the buffer"
  },
  {
    "satd_id": 6635910,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " For the reuse in the innermost axis, the above code won't be executed.\n So we compute bytes here",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      536,
      537
    ],
    "matched_text": "        // For the reuse in the innermost axis, the above code won't be executed."
  },
  {
    "satd_id": 6635933,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Have SerialMultipleReadWrite reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      555
    ],
    "matched_text": "      // Have SerialMultipleReadWrite reuse"
  },
  {
    "satd_id": 6635937,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " Does not have this kind of annotation\n The annotated iterator is the innermost spatial iterator\n The annotated iterator is a middle spatial iterator\n The annotated iterator is the outermost spatial iterator\n The annotated iterator is the innermost reduce iterator\n The annotated iterator is a middle reduce iterator\n The annotated iterator is the outermost reduce iterator\n The annotated iterator is a mixed space and reduce iterator",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/feature.cc",
    "lines": [
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74
    ],
    "matched_text": "  kPosNone = 0,           // Does not have this kind of annotation"
  },
  {
    "satd_id": 6635947,
    "satd_repo": 70746484,
    "satd_sha": "356588996a8862677df1f22030313df5f2cbf774",
    "satd_text": " check reuse distance and reuse type after fusion",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_auto_scheduler_feature.py",
    "lines": [
      122
    ],
    "matched_text": "    # check reuse distance and reuse type after fusion"
  },
  {
    "satd_id": 6635960,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): replace the ostream with an interface for rendering errors.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/parser/source_map.h",
    "lines": [
      71
    ],
    "matched_text": "  // TODO(@jroesch): replace the ostream with an interface for rendering errors."
  },
  {
    "satd_id": 6635999,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): attributes should never be null, they should always be empty.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1031
    ],
    "matched_text": "    // TODO(@jroesch): attributes should never be null, they should always be empty."
  },
  {
    "satd_id": 6636003,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): fix global's needing span information\n Parse a local of the form `x`.\n Right now we fail to parse `x.y`.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6636005,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): we need a robust way to handle this writing dtypes as strings in text\n format is bad.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1247,
      1248
    ],
    "matched_text": "      // TODO(@jroesch): we need a robust way to handle this writing dtypes as strings in text"
  },
  {
    "satd_id": 6636006,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): not sure about this being the right way to handle nulls.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1224
    ],
    "matched_text": "      // TODO(@jroesch): not sure about this being the right way to handle nulls."
  },
  {
    "satd_id": 6636007,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): AttrErrors should have fields",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1297
    ],
    "matched_text": "      // TODO(@jroesch): AttrErrors should have fields"
  },
  {
    "satd_id": 6636007,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): AttrErrors should have fields",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1323
    ],
    "matched_text": "          // TODO(@jroesch): AttrErrors should have fields"
  },
  {
    "satd_id": 6636016,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): we currently only support 0.0.5.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      639
    ],
    "matched_text": "      // TODO(@jroesch): we currently only support 0.0.5."
  },
  {
    "satd_id": 6636017,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch: need to figure out bracket vs. sequence)\n return ParseSequence<ObjectRef>(TokenType::kOpenParen, TokenType::kComma,\n TokenType::kCloseParen,\n                                 [&]() { return ParseAttributeValue(); });",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1217,
      1218,
      1219,
      1220
    ],
    "matched_text": "        // TODO(@jroesch: need to figure out bracket vs. sequence)"
  },
  {
    "satd_id": 6636018,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " This is the case in which we find an empty arguments lists and no leftovers.\n If before stop is",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6636021,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " todo: add error handling around bad indices",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      237
    ],
    "matched_text": "    // todo: add error handling around bad indices"
  },
  {
    "satd_id": 6636027,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): merge spans",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      560
    ],
    "matched_text": "          // TODO(@jroesch): merge spans"
  },
  {
    "satd_id": 6636027,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): merge spans",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      580
    ],
    "matched_text": "          // TODO(@jroesch): merge spans"
  },
  {
    "satd_id": 6636027,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): merge spans",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      593
    ],
    "matched_text": "        // TODO(@jroesch): merge spans"
  },
  {
    "satd_id": 6636028,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " Clean up the white-space on both sides.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      258
    ],
    "matched_text": "      // Clean up the white-space on both sides."
  },
  {
    "satd_id": 6636029,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": "! \\brief whether show the meta data warning message ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/text_printer.h",
    "lines": [
      369
    ],
    "matched_text": "  /*! \\brief whether show the meta data warning message */"
  },
  {
    "satd_id": 6636030,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): visit spans",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/ir/expr_functor.cc",
    "lines": [
      467
    ],
    "matched_text": "  // TODO(@jroesch): visit spans"
  },
  {
    "satd_id": 6636030,
    "satd_repo": 70746484,
    "satd_sha": "fa2213f0aeba9603c49c2bfe93ce875dc0dfb970",
    "satd_text": " TODO(@jroesch): visit spans",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/ir/expr_functor.cc",
    "lines": [
      483
    ],
    "matched_text": "  // TODO(@jroesch): visit spans"
  },
  {
    "satd_id": 6636035,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Infer bound. This is necessary for computing the correct ToStr() for redundancy check",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      139
    ],
    "matched_text": "      // Infer bound. This is necessary for computing the correct ToStr() for redundancy check"
  },
  {
    "satd_id": 6636051,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Random choose a starting sketch\n TODO(jcf94, merrymercy): Maybe choose sketches in different possibility for they may have\n different potential on generating state with better performance",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      295,
      296,
      297
    ],
    "matched_text": "    // Random choose a starting sketch"
  },
  {
    "satd_id": 6636057,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Hack for rfactor: Replace the split factor for rfactor to the undefined Expr(),\n so later we can sample random value for the split factor.\n Why don't we use Expr() when doing the split for rfactor at the first time?\n Because during ApplySteps, a rfactor with undefined Expr() will crash TVM.\n So rfactor with undefined Expr() will conflict with cache_write, cache_read, rfactor\n in other stages",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      261,
      262,
      263,
      264,
      265,
      266
    ],
    "matched_text": "  // Hack for rfactor: Replace the split factor for rfactor to the undefined Expr(),"
  },
  {
    "satd_id": 6636063,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94, merrymercy): Use parallel_for to run this loop in parallel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      293
    ],
    "matched_text": "  // TODO(jcf94, merrymercy): Use parallel_for to run this loop in parallel"
  },
  {
    "satd_id": 6636068,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(comaniac, merrymercy, jcf94): Since we haven't finished porting the cost model part\n yet, currently delete the implementation of EvolutionarySearch. To be added later.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/auto_scheduler/search_policy/sketch_policy.cc",
    "lines": [
      330,
      331
    ],
    "matched_text": "  // TODO(comaniac, merrymercy, jcf94): Since we haven't finished porting the cost model part"
  },
  {
    "satd_id": 6636091,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": "!\n   * \\brief The constructor.\n   * \\param task  The SearchTask for the computation declaration.\n   * \\param schedule_cost_model The cost model for complete programs.\n   * \\param params The parameters map for this search process.\n   * \\param seed The random seed of this search process.\n   * \\param verbose Verbose level. 0 for silent, 1 to output information during schedule\n   * search.\n   * \\param init_search_callbacks SearchCallback to be called before schedule search.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy.h",
    "lines": [
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6636106,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Always do fusion for stage with cache_write\n TODO(jcf94): Always do fusion on GPU when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      101,
      102
    ],
    "matched_text": "    // Always do fusion for stage with cache_write"
  },
  {
    "satd_id": 6636112,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " enumerate compute_at location at target_stage\n TODO(merrymercy): More analysis here to make smarter choices",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      323,
      324
    ],
    "matched_text": "    // enumerate compute_at location at target_stage"
  },
  {
    "satd_id": 6636116,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94): Greedily inline all inlinable ops on GPU when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      63
    ],
    "matched_text": "  // TODO(jcf94): Greedily inline all inlinable ops on GPU when introducing GPU search policy."
  },
  {
    "satd_id": 6636120,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94): Add support for GPU structure when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      88
    ],
    "matched_text": "  // TODO(jcf94): Add support for GPU structure when introducing GPU search policy."
  },
  {
    "satd_id": 6636120,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94): Add support for GPU structure when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      111
    ],
    "matched_text": "  // TODO(jcf94): Add support for GPU structure when introducing GPU search policy."
  },
  {
    "satd_id": 6636121,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94): Add follow_tiling_levels for GPU when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      119
    ],
    "matched_text": "  // TODO(jcf94): Add follow_tiling_levels for GPU when introducing GPU search policy."
  },
  {
    "satd_id": 6636125,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Try to fuse and parallel the outermost n iterators\n Stop if we meet reduce iterator or we have enough parallel degree",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      421,
      422
    ],
    "matched_text": "    // Try to fuse and parallel the outermost n iterators"
  },
  {
    "satd_id": 6636139,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Unroll the space iterators and reduce iterators listed in the attrs in the innermost\n tile",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      489,
      490
    ],
    "matched_text": "      // Unroll the space iterators and reduce iterators listed in the attrs in the innermost"
  },
  {
    "satd_id": 6636142,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " An apply and skip rule will be handled in RuleMultiLevelTilingWithFusion\n TODO(jcf94): Always do cache_write on GPU when introducing GPU search policy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      145,
      146
    ],
    "matched_text": "    // An apply and skip rule will be handled in RuleMultiLevelTilingWithFusion"
  },
  {
    "satd_id": 6636147,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Stop if the memory access is not continuous (vectorizable)\n Note: The check is too hard, so we use heuristic here",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      551,
      552
    ],
    "matched_text": "      // Stop if the memory access is not continuous (vectorizable)"
  },
  {
    "satd_id": 6636149,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(merrymercy): We can do more analysis here to generate less and more efficient sketches.\n In some cases, we only need rfactor for more parallel\n In some cases, we only need rfactor for vectorization.\n Now we will generate two versions and let the search figure out the bette one.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/sketch_policy_rules.cc",
    "lines": [
      179,
      180,
      181,
      182
    ],
    "matched_text": "  // TODO(merrymercy): We can do more analysis here to generate less and more efficient sketches."
  },
  {
    "satd_id": 6636188,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " Do not use rfactor if we have enough parallelism on space iters",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/search_policy/utils.h",
    "lines": [
      302
    ],
    "matched_text": "      // Do not use rfactor if we have enough parallelism on space iters"
  },
  {
    "satd_id": 6636235,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " do not perform multi-level tiling on \"fake reduction\" with const tensors",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/compute_dag.cc",
    "lines": [
      383
    ],
    "matched_text": "      // do not perform multi-level tiling on \"fake reduction\" with const tensors"
  },
  {
    "satd_id": 6636237,
    "satd_repo": 70746484,
    "satd_sha": "75b8318a5011eca95b9e6e457fde07cf94c8f79f",
    "satd_text": " TODO(jcf94, merrymercy): Use parallel_for to run this in parallel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/compute_dag.cc",
    "lines": [
      807
    ],
    "matched_text": "  // TODO(jcf94, merrymercy): Use parallel_for to run this in parallel"
  },
  {
    "satd_id": 6636271,
    "satd_repo": 70746484,
    "satd_sha": "fc7a705104fda70f178d5b1070275196abf582cf",
    "satd_text": " Install cross-compiler when not building natively.\n Depending on the architecture selected to compile for,\n you may need to install an alternative cross-compiler.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docker/install/ubuntu_install_arm_compute_lib.sh",
    "lines": [
      46,
      47,
      48
    ],
    "matched_text": "# Install cross-compiler when not building natively."
  },
  {
    "satd_id": 6636281,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": " pylint: disable=invalid-name, missing-docstring, inconsistent-return-statements, no-else-return\n pylint: disable=unnecessary-comprehension, unused-argument, import-outside-toplevel\n pylint: disable=unused-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      18,
      19,
      20
    ],
    "matched_text": "# pylint: disable=invalid-name, missing-docstring, inconsistent-return-statements, no-else-return"
  },
  {
    "satd_id": 6636312,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": " pylint: disable=redefined-builtin, unused-argument, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/scope_handler.py",
    "lines": [
      29
    ],
    "matched_text": "# pylint: disable=redefined-builtin, unused-argument, invalid-name"
  },
  {
    "satd_id": 6636315,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/special_stmt.py",
    "lines": [
      31
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6636329,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": "! \\brief additional comment function ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/tir_hybrid_printer.cc",
    "lines": [
      59
    ],
    "matched_text": "  /*! \\brief additional comment function */"
  },
  {
    "satd_id": 6636331,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": "! \\brief Map from CommReducer to Doc ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/tir_hybrid_printer.cc",
    "lines": [
      77
    ],
    "matched_text": "  /*! \\brief Map from CommReducer to Doc */"
  },
  {
    "satd_id": 6636337,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": "! \\brief Map from Var to Doc ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/tir_hybrid_printer.cc",
    "lines": [
      71
    ],
    "matched_text": "  /*! \\brief Map from Var to Doc */"
  },
  {
    "satd_id": 6636344,
    "satd_repo": 70746484,
    "satd_sha": "87d6ccd789259a4ca38a5491fcd3799db1bc449f",
    "satd_text": "! \\brief Map from Buffer to Doc ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/tir_hybrid_printer.cc",
    "lines": [
      73
    ],
    "matched_text": "  /*! \\brief Map from Buffer to Doc */"
  },
  {
    "satd_id": 6636438,
    "satd_repo": 70746484,
    "satd_sha": "f11abf26b6dd84a8cc325da96d8528c48659c509",
    "satd_text": " pylint: disable=invalid-name, import-self, unused-argument, unused-variable, no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/coreml.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, import-self, unused-argument, unused-variable, no-else-return"
  },
  {
    "satd_id": 6636449,
    "satd_repo": 70746484,
    "satd_sha": "b6db7e33f7a589fdf5dce062d8488ce2f83a3727",
    "satd_text": " make sure we do not infinite loop.\n it is too large so we won't check for the exact program.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_to_basic_block_normal_form.py",
    "lines": [
      210,
      211
    ],
    "matched_text": "# make sure we do not infinite loop."
  },
  {
    "satd_id": 6636618,
    "satd_repo": 70746484,
    "satd_sha": "1823a7b7007d7d7dfef3cdaf5cb60198fd853517",
    "satd_text": " TODO(@vinx13) recover the test after we fix the conv2d grad.\n verify_conv2d_grad((1, 4, 16, 16), (16, 4, 1, 1), [2, 2], [0, 0], [1, 1])",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_op_grad_level2.py",
    "lines": [
      151,
      152
    ],
    "matched_text": "    # TODO(@vinx13) recover the test after we fix the conv2d grad."
  },
  {
    "satd_id": 6636619,
    "satd_repo": 70746484,
    "satd_sha": "ce7202c0412f44dddbf405ca7be1f78b1c83349d",
    "satd_text": " Clear the warning message cache in FallbackContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/relay_integration.py",
    "lines": [
      144
    ],
    "matched_text": "            # Clear the warning message cache in FallbackContext"
  },
  {
    "satd_id": 6636626,
    "satd_repo": 70746484,
    "satd_sha": "a26ac9363ea57e4104729bca957a058cc8a7ac9b",
    "satd_text": "! \\brief The up-to-date ComputeDAG of this state. The default value is an empty NullOpt,\n   * meaning the dag of this state is the same as the original ComputeDAG in the SearchTask.\n   * Otherwise, the stored value is the up-to-date ComputeDAG for this state, meaning some steps\n   * (e.g., CacheReadStep/CacheWriteStep) have modified the ComputeDAG.\n   * \\brief Pretty-print the state to a human readable string.\n   * \\return The human readable string.\n  /********** Step APIs working on a single stage *********",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6636645,
    "satd_repo": 70746484,
    "satd_sha": "96f601183f16686092e558bceceb5e6d507f1357",
    "satd_text": "!\n   * \\brief Schedule primitive corresponds to `te::Schedule::rfactor`.\n   * \\param stage_id The index of the iterator to be factored.\n   * \\param it The iterator to be factored.\n   * \\param factor_iter_id The position where the new iterator is placed.\n   * \\param dag The original ComputeDAG of this state.\n   * \\note Rfactor step will add an extra stage to the original ComputeDAG (in the front of the\n   * target stage), a up-to-date ComputeDAG is stored in State's `current_compute_dag`.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/auto_scheduler/loop_state.h",
    "lines": [
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6636651,
    "satd_repo": 70746484,
    "satd_sha": "96f601183f16686092e558bceceb5e6d507f1357",
    "satd_text": "!\n   * \\brief The constructor.\n   * \\param stage_id The index of the stage to be factored.\n   * \\param iter_id The index of the iterator to be factored.\n   * \\param factor_iter_id The position where the new iterator is placed.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/auto_scheduler/transform_step.h",
    "lines": [
      1154,
      1155,
      1156,
      1157,
      1158,
      1159
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6636667,
    "satd_repo": 70746484,
    "satd_sha": "96f601183f16686092e558bceceb5e6d507f1357",
    "satd_text": "! \\brief Reduction factor step that corresponds to te::Schedule::rfactor ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/auto_scheduler/transform_step.h",
    "lines": [
      1104
    ],
    "matched_text": "/*! \\brief Reduction factor step that corresponds to te::Schedule::rfactor */"
  },
  {
    "satd_id": 6636710,
    "satd_repo": 70746484,
    "satd_sha": "bbc2dbf9f81669c505ac8c73f4a6511bfc941d4f",
    "satd_text": "!\n   * \\brief Schedule primitive extends to split step.\n   * \\param stage_id The index of the stage to be split.\n   * \\param it The iterator to be split.\n   * \\param src_step_ids The indices of the split steps to be followed in the history.\n   * \\param level Use the length in this split level.\n   * \\param factor_or_nparts True to use `factor` for split from inner to outer,\n      False to use `nparts` for split from outer to inner.\n   * \\return The splitted new Iterators.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/auto_scheduler/loop_state.h",
    "lines": [
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6636755,
    "satd_repo": 70746484,
    "satd_sha": "b8f8b8d9a804f5867daddd9c5d7ddc0ed4d0d199",
    "satd_text": "!\n   * \\brief Since some steps may change the ComputeDAG (e.g. CacheRead/CacheWrite), the initial\n   * ComputeDAG may not be up-to-date. This function replays the given transform steps from the\n   * initial state and returns an up-to-date ComputeDAG.\n   * \\param steps The steps to be replaied. Usually we'll filter out the unused steps to speed up\n   * the replay process, since we only intend to get a ComputeDAG with the up-to-date op stage\n   * structure.\n   * \\return The up-to-date ComputeDAG.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/auto_scheduler/compute_dag.h",
    "lines": [
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6636779,
    "satd_repo": 70746484,
    "satd_sha": "b8f8b8d9a804f5867daddd9c5d7ddc0ed4d0d199",
    "satd_text": " TODO(jcf94): add rfactor support\n A state may have multiple stage modifiable steps, stop by the current step to avoid\n replaying excess steps",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/transform_step.cc",
    "lines": [
      974,
      975,
      976
    ],
    "matched_text": "    // TODO(jcf94): add rfactor support"
  },
  {
    "satd_id": 6636790,
    "satd_repo": 70746484,
    "satd_sha": "b8f8b8d9a804f5867daddd9c5d7ddc0ed4d0d199",
    "satd_text": " TODO(jcf94): Update this check to equal after fixing the cache write bug in TVM",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/transform_step.cc",
    "lines": [
      1140
    ],
    "matched_text": "  // TODO(jcf94): Update this check to equal after fixing the cache write bug in TVM"
  },
  {
    "satd_id": 6636796,
    "satd_repo": 70746484,
    "satd_sha": "b8f8b8d9a804f5867daddd9c5d7ddc0ed4d0d199",
    "satd_text": " 5: cache_write with multi outputs\n TVM's cache_write actually has a bug with this case:\n\n After schedule.cache_write, TVM generate one new stage:\n   From: kernel_data -> kernel_split -> kernel\n   To:   kernel_data -> kernel_split_global -> kernel_split -> kernel\n\n But with topo sort analyse, we get:\n  //   kernel_data -> kernel_split_global -> kernel_split -> kernel\n         \\                                                /\n          ----------------> kernel_split ---------------->\n\n TODO(jcf94): Seems there's bug with the input/output tensor. Such multi outputs case\n should be unusual, so we make some hack on DoCacheWrite. This should be fixed later.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_auto_scheduler_loop_state.py",
    "lines": [
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345
    ],
    "matched_text": "    # 5: cache_write with multi outputs"
  },
  {
    "satd_id": 6636995,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": "! \\brief A map from globals (as strings) to their index in the function map. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      600
    ],
    "matched_text": "  /*! \\brief A map from globals (as strings) to their index in the function map. */"
  },
  {
    "satd_id": 6636995,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": "! \\brief A map from globals (as strings) to their index in the function map. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm/executable.h",
    "lines": [
      156
    ],
    "matched_text": "  /*! \\brief A map from globals (as strings) to their index in the function map. */"
  },
  {
    "satd_id": 6637005,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": " TODO(@jroesch): I really would like this to be a global variable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      772
    ],
    "matched_text": "  // TODO(@jroesch): I really would like this to be a global variable."
  },
  {
    "satd_id": 6637005,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": " TODO(@jroesch): I really would like this to be a global variable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm/vm.h",
    "lines": [
      214
    ],
    "matched_text": "  // TODO(@jroesch): I really would like this to be a global variable."
  },
  {
    "satd_id": 6637028,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": "!\n   * \\brief Get a PackedFunc from module.\n   *\n   *  The PackedFunc may not be fully initialized,\n   *  there might still be first time running overhead when\n   *  executing the function on certain devices.\n   *  For benchmarking, use prepare to eliminate\n   *\n   * \\param name the name of the function.\n   * \\param sptr_to_self The shared_ptr that points to this module node.\n   *\n   * \\return PackedFunc(nullptr) when it is not available.\n   *\n   * \\note The function will always remain valid.\n   *   If the function needs resource from the module(e.g. late linking),\n   *   it should capture sptr_to_self.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      683,
      684,
      685,
      686,
      687,
      688,
      689,
      690,
      691,
      692,
      693,
      694,
      695,
      696,
      697,
      698,
      699
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637028,
    "satd_repo": 70746484,
    "satd_sha": "922e0a05c8cc8fce7964d3f9907fde6981c5f72d",
    "satd_text": "!\n   * \\brief Get a PackedFunc from module.\n   *\n   *  The PackedFunc may not be fully initialized,\n   *  there might still be first time running overhead when\n   *  executing the function on certain devices.\n   *  For benchmarking, use prepare to eliminate\n   *\n   * \\param name the name of the function.\n   * \\param sptr_to_self The shared_ptr that points to this module node.\n   *\n   * \\return PackedFunc(nullptr) when it is not available.\n   *\n   * \\note The function will always remain valid.\n   *   If the function needs resource from the module(e.g. late linking),\n   *   it should capture sptr_to_self.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm/vm.h",
    "lines": [
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637058,
    "satd_repo": 70746484,
    "satd_sha": "4a1089d4ab2a7aed3770ce932c4528673c7e0291",
    "satd_text": " Disable as tests are flaky - https://github.com/apache/incubator-tvm/issues/6064\n _test_tflite2_quantized_depthwise_convolution([1, 8, 8, 128], [1, 1, 128, 1], [1, 1], [1, 1],\n                                               'SAME', 'NHWC', 1)\n _test_tflite2_quantized_depthwise_convolution([1, 17, 17, 12], [3, 3, 12, 1], [1, 1], [2, 2],\n                                               'VALID', 'NHWC', 1)\n _test_tflite2_quantized_depthwise_convolution([1, 24, 24, 3], [7, 7, 3, 8], [1, 1], [2, 2],\n                                               'SAME', 'NHWC', 8)",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6637062,
    "satd_repo": 70746484,
    "satd_sha": "a751031f2e20c109c696831a98e23b428c12a037",
    "satd_text": " Re-export the called pack macro, eventually remove as its not a very good\n abstraction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/tvm-graph-rt/src/lib.rs",
    "lines": [
      37,
      38
    ],
    "matched_text": "// Re-export the called pack macro, eventually remove as its not a very good"
  },
  {
    "satd_id": 6637068,
    "satd_repo": 70746484,
    "satd_sha": "a751031f2e20c109c696831a98e23b428c12a037",
    "satd_text": " We first we compile a model using the Python bindings then run the tests.\n Run some more tests involving the graph runtime API.\n Finally we test the TVM crate which provides both runtime\n and compiler bindings.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6637071,
    "satd_repo": 70746484,
    "satd_sha": "71533a5c252d9c501a20b906c9cc5e6471d3f686",
    "satd_text": " Delete the stage in `iter_to_attached_stages`, if the corresponding iterator does not have\n any attatched stage, delete this iterm too",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/loop_state.cc",
    "lines": [
      141,
      142
    ],
    "matched_text": "    // Delete the stage in `iter_to_attached_stages`, if the corresponding iterator does not have"
  },
  {
    "satd_id": 6637117,
    "satd_repo": 70746484,
    "satd_sha": "71533a5c252d9c501a20b906c9cc5e6471d3f686",
    "satd_text": " Two vectors are used to represent the iterator relation before and after split\n The original iterators in AttachMap will be updated with the new iterators",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/transform_step.cc",
    "lines": [
      588,
      589
    ],
    "matched_text": "  // Two vectors are used to represent the iterator relation before and after split"
  },
  {
    "satd_id": 6637121,
    "satd_repo": 70746484,
    "satd_sha": "71533a5c252d9c501a20b906c9cc5e6471d3f686",
    "satd_text": "!\n   * \\brief Apply the current step to State.\n   * \\param state A mutable pointer to State.\n   * \\note After compute_at, we need careful dependency analysis to compute the accurate bound\n   * information. However, it is relatively expensive and complicated, so we just fill \"None\" as\n   * bound for the newly created iterators.\n   * Call ComputeDAG::InferBound on the updated state to get the complete bound information.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/transform_step.h",
    "lines": [
      493,
      494,
      495,
      496,
      497,
      498,
      499,
      500
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637121,
    "satd_repo": 70746484,
    "satd_sha": "71533a5c252d9c501a20b906c9cc5e6471d3f686",
    "satd_text": "!\n   * \\brief Apply the current step to State.\n   * \\param state A mutable pointer to State.\n   * \\note After compute_at, we need careful dependency analysis to compute the accurate bound\n   * information. However, it is relatively expensive and complicated, so we just fill \"None\" as\n   * bound for the newly created iterators.\n   * Call ComputeDAG::InferBound on the updated state to get the complete bound information.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_scheduler/transform_step.h",
    "lines": [
      608,
      609,
      610,
      611,
      612,
      613,
      614,
      615
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637181,
    "satd_repo": 70746484,
    "satd_sha": "526b5a519225ec09868e31211a917f7c51d40e52",
    "satd_text": " TODO(@zhiics, @icemelon9): Disable the gpu test for now until the heterogeneous support\n   is ready",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      42,
      43
    ],
    "matched_text": "    # TODO(@zhiics, @icemelon9): Disable the gpu test for now until the heterogeneous support"
  },
  {
    "satd_id": 6637294,
    "satd_repo": 70746484,
    "satd_sha": "3150db767ae6e190216903fd46d2a9b1c2672621",
    "satd_text": " Throw out gradients we aren't testing",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "python/tvm/relay/testing/__init__.py",
    "lines": [
      134
    ],
    "matched_text": "        # Throw out gradients we aren't testing"
  },
  {
    "satd_id": 6637309,
    "satd_repo": 70746484,
    "satd_sha": "ccacb1ec13597b0dd9b5f3ffcc599ac3b3957ae4",
    "satd_text": " Test 23 * 1/16\n [m,s] = [0.5, -3] = frexp(1/16)\n M = 0.5*2^31 = 1073741824\n so M = 1073741824 and s = -3",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_level3.py",
    "lines": [
      88,
      89,
      90,
      91
    ],
    "matched_text": "    # Test 23 * 1/16"
  },
  {
    "satd_id": 6637317,
    "satd_repo": 70746484,
    "satd_sha": "9f6544b1ab64c637237b6dcd87eda75c354345aa",
    "satd_text": " use \"kernel_autotvm\" instead of \"kernel\" to avoid naming conflict with OpenCL keyword",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d_spatial_pack.py",
    "lines": [
      113
    ],
    "matched_text": "        # use \"kernel_autotvm\" instead of \"kernel\" to avoid naming conflict with OpenCL keyword"
  },
  {
    "satd_id": 6637318,
    "satd_repo": 70746484,
    "satd_sha": "dff715a54ee0f02f27b4f4efde08c77e86eff2d2",
    "satd_text": " specially handle bool, stored as DataType::Int(8)\n specially handle bool, stored as DataType::Int(8)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6637325,
    "satd_repo": 70746484,
    "satd_sha": "3912a64e43412704fcd0c170e94a49dcc6e62f71",
    "satd_text": " TODO(mbrookhart): expand testing when adding more backend schedules",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_op_level3.py",
    "lines": [
      792
    ],
    "matched_text": "        # TODO(mbrookhart): expand testing when adding more backend schedules"
  },
  {
    "satd_id": 6637325,
    "satd_repo": 70746484,
    "satd_sha": "3912a64e43412704fcd0c170e94a49dcc6e62f71",
    "satd_text": " TODO(mbrookhart): expand testing when adding more backend schedules",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_op_level3.py",
    "lines": [
      837
    ],
    "matched_text": "        # TODO(mbrookhart): expand testing when adding more backend schedules"
  },
  {
    "satd_id": 6637333,
    "satd_repo": 70746484,
    "satd_sha": "6360ad1583193b4d1b7bd910560a5e95258a39ab",
    "satd_text": "! \\brief Simplify reshape pattern ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/simplify_expr.cc",
    "lines": [
      98
    ],
    "matched_text": "  /*! \\brief Simplify reshape pattern */"
  },
  {
    "satd_id": 6637338,
    "satd_repo": 70746484,
    "satd_sha": "6360ad1583193b4d1b7bd910560a5e95258a39ab",
    "satd_text": "!\n * \\brief Simplify the Relay expression.\n *\n * \\return The pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      363,
      364,
      365,
      366,
      367
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637342,
    "satd_repo": 70746484,
    "satd_sha": "ae4480a37907f6eda602c45bba9632221e4c5646",
    "satd_text": "\n * When we are in the tuning of TVM, we will make TVM occupy\n * the cache fully and doesn't flush it during iteration.\n * This has problems then in e2e testing, since arrays that\n * we assume exist in cache (ie. weights) are evicted during e2e runs,\n * which leads to lower performance.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_module.cc",
    "lines": [
      311,
      312,
      313,
      314,
      315,
      316,
      317
    ],
    "matched_text": "/*"
  },
  {
    "satd_id": 6637344,
    "satd_repo": 70746484,
    "satd_sha": "ae4480a37907f6eda602c45bba9632221e4c5646",
    "satd_text": " TODO(FrozenGene): Support ARM.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/rpc/rpc_module.cc",
    "lines": [
      319
    ],
    "matched_text": "// TODO(FrozenGene): Support ARM."
  },
  {
    "satd_id": 6637433,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " TODO(jcf94): This is an example policy for minimum system, will be upgrated to\n formal search policy later.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/auto_schedule.py",
    "lines": [
      183,
      184
    ],
    "matched_text": "            # TODO(jcf94): This is an example policy for minimum system, will be upgrated to"
  },
  {
    "satd_id": 6637434,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " TODO(merrymercy): Implement this more carefully and move this to c++ as a member function\n of ComputeDAG",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/compute_dag.py",
    "lines": [
      136,
      137
    ],
    "matched_text": "        # TODO(merrymercy): Implement this more carefully and move this to c++ as a member function"
  },
  {
    "satd_id": 6637438,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " We use 1e10 instead of sys.float_info.max for better readability in log",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/measure.py",
    "lines": [
      420
    ],
    "matched_text": "    max_float = 1e10  # We use 1e10 instead of sys.float_info.max for better readability in log"
  },
  {
    "satd_id": 6637439,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " todo(lmzheng): port the unroll pass",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/auto_schedule/measure.py",
    "lines": [
      310
    ],
    "matched_text": "                with transform.PassContext():  # todo(lmzheng): port the unroll pass"
  },
  {
    "satd_id": 6637447,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " We use fork and a global variable to copy arguments between processings.\n This can avoid expensive serialization of TVM IR when using multiprocessing.Pool",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/measure.py",
    "lines": [
      53,
      54
    ],
    "matched_text": "# We use fork and a global variable to copy arguments between processings."
  },
  {
    "satd_id": 6637447,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " We use fork and a global variable to copy arguments between processings.\n This can avoid expensive serialization of TVM IR when using multiprocessing.Pool",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/measure.py",
    "lines": [
      273,
      274
    ],
    "matched_text": "    # We use fork and a global variable to copy arguments between processings."
  },
  {
    "satd_id": 6637447,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " We use fork and a global variable to copy arguments between processings.\n This can avoid expensive serialization of TVM IR when using multiprocessing.Pool",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/auto_schedule/measure.py",
    "lines": [
      361,
      362
    ],
    "matched_text": "    # We use fork and a global variable to copy arguments between processings."
  },
  {
    "satd_id": 6637487,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " Create the initial schedule\n TODO(jcf94): Currently we only checked single output dag for TVM Auto-scheduler,\n update this after testing with multiple outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/compute_dag.cc",
    "lines": [
      260,
      261,
      262
    ],
    "matched_text": "  // Create the initial schedule"
  },
  {
    "satd_id": 6637487,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " Create the initial schedule\n TODO(jcf94): Currently we only checked single output dag for TVM Auto-scheduler,\n update this after testing with multiple outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/compute_dag.cc",
    "lines": [
      300,
      301,
      302
    ],
    "matched_text": "  // Create the initial schedule"
  },
  {
    "satd_id": 6637498,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " TODO(merrymercy): Add more analyses later.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/auto_schedule/compute_dag.h",
    "lines": [
      61
    ],
    "matched_text": "  // TODO(merrymercy): Add more analyses later."
  },
  {
    "satd_id": 6637633,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "!\n   * \\brief The constructor.\n   * \\param costs The time costs of execution.\n   * \\param error_no The error code.\n   * \\param error_msg The error message if there is any error.\n   * \\param all_cost The time cost of build and run.\n   * \\param timestamp The time stamps of this measurement.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/measure.h",
    "lines": [
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637664,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "! \\brief Answer is wrong when compared to a reference output. ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/auto_schedule/measure.h",
    "lines": [
      65
    ],
    "matched_text": "  /*! \\brief Answer is wrong when compared to a reference output. */"
  },
  {
    "satd_id": 6637681,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "!\n * \\brief Measurer that measures the time costs of tvm programs\n * This class combines ProgramBuilder and ProgramRunner, and provides a simpler API ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/measure.h",
    "lines": [
      366,
      367,
      368
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637725,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": " 2. Then `Performance Tuning`: use cost model and evolutionary search to seek for the schedule\n with best performance\n Note: This example policy does not include this part",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/search_policy/empty_policy.cc",
    "lines": [
      87,
      88,
      89
    ],
    "matched_text": "  // 2. Then `Performance Tuning`: use cost model and evolutionary search to seek for the schedule"
  },
  {
    "satd_id": 6637745,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "!\n * \\file auto_schedule/search_policy/search_policy.h\n * \\brief The base class of search policies, including the abstract definition of search policy and\n * other supporting data structures.\n *\n * The basic schedule search process for TVM Auto-scheduler is design to be:\n * `Program sampling` -> `Performance Tuning`.\n *\n * In `Program sampling`, we use some predefined precise or heuristic rules to generate several\n * initial schedules. Based on these initial starting points, we perform `Performance Tuning` which\n * uses cost model based evolutionary search to select schedules with the best performance.\n *\n * Candidate schedules are measured against the specific hardware target.\n *\n * \\note Adding a new search policy.\n * In design, there's no need for users to implement their own search policy, our formal search\n * policy(will be brought later) should be enough to cover most use cases. Meanwhile, a custom rule\n * mechanism will be provided to enable user-defined template search to serve the same functionality\n * as the current AutoTVM template.\n *\n * This guide is for advanced uses who have special requirements.\n * 1. The only function that must be implemented is Search(), which takes a task as input and\n * returns the best states found.\n * 2. Information about the compute declaration of ops/subgraphs can be acquired from SearchTask.\n * This structure also contains some information about the target device. (e.g. knowing the width\n * of the device vector unit, we can limit the max vectorize size during schedule search)\n * 3. SearchCallback provides more flexibility to do extra affairs before/after the search process.\n * 4. ProgramMeasurer provides a simple but useful api to help check the performance of states got\n * during the search process.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/search_policy/search_policy.h",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637751,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "!\n   * \\brief The set of already measured states.\n   * During the schedule search process, we may generate `equal states` through different search\n   * branches. (Equal States: 1. the transform steps are totally the same; 2. even with different\n   * steps, two states may still result in a same schedule. e.g. To split a axis with extent 512\n   * to 3 parts [8, 16, 4]. We can split from inner to outter by factors [16, 4], while we can\n   * get a same result to split from outter to inner by factors [8, 16])\n   * We store the string format of a state for redundancy check. This is used to make sure a\n   * measured state will never be measured again.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/search_policy/search_policy.h",
    "lines": [
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6637824,
    "satd_repo": 70746484,
    "satd_sha": "456c58dea0f76237401674e7f09989130eada214",
    "satd_text": "!\n * \\brief Clean the name of an iterator to make it valid in python code.\n * \\param str The original name.\n * \\return The cleaned name.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/auto_schedule/utils.h",
    "lines": [
      138,
      139,
      140,
      141,
      142
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637849,
    "satd_repo": 70746484,
    "satd_sha": "a23592cdd3c28aae31ee0e5c713cfe02f5ad3cab",
    "satd_text": " rank must be static",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/dyn/tensor/transform.cc",
    "lines": [
      209
    ],
    "matched_text": "  // rank must be static"
  },
  {
    "satd_id": 6637849,
    "satd_repo": 70746484,
    "satd_sha": "a23592cdd3c28aae31ee0e5c713cfe02f5ad3cab",
    "satd_text": " rank must be static",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/dyn/tensor/transform.cc",
    "lines": [
      211
    ],
    "matched_text": "  CHECK(rank) << \"Target shape must have static rank\";  // rank must be static even in dyn pass"
  },
  {
    "satd_id": 6637888,
    "satd_repo": 70746484,
    "satd_sha": "96fe315984d500f802cee627615bc46c76b82f2e",
    "satd_text": " TODO(seanlatias): for now input argument cannot be a tuple",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/analysis/get_calibration_data.cc",
    "lines": [
      79
    ],
    "matched_text": "      // TODO(seanlatias): for now input argument cannot be a tuple"
  },
  {
    "satd_id": 6637898,
    "satd_repo": 70746484,
    "satd_sha": "5f4b9a96f49d40f3edc59941f8a1ba1b93bc28e7",
    "satd_text": " Currently not able to check out: If the index expression failed\n to be simplified to a RampNode",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/analysis/verify_gpu_code.cc",
    "lines": [
      138,
      139
    ],
    "matched_text": "    // Currently not able to check out: If the index expression failed"
  },
  {
    "satd_id": 6637898,
    "satd_repo": 70746484,
    "satd_sha": "5f4b9a96f49d40f3edc59941f8a1ba1b93bc28e7",
    "satd_text": " Currently not able to check out: If the index expression failed\n to be simplified to a RampNode",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/analysis/verify_gpu_code.cc",
    "lines": [
      149,
      150
    ],
    "matched_text": "    // Currently not able to check out: If the index expression failed"
  },
  {
    "satd_id": 6637919,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": " Defined to work around compiler limitations.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/crt/func_registry.h",
    "lines": [
      89
    ],
    "matched_text": "// Defined to work around compiler limitations."
  },
  {
    "satd_id": 6637959,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": "!\n * \\brief Log memory pool size for virtual memory allocation\n *\n * Here is a list of possible choices:\n * * use 16 for 64 KiB memory space\n * * use 17 for 128 KiB memory space\n * * use 18 for 256 KiB memory space\n * * use 19 for 512 KiB memory space\n * * use 20 for 1 MiB memory space\n * * use 21 for 2 MiB memory space\n * * use 22 for 4 MiB memory space\n * * use 23 for 8 MiB memory space\n * * use 24 for 16 MiB memory space\n * * use 25 for 32 MiB memory space\n * * use 26 for 64 MiB memory space\n * * use 27 for 128 MiB memory space\n * * use 28 for 256 MiB memory space\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/crt_config/crt_config.h",
    "lines": [
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637959,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": "!\n * \\brief Log memory pool size for virtual memory allocation\n *\n * Here is a list of possible choices:\n * * use 16 for 64 KiB memory space\n * * use 17 for 128 KiB memory space\n * * use 18 for 256 KiB memory space\n * * use 19 for 512 KiB memory space\n * * use 20 for 1 MiB memory space\n * * use 21 for 2 MiB memory space\n * * use 22 for 4 MiB memory space\n * * use 23 for 8 MiB memory space\n * * use 24 for 16 MiB memory space\n * * use 25 for 32 MiB memory space\n * * use 26 for 64 MiB memory space\n * * use 27 for 128 MiB memory space\n * * use 28 for 256 MiB memory space\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/host/crt_config.h",
    "lines": [
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6637962,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": "! Support low-level debugging in MISRA-C runtime ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/crt_config/crt_config.h",
    "lines": [
      27
    ],
    "matched_text": "/*! Support low-level debugging in MISRA-C runtime */"
  },
  {
    "satd_id": 6637962,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": "! Support low-level debugging in MISRA-C runtime ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/host/crt_config.h",
    "lines": [
      27
    ],
    "matched_text": "/*! Support low-level debugging in MISRA-C runtime */"
  },
  {
    "satd_id": 6638015,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": " Matches the style of registry defined in generated C modules.\n NOTE: final \\0",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/crt/func_registry_test.cc",
    "lines": [
      103,
      104
    ],
    "matched_text": "// Matches the style of registry defined in generated C modules."
  },
  {
    "satd_id": 6638017,
    "satd_repo": 70746484,
    "satd_sha": "d6ceba044b2427d493575c26749164aef2efaf30",
    "satd_text": "! \\brief Return a test function handle, with number repeating for all bytes in a void*. ",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/crt/func_registry_test.cc",
    "lines": [
      140
    ],
    "matched_text": "/*! \\brief Return a test function handle, with number repeating for all bytes in a void*. */"
  },
  {
    "satd_id": 6638073,
    "satd_repo": 70746484,
    "satd_sha": "474d47234f8a2378f9135fa3200ca7ce75459889",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_algorithm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6638073,
    "satd_repo": 70746484,
    "satd_sha": "474d47234f8a2378f9135fa3200ca7ce75459889",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/_algorithm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6638073,
    "satd_repo": 70746484,
    "satd_sha": "474d47234f8a2378f9135fa3200ca7ce75459889",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6638116,
    "satd_repo": 70746484,
    "satd_sha": "8a0249cd4d12a2eb1a4e7a692a9265bc63fec5c8",
    "satd_text": " TODO(@comanic): Support other data types (i.e., int8).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/dnnl/dnnl_json_runtime.cc",
    "lines": [
      142
    ],
    "matched_text": "    // TODO(@comanic): Support other data types (i.e., int8)."
  },
  {
    "satd_id": 6638126,
    "satd_repo": 70746484,
    "satd_sha": "8a0249cd4d12a2eb1a4e7a692a9265bc63fec5c8",
    "satd_text": " TODO(@comaniac): Support other data lengths.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/contrib/dnnl/dnnl_json_runtime.cc",
    "lines": [
      68
    ],
    "matched_text": "      // TODO(@comaniac): Support other data lengths."
  },
  {
    "satd_id": 6638146,
    "satd_repo": 70746484,
    "satd_sha": "8a0249cd4d12a2eb1a4e7a692a9265bc63fec5c8",
    "satd_text": " Since the DNNL memory has been created before calling this function, we assume the entry\n has not yet been bound to the other DNNL memory; otherwise it may have memory leak.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/dnnl/dnnl_json_runtime.cc",
    "lines": [
      138,
      139
    ],
    "matched_text": "    // Since the DNNL memory has been created before calling this function, we assume the entry"
  },
  {
    "satd_id": 6638242,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): eventually modularize the rendering interface to provide control of how to\n format errors.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/diagnostic.h",
    "lines": [
      161,
      162
    ],
    "matched_text": "  // TODO(@jroesch): eventually modularize the rendering interface to provide control of how to"
  },
  {
    "satd_id": 6638249,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": "! \\brief A diagnostic context for recording errors against a source file.\n * TODO(@jroesch): convert source map and improve in follow up PR, the parser\n * assumes a single global file for now.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/diagnostic.h",
    "lines": [
      145,
      146,
      147,
      148
    ],
    "matched_text": "/*! \\brief A diagnostic context for recording errors against a source file."
  },
  {
    "satd_id": 6638264,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " Parse as many call args as possible, building up expression\n\n NB(@jroesch): this seems like a hack but in order to parse curried functions\n and avoid complex grammar we will parse multiple call lists in a row.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1133,
      1134,
      1135,
      1136
    ],
    "matched_text": "      // Parse as many call args as possible, building up expression"
  },
  {
    "satd_id": 6638277,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): this is the final remaining feature.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1353
    ],
    "matched_text": "  // TODO(@jroesch): this is the final remaining feature."
  },
  {
    "satd_id": 6638280,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": "! \\brief A stack of scopes.\n *\n * In order to properly handle scoping we must maintain a stack of scopes.\n *\n * A stack allows users to write programs which contain repeated variable\n * names and to properly handle both nested scopes and removal of variables\n * when they go out of scope.\n *\n * This is the classic approach to lexical scoping.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162
    ],
    "matched_text": "/*! \\brief A stack of scopes."
  },
  {
    "satd_id": 6638292,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): we probably will need to manually\n expand these with a pass.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      117,
      118
    ],
    "matched_text": "  // TODO(@jroesch): we probably will need to manually"
  },
  {
    "satd_id": 6638293,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": "! \\brief The parser class is the main interface to the parser.\n * the parser is not currently exposed beyond this .cc file.\n *\n * The parser is initialized with a diagnostic context, an\n * operator table, and a token stream.\n *\n * The rest of the internal state is used to map the human readable\n * form to in-memory IR representation.\n *\n * The main entry point to the parser are a set of parsing methods\n * such as `ParseModule` and `ParseExpr`.\n *\n * As with traditional recursive descent parsers the parsing methods\n * are factored recursively just as one would do with a formal language\n * grammar.\n *\n * You can view a recursive descent parser as a human friendly way to specify\n * a state machine, and thus this factoring is necessary as the 'state' of this\n * machine is the combination of the current parsing method and the next token.\n *\n * Parsing proceeds by matching a token and then dispatching to the appropriate\n * method to parse the next tokens in the stream.\n *\n * For example if we are parsing a type and encounter a \"Tensor\" token we switch\n * into a mode for parsing `[`, a shape, a comma, a data type and then a `]`.\n *\n * Certain matches like this are unambiguous and proceed in a straight line fashion\n * once the initial token is found. Other parsing is more complex and requires some\n * tricks to correctly parse.\n *\n * For example when we find a '(' in an expression context, it may be part of\n * a tuple, the arguments to a call, or a parenthesized expression. The below code\n * disambiguate these cases by factoring expression parsing into a series of methods\n * which encode the parsing context and thus how to interpret the parenthesis.\n *\n * For more information one should be able to read the code in order starting with\n * `ParseModule` or `ParseExpr`.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260
    ],
    "matched_text": "/*! \\brief The parser class is the main interface to the parser."
  },
  {
    "satd_id": 6638297,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): the current lexing makes it hard to parse this\n in a way that doesnt feel like a hack.\n\n We should move to module level attributes instead\n so we can tag modules with top-level data.\n\n #[text_version = \"0.0.4\"]\n\n For now we only support current version.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      617,
      618,
      619,
      620,
      621,
      622,
      623,
      624,
      625
    ],
    "matched_text": "    // TODO(@jroesch): the current lexing makes it hard to parse this"
  },
  {
    "satd_id": 6638302,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): convert semver to module level attribute.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      610
    ],
    "matched_text": "    // TODO(@jroesch): convert semver to module level attribute."
  },
  {
    "satd_id": 6638314,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " Need to do better error handling here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      1321
    ],
    "matched_text": "          // Need to do better error handling here."
  },
  {
    "satd_id": 6638316,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): contain meta-table below",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      69
    ],
    "matched_text": "  // TODO(@jroesch): contain meta-table below"
  },
  {
    "satd_id": 6638329,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " NB: Might need to optimize to remove deep recursion.\n Stack should only grow proportionally to the number of\n nested scopes.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      757,
      758,
      759
    ],
    "matched_text": "            // NB: Might need to optimize to remove deep recursion."
  },
  {
    "satd_id": 6638336,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " If we have generics we need to add a type scope.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      677
    ],
    "matched_text": "      // If we have generics we need to add a type scope."
  },
  {
    "satd_id": 6638336,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " If we have generics we need to add a type scope.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/parser.cc",
    "lines": [
      916
    ],
    "matched_text": "      // If we have generics we need to add a type scope."
  },
  {
    "satd_id": 6638378,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " revisit this, literal node issue.\n TODO(@jroesch): bounds checking",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/parser/parser.cc",
    "lines": [
      486,
      487
    ],
    "matched_text": "      // revisit this, literal node issue."
  },
  {
    "satd_id": 6638386,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " If there isn't a number right after either,\n this is really slow for lexing, should replace\n with multi-token return or something.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      203,
      204,
      205
    ],
    "matched_text": "      // If there isn't a number right after either,"
  },
  {
    "satd_id": 6638397,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jroesch): have lexer use diagnostic context too.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/parser/tokenizer.h",
    "lines": [
      186
    ],
    "matched_text": "        // TODO(@jroesch): have lexer use diagnostic context too."
  },
  {
    "satd_id": 6638405,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(weberlo): update this test once extern is implemented",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_ir_parser2.py",
    "lines": [
      869
    ],
    "matched_text": "    # TODO(weberlo): update this test once extern is implemented"
  },
  {
    "satd_id": 6638408,
    "satd_repo": 70746484,
    "satd_sha": "f9e905a3cc1f5497fa70051393b7e8cfac642fee",
    "satd_text": " TODO(@jmp): Crashes if %x isn't annnotated.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_parser2.py",
    "lines": [
      365
    ],
    "matched_text": "# TODO(@jmp): Crashes if %x isn't annnotated."
  },
  {
    "satd_id": 6638428,
    "satd_repo": 70746484,
    "satd_sha": "2875e4cddc4cfff53a19a7e69aa331119c8db7ef",
    "satd_text": " NOLINTNEXTLINE(whitespace/braces)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/loop_partition.cc",
    "lines": [
      72
    ],
    "matched_text": "    // NOLINTNEXTLINE(whitespace/braces)"
  },
  {
    "satd_id": 6638429,
    "satd_repo": 70746484,
    "satd_sha": "2875e4cddc4cfff53a19a7e69aa331119c8db7ef",
    "satd_text": " NOLINT(whitespace/braces)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/loop_partition.cc",
    "lines": [
      64
    ],
    "matched_text": "    std::size_t h1 = ObjectPtrHash{}(k.first);  // NOLINT(whitespace/braces)"
  },
  {
    "satd_id": 6638448,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " redundant: follows from the vranges\n or has already been added",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      183,
      184
    ],
    "matched_text": "    // redundant: follows from the vranges"
  },
  {
    "satd_id": 6638456,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " Simplify each inequality into the form `expr <= 0` and add to current formulas",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      291
    ],
    "matched_text": "  // Simplify each inequality into the form `expr <= 0` and add to current formulas"
  },
  {
    "satd_id": 6638474,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " we need rewrite_simplify -> canonical_simplify -> rewrite_simplify\n to help simplify things like (((y + 10) - (-1*(y - 20))) <= 0) => y - 5 <= 0\n with steps = 2 it's (y*2) - 10 <= 0",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      329,
      330,
      331
    ],
    "matched_text": "        // we need rewrite_simplify -> canonical_simplify -> rewrite_simplify"
  },
  {
    "satd_id": 6638475,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " use variables to keep the order of iteration\n so as to get rid of any non-determinism.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      103,
      104
    ],
    "matched_text": "  // use variables to keep the order of iteration"
  },
  {
    "satd_id": 6638477,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " Resulting ranges will contain ranges for the new variables and for the variables that are\n not in the inequalities->variables but are in inequalities->ranges (jac_xxx)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      507,
      508
    ],
    "matched_text": "  // Resulting ranges will contain ranges for the new variables and for the variables that are"
  },
  {
    "satd_id": 6638487,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " Don't create an itervar, just replace it everywhere with its min",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_inequality.cc",
    "lines": [
      556
    ],
    "matched_text": "        // Don't create an itervar, just replace it everywhere with its min"
  },
  {
    "satd_id": 6638490,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " Somewhere here coefficients in the results become too large, leading to overflow,\n so we use smaller initial coefficients",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_solve_linear_inequality.py",
    "lines": [
      63,
      64
    ],
    "matched_text": "    # Somewhere here coefficients in the results become too large, leading to overflow,"
  },
  {
    "satd_id": 6638503,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": "!\n * \\brief Solve linear inequalities.\n * \\param system_to_solve the variables to solve, their ranges, and a list of inequalities.\n *        The inequalities are rewritten using Fourier-Motzkin elimination.\n *        This function takes an array of (in)equalities and an array of variables, and essentially\n *        rewrites the (in)equalities into an array of (in)equalities of the following form,\n *\n *        x0 >= f0(x1, x2, ..., xn)\n *        x0 <= g0(x1, x2, ..., xn)\n *        x1 >= f1(x2, ..., xn)\n *        x1 <= g1(x2, ..., xn)\n *        ...\n *        xn >= fn()  // just a constant\n *        xn <= gn()  // just a constant\n *\n * \\return A map of variables and their solved bounds,\n *         and constrains that cannot be solved to bounds.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arith/int_solver.h",
    "lines": [
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6638506,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " pylint: disable=invalid-name,unnecessary-comprehension",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/testing.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unnecessary-comprehension"
  },
  {
    "satd_id": 6638512,
    "satd_repo": 70746484,
    "satd_sha": "151f3f5a00b5b2e2a369b9169dc8cda02e87e82a",
    "satd_text": " If it is provable that the new one is strictly better than the current best one,\n then replace it. Note that we are biased towards earlier pairs which should be simpler.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/int_constraints.cc",
    "lines": [
      145,
      146
    ],
    "matched_text": "      // If it is provable that the new one is strictly better than the current best one,"
  },
  {
    "satd_id": 6638526,
    "satd_repo": 70746484,
    "satd_sha": "a519292a18e7655df9de9f45517d28debd14a9d9",
    "satd_text": "##############################################################################\n Run the Sparse Graph\n --------------------\n Next we'll convert the graph into a sparse representation and generate\n fake sparse weights if needed. Then we'll use the same benchmarking\n script as dense to see how much faster we go! We apply a few relay passes\n to the graph to get it leveraging sparsity. First we use\n `simplify_fc_transpose` to use transposes on the weights of dense layers\n into the parameters. This makes it easier to convert to matrix multiplies\n to sparse versions. Next we apply `bsr_dense.convert` to identify all\n weight matrices that can be sparse, and automatically replace them.\n \n The `bsr_dense.convert` call below is doing the heavy lifting of identifying\n which weights in the model can be made sparse by checking if they are\n at least `sparsity_threshold` percent sparse. If so, it converts those\n weights into *Block Compressed Row Format (BSR)*. BSR is essentially\n a representation that indexes into the nonzero chunks of the tensor,\n making it easy for an algorithm to load those non-zero chunks and ignore\n the rest of the tensor. Once the sparse weights are in BSR format,\n `relay.transform.DenseToSparse` is applied to actually replace\n `relay.dense` operations with `relay.sparse_dense` calls that can be\n run faster.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_sparse.py",
    "lines": [
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6638532,
    "satd_repo": 70746484,
    "satd_sha": "a519292a18e7655df9de9f45517d28debd14a9d9",
    "satd_text": " For models besides PruneBert (which is 95% sparse), this parameter\n determines how sparse the generated weights should be. The higher\n the sparsity, the faster the result.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_sparse.py",
    "lines": [
      118,
      119,
      120
    ],
    "matched_text": "# For models besides PruneBert (which is 95% sparse), this parameter"
  },
  {
    "satd_id": 6638534,
    "satd_repo": 70746484,
    "satd_sha": "a519292a18e7655df9de9f45517d28debd14a9d9",
    "satd_text": " TVM platform identifier. Although cuda is also supported, it requires\n tuning that is outside the scope of this tutorial. Note that best\n cpu performance can be achieved by setting -mcpu appropriately for\n your specific machine.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_sparse.py",
    "lines": [
      105,
      106,
      107,
      108
    ],
    "matched_text": "# TVM platform identifier. Although cuda is also supported, it requires"
  },
  {
    "satd_id": 6638535,
    "satd_repo": 70746484,
    "satd_sha": "a519292a18e7655df9de9f45517d28debd14a9d9",
    "satd_text": "##############################################################################\n Run All the Code!\n -----------------\n And that's it! Now we'll simply call all the needed function to benchmark\n the model according to the set parameters. Note that to run this code\n you'll need to uncomment the last line first.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_sparse.py",
    "lines": [
      320,
      321,
      322,
      323,
      324,
      325
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6638540,
    "satd_repo": 70746484,
    "satd_sha": "a519292a18e7655df9de9f45517d28debd14a9d9",
    "satd_text": " Dense Model Benchmark:\n Cannot find config for target=llvm, workload=('dense_nopack.x86', ('TENSOR', (1, 768), 'float32'), ('TENSOR', (2, 768), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('dense_nopack.x86', ('TENSOR', (1, 768), 'float32'), ('TENSOR', (768, 768), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('dense_nopack.x86', ('TENSOR', (128, 3072), 'float32'), ('TENSOR', (768, 3072), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('dense_nopack.x86', ('TENSOR', (128, 768), 'float32'), ('TENSOR', (3072, 768), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('dense_nopack.x86', ('TENSOR', (128, 768), 'float32'), ('TENSOR', (768, 768), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('batch_matmul.x86', ('TENSOR', (12, 128, 128), 'float32'), ('TENSOR', (12, 64, 128), 'float32')). A fallback configuration is used, which may bring great performance regression.\n Cannot find config for target=llvm, workload=('batch_matmul.x86', ('TENSOR', (12, 128, 64), 'float32'), ('TENSOR', (12, 128, 64), 'float32')). A fallback configuration is used, which may bring great performance regression.\n Runtime:             165.26 ms           (12.83 ms)\n Block Sparse Model with 1x1 blocks:\n Runtime:             67.75 ms            (8.83 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_sparse.py",
    "lines": [
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352
    ],
    "matched_text": "# Dense Model Benchmark:"
  },
  {
    "satd_id": 6638563,
    "satd_repo": 70746484,
    "satd_sha": "6ce8a1cb5fbddf1acf0ed9e00eef2d3e5071f86f",
    "satd_text": " TODO(@junrushao1994): remove some redundant attributes",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/target_id.cc",
    "lines": [
      288
    ],
    "matched_text": "// TODO(@junrushao1994): remove some redundant attributes"
  },
  {
    "satd_id": 6638564,
    "satd_repo": 70746484,
    "satd_sha": "6ce8a1cb5fbddf1acf0ed9e00eef2d3e5071f86f",
    "satd_text": " FIXME: rename to mtriple",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/target_id.cc",
    "lines": [
      299
    ],
    "matched_text": "    .add_attr_option<String>(\"target\")  // FIXME: rename to mtriple"
  },
  {
    "satd_id": 6638584,
    "satd_repo": 70746484,
    "satd_sha": "a4ebf927e9e3b5a74a58c29a0d760c0ddfc10986",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet.py",
    "lines": [
      198
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6638584,
    "satd_repo": 70746484,
    "satd_sha": "a4ebf927e9e3b5a74a58c29a0d760c0ddfc10986",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet_3d.py",
    "lines": [
      193
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6638585,
    "satd_repo": 70746484,
    "satd_sha": "a4ebf927e9e3b5a74a58c29a0d760c0ddfc10986",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/dcgan.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6638585,
    "satd_repo": 70746484,
    "satd_sha": "a4ebf927e9e3b5a74a58c29a0d760c0ddfc10986",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet.py",
    "lines": [
      25
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6638585,
    "satd_repo": 70746484,
    "satd_sha": "a4ebf927e9e3b5a74a58c29a0d760c0ddfc10986",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet_3d.py",
    "lines": [
      23
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6638591,
    "satd_repo": 70746484,
    "satd_sha": "b979bf6a7630ada055fff2d65e1cd0f8d55bb6a0",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments"
  },
  {
    "satd_id": 6638591,
    "satd_repo": 70746484,
    "satd_sha": "b979bf6a7630ada055fff2d65e1cd0f8d55bb6a0",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/dyn/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments"
  },
  {
    "satd_id": 6638602,
    "satd_repo": 70746484,
    "satd_sha": "b979bf6a7630ada055fff2d65e1cd0f8d55bb6a0",
    "satd_text": " TODO(mbrookhart): Is it possible to run these passes JUST on the current function?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/dynamic_to_static.cc",
    "lines": [
      76
    ],
    "matched_text": "    // TODO(mbrookhart): Is it possible to run these passes JUST on the current function?"
  },
  {
    "satd_id": 6638614,
    "satd_repo": 70746484,
    "satd_sha": "bc22fb9dd9edaec263bcfa03290ad1d963ce3f56",
    "satd_text": " FIXME(tmoreau89): currently IR pass breaks when output padding != (0,0)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/vta_conv2d_transpose.py",
    "lines": [
      40
    ],
    "matched_text": "    # FIXME(tmoreau89): currently IR pass breaks when output padding != (0,0)"
  },
  {
    "satd_id": 6638628,
    "satd_repo": 70746484,
    "satd_sha": "78d79923756ea9ed4545d2faef7d514a300d3452",
    "satd_text": " TODO(yongwww): Update cuda nms to be consistent with cpu version",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/nms.py",
    "lines": [
      461
    ],
    "matched_text": "    # TODO(yongwww): Update cuda nms to be consistent with cpu version"
  },
  {
    "satd_id": 6638645,
    "satd_repo": 70746484,
    "satd_sha": "4fbfaca5fc417b09330f7592b21efdc6fb1cf51b",
    "satd_text": " Only inline trivial bindings to avoid deep expression explosion\n when we need let to construct complicated expressions.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.cc",
    "lines": [
      1563,
      1564
    ],
    "matched_text": "  // Only inline trivial bindings to avoid deep expression explosion"
  },
  {
    "satd_id": 6638697,
    "satd_repo": 70746484,
    "satd_sha": "7830561446f471c4ecd22f03044e0b640017a3a1",
    "satd_text": " TODO(@icemelon9, @jroesch): Remove this pass for now because some\n  instructions need to access to constant\n pass_seqs.push_back(transform::LiftConstants());",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      896,
      897,
      898
    ],
    "matched_text": "  // TODO(@icemelon9, @jroesch): Remove this pass for now because some"
  },
  {
    "satd_id": 6638698,
    "satd_repo": 70746484,
    "satd_sha": "074a07ede031762afb755f8b9273c0afb55c8b4a",
    "satd_text": " Currently not able to check out: If the index expression failed\n to be simplified to a RampNode",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/analysis/verify_gpu_code.cc",
    "lines": [
      138,
      139
    ],
    "matched_text": "    // Currently not able to check out: If the index expression failed"
  },
  {
    "satd_id": 6638699,
    "satd_repo": 70746484,
    "satd_sha": "074a07ede031762afb755f8b9273c0afb55c8b4a",
    "satd_text": " TODO(jcf94): Add support of detecting CUDA Misaligned Address error",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/tir/analysis/verify_gpu_code.cc",
    "lines": [
      51
    ],
    "matched_text": "    // TODO(jcf94): Add support of detecting CUDA Misaligned Address error"
  },
  {
    "satd_id": 6638738,
    "satd_repo": 70746484,
    "satd_sha": "aa84ee2c010830a4460d67d7cdb10305053f3112",
    "satd_text": " TODO: consider `new_with_params` to avoid ever allocating",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/runtime/src/graph.rs",
    "lines": [
      306
    ],
    "matched_text": "            // TODO: consider `new_with_params` to avoid ever allocating"
  },
  {
    "satd_id": 6638738,
    "satd_repo": 70746484,
    "satd_sha": "aa84ee2c010830a4460d67d7cdb10305053f3112",
    "satd_text": " TODO: consider `new_with_params` to avoid ever allocating",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/tvm-graph-rt/src/graph.rs",
    "lines": [
      308
    ],
    "matched_text": "            // TODO: consider `new_with_params` to avoid ever allocating"
  },
  {
    "satd_id": 6638745,
    "satd_repo": 70746484,
    "satd_sha": "aa84ee2c010830a4460d67d7cdb10305053f3112",
    "satd_text": " wasm doesn't support threads yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "rust/tvm-graph-rt/src/threading.rs",
    "lines": [
      178
    ],
    "matched_text": "    0 // wasm doesn't support threads yet"
  },
  {
    "satd_id": 6638789,
    "satd_repo": 70746484,
    "satd_sha": "b94e8b7290c5ced98728e730634ec73727c53c51",
    "satd_text": " Gemm convolution shape relations\n In order to run GEMM we need to block-transpose and interleave the K x N weights matrix W.\n The high level idea is to subdivide W in tiles of tile_cols x tile_rows, and transpose and\n interleave them. The final output is a [N//tile_rows, K//tile_cols, tile_rows, tile_cols]\n matrix that we call W_interleaved_t.\n\n In the following picture, we show how the first [tile_cols,tile_rows] block of W is transformed\n for tile_rows = 4 and tile_cols = 16\n\n              W[0,0,:,:]                        W_interleaved_t[0,0,:,:]\n  +-------------------------------+     +----------------------------------- +\n  |W[0,0]  W[0,1]  W[0,2]  W[0,3] |     |W[0,0]  W[1,0]  W[2,0]  ...  W[15,0]|\n  |W[1,0]  W[1,1]  W[1,2]  W[1,3] | --\\ |W[0,1]  W[1,1]  W[2,1]  ...  W[15,1]|\n  |W[2,0]  W[2,1]  W[2,2]  W[2,3] | --/ |W[0,2]  W[1,2]  W[2,2]  ...  W[15,2]|\n  |  ...     ...    ...      ...  |     |W[0,3]  W[1,3]  W[2,3]  ...  W[15,3]|\n  |  ...     ...    ...      ...  |     +------------------------------------+\n  |W[15,0] W[15,1] W[15,2] W[15,3]|\n  +-------------------------------+\n\n Tile columns is usually the direction of the reduction. So, if our target can reduce k elements\n at the time, we should set tile_cols = k.\n Tile rows is connected with the number of registers available for the given target.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/nn/convolution.h",
    "lines": [
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      407
    ],
    "matched_text": "// Gemm convolution shape relations"
  },
  {
    "satd_id": 6638806,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team) replace the usage of the vector operations by Shuffle.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/builtin.h",
    "lines": [
      502
    ],
    "matched_text": "// TODO(tvm-team) replace the usage of the vector operations by Shuffle."
  },
  {
    "satd_id": 6638812,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": "!\n * \\brief See pesudo code\n *\n *  bool isnullptr(void* handle) {\n *     return handle == nullptr\n *  }\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/builtin.h",
    "lines": [
      113,
      114,
      115,
      116,
      117,
      118,
      119
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6638816,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team) revisit the builtins below\n some of them can simply become ops with special codegen attr.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/builtin.h",
    "lines": [
      178,
      179
    ],
    "matched_text": "// TODO(tvm-team) revisit the builtins below"
  },
  {
    "satd_id": 6638820,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team) TensorCore specific intrinsics should be directly registered under\n                cuda. namespace and used through op.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/builtin.h",
    "lines": [
      435,
      436
    ],
    "matched_text": "// TODO(tvm-team) TensorCore specific intrinsics should be directly registered under"
  },
  {
    "satd_id": 6638828,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team) revisit storage sync once we have a good memory hierachy structure.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/op/builtin.cc",
    "lines": [
      122
    ],
    "matched_text": "// TODO(tvm-team) revisit storage sync once we have a good memory hierachy structure."
  },
  {
    "satd_id": 6638860,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(bohan): Print out the name by he global var in the module.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/tir_text_printer.cc",
    "lines": [
      351
    ],
    "matched_text": "    // TODO(bohan): Print out the name by he global var in the module."
  },
  {
    "satd_id": 6638861,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " Use string based dispatch to extern for backward compact\n TODO(tvm-team) replace once the new dispatching system is inplace.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/intrin_rule.h",
    "lines": [
      62,
      63
    ],
    "matched_text": "  // Use string based dispatch to extern for backward compact"
  },
  {
    "satd_id": 6638866,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team): migrate the legalization transformations as a separate\n                 set of rules in TIR that can be shared across backends.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/intrin_rule_llvm.cc",
    "lines": [
      42,
      43
    ],
    "matched_text": "// TODO(tvm-team): migrate the legalization transformations as a separate"
  },
  {
    "satd_id": 6638872,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " Register low-level builtin ops.\n TODO(tvm-team): consider make CUDA its own subfolder and create a file for low-level builtins.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/intrin_rule_cuda.cc",
    "lines": [
      186,
      187
    ],
    "matched_text": "// Register low-level builtin ops."
  },
  {
    "satd_id": 6638873,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " TODO(tvm-team) The extern function name seems to be a hack.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/schedule/schedule_postproc_rewrite_for_tensor_core.cc",
    "lines": [
      905
    ],
    "matched_text": "      // TODO(tvm-team) The extern function name seems to be a hack."
  },
  {
    "satd_id": 6638898,
    "satd_repo": 70746484,
    "satd_sha": "82d157f0b83ae17fde7bbfca14110aa2f2b80b61",
    "satd_text": " Still use legacy string based rewriting\n TODO(tvm-team): migrate the pattern application from global function look up\n to an OpAttrMap<PackedFunc>",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_intrin.cc",
    "lines": [
      58,
      59,
      60
    ],
    "matched_text": "        // Still use legacy string based rewriting"
  },
  {
    "satd_id": 6638969,
    "satd_repo": 70746484,
    "satd_sha": "55e02afc5a349139654c883842fd7b2d46f7d0a6",
    "satd_text": "! \\brief A specialization of hash map that implements the idea of array-based hash map.\n * Another reference implementation can be found [1].\n *\n * A. Overview\n *\n * DenseMapNode did several improvements over traditional separate chaining hash,\n * in terms of cache locality, memory footprints and data organization.\n *\n * A1. Implicit linked list. For better cache locality, instead of using linked list\n * explicitly for each bucket, we store list data into a single array that spans contiguously\n * in memory, and then carefully design access patterns to make sure most of them fall into\n * a single cache line.\n *\n * A2. 1-byte metadata. There is only 1 byte overhead for each slot in the array to indexing and\n * traversal. This can be divided in 3 parts.\n * 1) Reserved code: (0b11111111)_2 indicates a slot is empty; (0b11111110)_2 indicates protected,\n * which means the slot is empty but not allowed to be written.\n * 2) If not empty or protected, the highest bit is used to indicate whether data in the slot is\n * head of a linked list.\n * 3) The rest 7 bits are used as the \"next pointer\" (i.e. pointer to the next element). On 64-bit\n * architecture, an ordinary pointer can take up to 8 bytes, which is not acceptable overhead when\n * dealing with 16-byte ObjectRef pairs. Based on a commonly noticed fact that the lists are\n * relatively short (length <= 3) in hash maps, we follow [1]'s idea that only allows the pointer to\n * be one of the 126 possible values, i.e. if the next element of i-th slot is (i + x)-th element,\n * then x must be one of the 126 pre-defined values.\n *\n * A3. Data blocking. We organize the array in the way that every 16 elements forms a data block.\n * The 16-byte metadata of those 16 elements are stored together, followed by the real data, i.e.\n * 16 key-value pairs.\n *\n * B. Implementation details\n *\n * B1. Power-of-2 table size and Fibonacci Hashing. We use power-of-two as table size to avoid\n * modulo for more efficient arithmetics. To make the hash-to-slot mapping distribute more evenly,\n * we use the Fibonacci Hashing [2] trick.\n *\n * B2. Traverse a linked list in the array.\n * 1) List head. Assume Fibonacci Hashing maps a given key to slot i, if metadata at slot i\n * indicates that it is list head, then we found the head; otherwise the list is empty. No probing\n * is done in this procedure. 2) Next element. To find the next element of a non-empty slot i, we\n * look at the last 7 bits of the metadata at slot i. If they are all zeros, then it is the end of\n * list; otherwise, we know that the next element is (i + candidates[the-last-7-bits]).\n *\n * B3. InsertMaybeReHash an element. Following B2, we first traverse the linked list to see if this\n * element is in the linked list, and if not, we put it at the end by probing the next empty\n * position in one of the 126 candidate positions. If the linked list does not even exist, but the\n * slot for list head has been occupied by another linked list, we should find this intruder another\n * place.\n *\n * B4. Quadratic probing with triangle numbers. In open address hashing, it is provable that probing\n * with triangle numbers can traverse power-of-2-sized table [3]. In our algorithm, we follow the\n * suggestion in [1] that also use triangle numbers for \"next pointer\" as well as sparing for list\n * head.\n *\n * [1] https://github.com/skarupke/flat_hash_map\n * [2] https://programmingpraxis.com/2018/06/19/fibonacci-hash/\n * [3] https://fgiesen.wordpress.com/2015/02/22/triangular-numbers-mod-2n/\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/container.h",
    "lines": [
      501,
      502,
      503,
      504,
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514,
      515,
      516,
      517,
      518,
      519,
      520,
      521,
      522,
      523,
      524,
      525,
      526,
      527,
      528,
      529,
      530,
      531,
      532,
      533,
      534,
      535,
      536,
      537,
      538,
      539,
      540,
      541,
      542,
      543,
      544,
      545,
      546,
      547,
      548,
      549,
      550,
      551,
      552,
      553,
      554,
      555,
      556,
      557,
      558
    ],
    "matched_text": "/*! \\brief A specialization of hash map that implements the idea of array-based hash map."
  },
  {
    "satd_id": 6639113,
    "satd_repo": 70746484,
    "satd_sha": "eacfe890669d026c3d3aea4d03f4f773819242dd",
    "satd_text": " Initialize and memoize the module.\n Usually, we have some warmup runs. The module initialization should be\n done at this stage. Therefore, runtime overhead is not a concern.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/metadata_module.cc",
    "lines": [
      54,
      55,
      56
    ],
    "matched_text": "    // Initialize and memoize the module."
  },
  {
    "satd_id": 6639116,
    "satd_repo": 70746484,
    "satd_sha": "eacfe890669d026c3d3aea4d03f4f773819242dd",
    "satd_text": "!\n * \\file src/runtime/metadata_module.cc\n * \\brief A wrapper for initializing imported modules using metadata. This\n * module is intended to be used by various runtime in the TVM stack, i.e.\n * graph runtime, relay VM, AOT runtime, and various user defined runtimes. It\n * paves the way to separate the code and metedata, which makes compilation\n * and/or interpretation more convenient. In addition, the clear separation of\n * code and metadata significantly reduces the efforts for handling external\n * codegen and runtimes.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/metadata_module.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6639125,
    "satd_repo": 70746484,
    "satd_sha": "eacfe890669d026c3d3aea4d03f4f773819242dd",
    "satd_text": " TODO(zhiics) Skip the weights for submodule in a better way.\n We should use MetadataModule for initialization and remove\n params from set_input",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/graph_runtime.py",
    "lines": [
      165,
      166,
      167
    ],
    "matched_text": "                # TODO(zhiics) Skip the weights for submodule in a better way."
  },
  {
    "satd_id": 6639127,
    "satd_repo": 70746484,
    "satd_sha": "eacfe890669d026c3d3aea4d03f4f773819242dd",
    "satd_text": " TODO(zhiics) We should be able to completely switch to MetadataModule no\n matter whether there are external modules or not.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/build_module.cc",
    "lines": [
      458,
      459
    ],
    "matched_text": "    // TODO(zhiics) We should be able to completely switch to MetadataModule no"
  },
  {
    "satd_id": 6639191,
    "satd_repo": 70746484,
    "satd_sha": "52bf113650ef35929fba85fc73802b233dadb2d2",
    "satd_text": "######################################################################\n Leaky_ReLU\n ----------",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1983,
      1984,
      1985
    ],
    "matched_text": "#######################################################################"
  },
  {
    "satd_id": 6639208,
    "satd_repo": 70746484,
    "satd_sha": "a14a98e845f7d076e3a060442c65cfd14216f54c",
    "satd_text": " Temporary disable fp16 test",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/pytorch/test_forward.py",
    "lines": [
      872
    ],
    "matched_text": "        # Temporary disable fp16 test"
  },
  {
    "satd_id": 6639237,
    "satd_repo": 70746484,
    "satd_sha": "afaa9e492443d60df274cc762f1d1121266c50fc",
    "satd_text": " Update inputs and outputs after we visit all the nodes.\n Set dummy values for now.\n TODO: support multiple outputs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/target/coreml.py",
    "lines": [
      135,
      136,
      137
    ],
    "matched_text": "        # Update inputs and outputs after we visit all the nodes."
  },
  {
    "satd_id": 6639257,
    "satd_repo": 70746484,
    "satd_sha": "afaa9e492443d60df274cc762f1d1121266c50fc",
    "satd_text": " TODO: Support multiple outputs.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/contrib/coreml/coreml_runtime.mm",
    "lines": [
      180
    ],
    "matched_text": "      // TODO: Support multiple outputs."
  },
  {
    "satd_id": 6639276,
    "satd_repo": 70746484,
    "satd_sha": "9b775b6ffad9412ab8d04a598f7473a4cc986203",
    "satd_text": " The simply optimization replace a iteration variable with a constant\n when extent of the iteration is 1. As threaded IterVar always started from 0,\n we can just ignore this variable in this case.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      152,
      153,
      154
    ],
    "matched_text": "      // The simply optimization replace a iteration variable with a constant"
  },
  {
    "satd_id": 6639370,
    "satd_repo": 70746484,
    "satd_sha": "0abcad137448d6ef786fa90010d8320193c68f6f",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/batch_matmul.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable,unused-argument"
  },
  {
    "satd_id": 6639422,
    "satd_repo": 70746484,
    "satd_sha": "ed583092dbeb4f1b0458ad015f607f0746d61e80",
    "satd_text": " pylint:disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/sparse.py",
    "lines": [
      57
    ],
    "matched_text": "    # pylint:disable=unused-argument"
  },
  {
    "satd_id": 6639437,
    "satd_repo": 70746484,
    "satd_sha": "9f79199822232ccb9d0b18cd9250dccc22fa3dd0",
    "satd_text": " TODO(mbrookhart): expand testing when adding more backend schedules",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_op_level3.py",
    "lines": [
      692
    ],
    "matched_text": "        # TODO(mbrookhart): expand testing when adding more backend schedules"
  },
  {
    "satd_id": 6639440,
    "satd_repo": 70746484,
    "satd_sha": "aa808570dbee19a178130c0f7d9b397ff7f51f0e",
    "satd_text": " TODO(yongwww): move the compute into topi",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/tensor/transform.cc",
    "lines": [
      1881
    ],
    "matched_text": "  // TODO(yongwww): move the compute into topi"
  },
  {
    "satd_id": 6639463,
    "satd_repo": 70746484,
    "satd_sha": "6ae439c8c58dd0118d2f2c5d1c4bcb650df47104",
    "satd_text": " TODO(tvm-team): consider make a better text format for producer.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/tir_text_printer.cc",
    "lines": [
      295
    ],
    "matched_text": "  // TODO(tvm-team): consider make a better text format for producer."
  },
  {
    "satd_id": 6639464,
    "satd_repo": 70746484,
    "satd_sha": "6ae439c8c58dd0118d2f2c5d1c4bcb650df47104",
    "satd_text": " TODO(tvm-team): string matching is dangerous, consider other means.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/schedule/schedule_postproc_rewrite_for_tensor_core.cc",
    "lines": [
      531
    ],
    "matched_text": "    // TODO(tvm-team): string matching is dangerous, consider other means."
  },
  {
    "satd_id": 6639501,
    "satd_repo": 70746484,
    "satd_sha": "490510d463bd760fc474f956a3098b88ebf7260a",
    "satd_text": " careful: cg will hold a naked pointer reference to ctx, so it should\n have a shorter lifetime than the ctx.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_nvptx.cc",
    "lines": [
      266,
      267
    ],
    "matched_text": "  // careful: cg will hold a naked pointer reference to ctx, so it should"
  },
  {
    "satd_id": 6639519,
    "satd_repo": 70746484,
    "satd_sha": "910edef099705926b7af14aa3ae7b4c33920ace9",
    "satd_text": " Only keep the item we want for the child node.\n FIXME(@comaniac): The other items should still be requried for the primary outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen.cc",
    "lines": [
      73,
      74
    ],
    "matched_text": "    // Only keep the item we want for the child node."
  },
  {
    "satd_id": 6639519,
    "satd_repo": 70746484,
    "satd_sha": "910edef099705926b7af14aa3ae7b4c33920ace9",
    "satd_text": " Only keep the item we want for the child node.\n FIXME(@comaniac): The other items should still be requried for the primary outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/dnnl/codegen.cc",
    "lines": [
      161,
      162
    ],
    "matched_text": "    // Only keep the item we want for the child node."
  },
  {
    "satd_id": 6639585,
    "satd_repo": 70746484,
    "satd_sha": "7b74a8672e1e40e7541c0007d8628586c62277e8",
    "satd_text": " Ignore the first mask operand and remove the last\n redundant warp_size..",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_llvm.cc",
    "lines": [
      820,
      821
    ],
    "matched_text": "    // Ignore the first mask operand and remove the last"
  },
  {
    "satd_id": 6639592,
    "satd_repo": 70746484,
    "satd_sha": "7b74a8672e1e40e7541c0007d8628586c62277e8",
    "satd_text": " A warp of 32 threads performs a row reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/softmax.py",
    "lines": [
      74
    ],
    "matched_text": "        # A warp of 32 threads performs a row reduction."
  },
  {
    "satd_id": 6639593,
    "satd_repo": 70746484,
    "satd_sha": "7b74a8672e1e40e7541c0007d8628586c62277e8",
    "satd_text": " The nvptx backend only supports 32-bits warp shuffle instructions.\n\n TODO(tvm-team) Fix nvptx codegen or deprecate nvptx backend.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/cuda/softmax.py",
    "lines": [
      57,
      58,
      59
    ],
    "matched_text": "    # The nvptx backend only supports 32-bits warp shuffle instructions."
  },
  {
    "satd_id": 6639595,
    "satd_repo": 70746484,
    "satd_sha": "4c976a6acc8516067d340878f3905552d465f613",
    "satd_text": " we will compare the already simplified result with the constraint,\n so simplify the constarint as well",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.cc",
    "lines": [
      214,
      215
    ],
    "matched_text": "  // we will compare the already simplified result with the constraint,"
  },
  {
    "satd_id": 6639629,
    "satd_repo": 70746484,
    "satd_sha": "e55f9ff115e2e9364e8ed8b3eeb44dbbc1894eb1",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      695
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6639629,
    "satd_repo": 70746484,
    "satd_sha": "e55f9ff115e2e9364e8ed8b3eeb44dbbc1894eb1",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/correlation.py",
    "lines": [
      64
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6639634,
    "satd_repo": 70746484,
    "satd_sha": "e55f9ff115e2e9364e8ed8b3eeb44dbbc1894eb1",
    "satd_text": " pylint: disable=unnecessary-lambda, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/correlation.py",
    "lines": [
      61
    ],
    "matched_text": "    # pylint: disable=unnecessary-lambda, invalid-name"
  },
  {
    "satd_id": 6639646,
    "satd_repo": 70746484,
    "satd_sha": "4bde554109c1dce6044eaa10b62d4aad96352a9b",
    "satd_text": " The partitioner doesn't replace duplicates, so we use two copies of the function",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_dataflow_pattern.py",
    "lines": [
      920
    ],
    "matched_text": "    # The partitioner doesn't replace duplicates, so we use two copies of the function"
  },
  {
    "satd_id": 6639713,
    "satd_repo": 70746484,
    "satd_sha": "cafb49846d57292a5b9a065c3d3b95ab5edf0806",
    "satd_text": " TODO(mbrookhart): When OpNode Attrs move from TVMRetValue to the Object system, remove this\n and replace the whole thing with a Visitor-based approach",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/dataflow_matcher.cc",
    "lines": [
      145,
      146
    ],
    "matched_text": "    // TODO(mbrookhart): When OpNode Attrs move from TVMRetValue to the Object system, remove this"
  },
  {
    "satd_id": 6639719,
    "satd_repo": 70746484,
    "satd_sha": "019da5dae15d2bd13536673ab689203c799629f0",
    "satd_text": "#########################################################################\n Measure performance\n -------------------\n Here we give an example of how to measure performance of TVM compiled models.\n should be bigger to make the measurement more accurate",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized_tflite.py",
    "lines": [
      216,
      217,
      218,
      219,
      220
    ],
    "matched_text": "##########################################################################"
  },
  {
    "satd_id": 6639732,
    "satd_repo": 70746484,
    "satd_sha": "019da5dae15d2bd13536673ab689203c799629f0",
    "satd_text": "#####################################################################\n .. note::\n\n   Unless the hardware has special support for fast 8 bit instructions, quantized models are\n   not expected to be any faster than FP32 models. Without fast 8 bit instructions, TVM does\n   quantized convolution in 16 bit, even if the model itself is 8 bit.\n\n   For x86, the best performance can be achieved on CPUs with AVX512 instructions set.\n   In this case, TVM utilizes the fastest available 8 bit instructions for the given target.\n   This includes support for the VNNI 8 bit dot product instruction (CascadeLake or newer).\n   For EC2 C5.12x large instance, TVM latency for this tutorial is ~2 ms.\n\n   Intel conv2d NCHWc schedule on ARM gives better end-to-end latency compared to ARM NCHW\n   conv2d spatial pack schedule for many TFLite networks. ARM winograd performance is higher but\n   it has a high memory footprint.\n\n   Moreover, the following general tips for CPU performance equally applies:\n\n    * Set the environment variable TVM_NUM_THREADS to the number of physical cores\n    * Choose the best target for your hardware, such as \"llvm -mcpu=skylake-avx512\" or\n      \"llvm -mcpu=cascadelake\" (more CPUs with AVX512 would come in the future)\n    * Perform autotuning - `Auto-tuning a convolution network for x86 CPU\n      <https://tvm.apache.org/docs/tutorials/autotvm/tune_relay_x86.html>`_.\n    * To get best inference performance on ARM CPU, change target argument according to your\n      device and follow `Auto-tuning a convolution network for ARM CPU\n      <https://tvm.apache.org/docs/tutorials/autotvm/tune_relay_arm.html>`_.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized_tflite.py",
    "lines": [
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6639734,
    "satd_repo": 70746484,
    "satd_sha": "019da5dae15d2bd13536673ab689203c799629f0",
    "satd_text": "#####################################################################\n Load a test image\n -----------------",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tutorials/frontend/deploy_prequantized_tflite.py",
    "lines": [
      88,
      89,
      90
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6639757,
    "satd_repo": 70746484,
    "satd_sha": "e180b6614a31768d7ddf04df96c989037d25b88e",
    "satd_text": " Redirect to the TVMArgs version\n It is not the most efficient way, but CreateObject is not meant to be used\n in a fast code-path and is mainly reserved as a flexible API for frontends.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/node/reflection.cc",
    "lines": [
      229,
      230,
      231
    ],
    "matched_text": "  // Redirect to the TVMArgs version"
  },
  {
    "satd_id": 6639767,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " There could be compiler_end annotations on tuples\n If the corresponding region is having multiple compiler_ends,\n this would lead to creation of tuples of tuples.\n Thus, we flatten the tuples by transfering the compiler_end to\n the tuple inputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/partition_graph.cc",
    "lines": [
      468,
      469,
      470,
      471,
      472
    ],
    "matched_text": "    // There could be compiler_end annotations on tuples"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1029
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1085
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1089
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1160
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1198
    ],
    "matched_text": "    def foo(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639772,
    "satd_repo": 70746484,
    "satd_sha": "c286b2dff061f32a7bc6d43f99921954ade4deb3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1202
    ],
    "matched_text": "    def foo(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6639838,
    "satd_repo": 70746484,
    "satd_sha": "8d988dfc61e84dd2d6f883c9136614cdbe90b9f4",
    "satd_text": " Check for assume intrinsics. This isn't 100% accurate, since it just\n checks if the llvm.assume is there, but detailed check would require\n a much more detailed analysis of the LLVM IR.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_target_codegen_llvm.py",
    "lines": [
      487,
      488,
      489
    ],
    "matched_text": "    # Check for assume intrinsics. This isn't 100% accurate, since it just"
  },
  {
    "satd_id": 6639839,
    "satd_repo": 70746484,
    "satd_sha": "e7e3c58b79cb0b660d7d3906c3a43f7b448cceb0",
    "satd_text": " alloc was not already checked",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/target_data_layout_encoder.cc",
    "lines": [
      38
    ],
    "matched_text": "    // alloc was not already checked"
  },
  {
    "satd_id": 6639848,
    "satd_repo": 70746484,
    "satd_sha": "1c13ab298639ce7b6d021178c20ee58087d43b0e",
    "satd_text": " No constraints on the thread reduction step. It may have redundent\n computation for rare cases. TODO(tvm-team): revisit this.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/operation/cross_thread_reduction.cc",
    "lines": [
      169,
      170
    ],
    "matched_text": "  // No constraints on the thread reduction step. It may have redundent"
  },
  {
    "satd_id": 6639850,
    "satd_repo": 70746484,
    "satd_sha": "1c13ab298639ce7b6d021178c20ee58087d43b0e",
    "satd_text": "\n Cross thread reduction transformation.\n\n The input loop nest in generic form (single reduction/thread case)\n\n let m be the reduction extent\n let N be the thread extent\n let input_pred be the predicate on the reduction\n\n B[..] = 0\n for (tid, 0, N)\n   for (i, 0, floordiv(m+N-1, N))\n     if (i + tid * floordiv(m+N-1, N) < m)\n       if (input_pred)\n         B[..] = op(B[..], A[i + tid  * floordiv(m+N-1,N)])\n\n The threaded reduction looks like\n\n (1) normal reductions (leaves)\n for (i, 0, floordiv(m+N-1, N))\n   if (i + tid * floordiv(m+N-1, N) < m)\n     if (input_pred)\n       B_temp[0] = op(B_temp[0], A[i + tid  * floordiv(m+N-1,N)])\n\n (2) threaded reduction does not require predicates as an identity\n     element will be filled if out of bounds.\n\n tvm_thread_allreduce(size, B_temp, (bool)1, tid)\n\n The last step is to write the final reduction variable,\n which should be predicated by the existing input_pred if any\n The consequence is that input_pred should be independent of\n the reduction axis. Otherwise, we need to seperate it into\n dependent part and independent one.\n\n (3) write back\n if (input_pred)\n    B[..] = B_temp[0]\n\n In summary, we are going to need two predicates\n\n * the original input_pred from reduction itself\n\n * the normal reduction axis predicate\n     normal_pred = (i + tid * floordiv(m+N-1,N)) < m\n   this predicate depends on the normal reduction variable.\n\n input_pred will be applied to both normal reduction and\n the writeback step.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/operation/cross_thread_reduction.cc",
    "lines": [
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79
    ],
    "matched_text": "//"
  },
  {
    "satd_id": 6640010,
    "satd_repo": 70746484,
    "satd_sha": "1b4c100bd75d611799333905c5a90aff2288d1a7",
    "satd_text": " The paritioner doesn't replace duplicates, so we use two copies of the function",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_dataflow_pattern.py",
    "lines": [
      811
    ],
    "matched_text": "    # The paritioner doesn't replace duplicates, so we use two copies of the function"
  },
  {
    "satd_id": 6640037,
    "satd_repo": 70746484,
    "satd_sha": "674f58aea51504d0bc6dce071ac3e2e5172501d3",
    "satd_text": " Lift constants to the top-level of the block to simplify VM code generation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      891
    ],
    "matched_text": "  // Lift constants to the top-level of the block to simplify VM code generation."
  },
  {
    "satd_id": 6640134,
    "satd_repo": 70746484,
    "satd_sha": "29ae608baabb673fb0b2d3ced9321f0e1798f72e",
    "satd_text": "!\n * Implementation of a subset of pthread API for single-threaded execution.\n *\n * They main idea is that the thread function (\"start_routine\" in the call\n * to pthread_create) is executed immediately. When pthread_create returns,\n * the thread function has already finished.\n *\n * Since the thread routine can itself call pthread_create, it is possible\n * to have multiple threads existing at the same time, although only the\n * last one is running.\n *\n * There are two main things that need to be taken care of:\n * - thread-specific data, i.e. pthread_setspecific, pthread_getspecific,\n *   and the handling of thread keys,\n * - handling of thread return values.\n *\n * Threads are identified by thread ids (of type pthread_t). The main process\n * thread has the id of 0, the remaining threads have ids starting at 1 and\n * incrementing by 1. For each thread there is some data (thread_info_t)\n * associated with it, and stored in \"thread_data\" map. When a thread\n * terminates, the corresponding entry from \"thread_data\" cannot be removed\n * until the return value is claimed (pthread_join), unless it is explicitly\n * discarded (pthread_detach). When a new thread is created, it gets the\n * first available id for which there is no entry in \"thread_data\". This\n * could be an id that was never allocated, or an id that was used, but\n * has since been removed from the map.\n * A thread can terminate through thread_exit. This means that when the\n * thread function calls thread_exit, the execution should return to the\n * pthread_create call that ran it. This is implemented via setjmp/longjmp\n * (neither longjmp nor pthread_exit unwind the stack).\n *\n * Any mutexes or condition variables cannot block, or else it would cause\n * a deadlock. Since there is only one thread running at a time, locking\n * a mutex or waiting for a condition always succeeds (returns immediately).\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/sim/driver/fake_pthread.cc",
    "lines": [
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6640151,
    "satd_repo": 70746484,
    "satd_sha": "29ae608baabb673fb0b2d3ced9321f0e1798f72e",
    "satd_text": " For now, just allocation sequentially. This needs to be improved to use a\n free list.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/sim/driver/sim_device.cc",
    "lines": [
      192,
      193
    ],
    "matched_text": "// For now, just allocation sequentially. This needs to be improved to use a"
  },
  {
    "satd_id": 6640153,
    "satd_repo": 70746484,
    "satd_sha": "29ae608baabb673fb0b2d3ced9321f0e1798f72e",
    "satd_text": " FIXME(kparzysz-quic): query the cfg register to compute the VTCM base.\n This works now.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/sim/driver/sim_device.cc",
    "lines": [
      139,
      140
    ],
    "matched_text": "// FIXME(kparzysz-quic): query the cfg register to compute the VTCM base."
  },
  {
    "satd_id": 6640187,
    "satd_repo": 70746484,
    "satd_sha": "cdc7ae492e1ce30f6080d9567eecf89c97ed939f",
    "satd_text": " Perhaps it would be more useful to use a staging buffer?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/webgpu.ts",
    "lines": [
      237
    ],
    "matched_text": "    // Perhaps it would be more useful to use a staging buffer?"
  },
  {
    "satd_id": 6640188,
    "satd_repo": 70746484,
    "satd_sha": "cdc7ae492e1ce30f6080d9567eecf89c97ed939f",
    "satd_text": " Perhaps it would be more useful to resuse a staging buffer?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/webgpu.ts",
    "lines": [
      266
    ],
    "matched_text": "    // Perhaps it would be more useful to resuse a staging buffer?"
  },
  {
    "satd_id": 6640210,
    "satd_repo": 70746484,
    "satd_sha": "cdc7ae492e1ce30f6080d9567eecf89c97ed939f",
    "satd_text": "* Whether it is a temporary view that can become invalid after the call. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/runtime.ts",
    "lines": [
      290
    ],
    "matched_text": "  /** Whether it is a temporary view that can become invalid after the call. */"
  },
  {
    "satd_id": 6640235,
    "satd_repo": 70746484,
    "satd_sha": "f939c61805e77f1f63ec44676c4e936a94055908",
    "satd_text": " TODO add workspace alloc/free stress test",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6640247,
    "satd_repo": 70746484,
    "satd_sha": "64c6795b3adb1287f68aec6ae0b3fd5611359943",
    "satd_text": " TODO(tvm-team) sub-warp reduction support.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      215
    ],
    "matched_text": "      // TODO(tvm-team) sub-warp reduction support."
  },
  {
    "satd_id": 6640253,
    "satd_repo": 70746484,
    "satd_sha": "64c6795b3adb1287f68aec6ae0b3fd5611359943",
    "satd_text": "\n This is an optimization. For small reduction sizes, it may be beneficial\n for a single warp to performance the entire reduction. No trips to shared\n memory and no cross warp synchronizations are required.\n The following code emits the reduction as follows:\n\n Allocate reduction vars v[i], i = 0..size-1\n\n for offset from 16 to 1 by 2\n\n   a    <- load(v[i])\n   b    <- shuffle_down(load(v[i], offset))\n   v[i] <- reduction(a, b)\n\n broadcast results from lane 0 to all other lanes and store\n the final reduction result to the proper location.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212
    ],
    "matched_text": "    //"
  },
  {
    "satd_id": 6640260,
    "satd_repo": 70746484,
    "satd_sha": "64c6795b3adb1287f68aec6ae0b3fd5611359943",
    "satd_text": "\n This is the index to the reduction variable, one reduction\n variable per warp. Local scope seems easier to reason without\n relying on a pattern match pass to fix it later.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      217,
      218,
      219,
      220
    ],
    "matched_text": "      //"
  },
  {
    "satd_id": 6640264,
    "satd_repo": 70746484,
    "satd_sha": "64c6795b3adb1287f68aec6ae0b3fd5611359943",
    "satd_text": " Check if this is a reduction on threadIdx.x and its extent matches\n the warp size.\n\n TODO(tvm-team) reduction with a sub-warp of 8 or 16 threads.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      498,
      499,
      500,
      501
    ],
    "matched_text": "  // Check if this is a reduction on threadIdx.x and its extent matches"
  },
  {
    "satd_id": 6640265,
    "satd_repo": 70746484,
    "satd_sha": "64c6795b3adb1287f68aec6ae0b3fd5611359943",
    "satd_text": " Load reduction values, no synchronization needed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/lower_thread_allreduce.cc",
    "lines": [
      255
    ],
    "matched_text": "        // Load reduction values, no synchronization needed."
  },
  {
    "satd_id": 6640280,
    "satd_repo": 70746484,
    "satd_sha": "ae7e0a17633a76db570e43238669baad0c5d8741",
    "satd_text": "! \\brief Map from Var to Doc ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/text_printer.h",
    "lines": [
      258
    ],
    "matched_text": "  /*! \\brief Map from Var to Doc */"
  },
  {
    "satd_id": 6640284,
    "satd_repo": 70746484,
    "satd_sha": "ae7e0a17633a76db570e43238669baad0c5d8741",
    "satd_text": "! \\brief Map from Buffer to Doc ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/text_printer.h",
    "lines": [
      260
    ],
    "matched_text": "  /*! \\brief Map from Buffer to Doc */"
  },
  {
    "satd_id": 6640370,
    "satd_repo": 70746484,
    "satd_sha": "702fd0f0f4ef283dedac3e65e71455ca4661a8e3",
    "satd_text": " eslint-disable no-unused-vars ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/emcc/preload.js",
    "lines": [
      19
    ],
    "matched_text": "/* eslint-disable no-unused-vars */"
  },
  {
    "satd_id": 6640373,
    "satd_repo": 70746484,
    "satd_sha": "702fd0f0f4ef283dedac3e65e71455ca4661a8e3",
    "satd_text": " --- APIs to be implemented by the frontend. ---",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/emcc/tvmjs_support.cc",
    "lines": [
      66
    ],
    "matched_text": "// --- APIs to be implemented by the frontend. ---"
  },
  {
    "satd_id": 6640404,
    "satd_repo": 70746484,
    "satd_sha": "702fd0f0f4ef283dedac3e65e71455ca4661a8e3",
    "satd_text": "*\n   * Maintains a table of FTVMWasmPackedCFunc that the C part\n   * can call via TVMWasmPackedCFunc.\n   *\n   * We maintain a separate table so that we can have un-limited amount\n   * of functions that do not maps to the address space.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/environment.ts",
    "lines": [
      71,
      72,
      73,
      74,
      75,
      76,
      77
    ],
    "matched_text": "  /**"
  },
  {
    "satd_id": 6640426,
    "satd_repo": 70746484,
    "satd_sha": "702fd0f0f4ef283dedac3e65e71455ca4661a8e3",
    "satd_text": "*\n   * Rest the call stack so that it can be reused again.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/memory.ts",
    "lines": [
      249,
      250,
      251
    ],
    "matched_text": "  /**"
  },
  {
    "satd_id": 6640429,
    "satd_repo": 70746484,
    "satd_sha": "702fd0f0f4ef283dedac3e65e71455ca4661a8e3",
    "satd_text": "* List of temporay arguments that can be disposed during reset. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/src/memory.ts",
    "lines": [
      207
    ],
    "matched_text": "  /** List of temporay arguments that can be disposed during reset. */"
  },
  {
    "satd_id": 6640576,
    "satd_repo": 70746484,
    "satd_sha": "b3730e575ac0ab4a54fe6984bde35408e93b5e6f",
    "satd_text": "TODO: Change the output shape calculation based on keep_dim option",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      1355
    ],
    "matched_text": "        #TODO: Change the output shape calculation based on keep_dim option"
  },
  {
    "satd_id": 6640582,
    "satd_repo": 70746484,
    "satd_sha": "e2bd43b6f728d4d0ca2659dcf73da74294655133",
    "satd_text": "!\n   * \\brief Whether the session is a local session and we can directly\n   *        the data handle returned by the session and treat it as pointer\n   *        to the local memory.\n   *\n   * This information is useful for RPC server to directly copy into the\n   * local memory without creating a temporary buffer.\n   *\n   * \\return Whether it is a local session.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.h",
    "lines": [
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6640586,
    "satd_repo": 70746484,
    "satd_sha": "4c9724dc295bf66b8b4e8b2be8dff9f875852d39",
    "satd_text": " shrink too large temporary buffer to\n avoid out of memory on some embedded devices",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/support/ring_buffer.h",
    "lines": [
      72,
      73
    ],
    "matched_text": "      // shrink too large temporary buffer to"
  },
  {
    "satd_id": 6640597,
    "satd_repo": 70746484,
    "satd_sha": "95e06b3ec999da03e554cae7c81c257f3755fb41",
    "satd_text": "! \\brief Whether we are in a state that allows clean shutdown. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/minrpc/minrpc_server.h",
    "lines": [
      591
    ],
    "matched_text": "  /*! \\brief Whether we are in a state that allows clean shutdown. */"
  },
  {
    "satd_id": 6640602,
    "satd_repo": 70746484,
    "satd_sha": "95e06b3ec999da03e554cae7c81c257f3755fb41",
    "satd_text": " Internal allocator that redirects alloc to TVM's C API.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/minrpc/minrpc_server.h",
    "lines": [
      464
    ],
    "matched_text": "  // Internal allocator that redirects alloc to TVM's C API."
  },
  {
    "satd_id": 6640631,
    "satd_repo": 70746484,
    "satd_sha": "95e06b3ec999da03e554cae7c81c257f3755fb41",
    "satd_text": "! \\return Whether we can perform a clean shutdown ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_endpoint.cc",
    "lines": [
      99
    ],
    "matched_text": "  /*! \\return Whether we can perform a clean shutdown */"
  },
  {
    "satd_id": 6640722,
    "satd_repo": 70746484,
    "satd_sha": "95e06b3ec999da03e554cae7c81c257f3755fb41",
    "satd_text": " scan and check whether we need rewrite these arguments\n to their remote variant.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_module.cc",
    "lines": [
      49,
      50
    ],
    "matched_text": "    // scan and check whether we need rewrite these arguments"
  },
  {
    "satd_id": 6640782,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO: actually parse -mcpu",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/target/arm_isa.py",
    "lines": [
      29
    ],
    "matched_text": "        # TODO: actually parse -mcpu"
  },
  {
    "satd_id": 6640787,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO add more schedule opts (similar to the NHWC template)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct.py",
    "lines": [
      166
    ],
    "matched_text": "    # TODO add more schedule opts (similar to the NHWC template)"
  },
  {
    "satd_id": 6640791,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO should we add a max_factor attr to these splits?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct.py",
    "lines": [
      69
    ],
    "matched_text": "    # TODO should we add a max_factor attr to these splits?"
  },
  {
    "satd_id": 6640795,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " pylint: disable=unused-variable\n pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct.py",
    "lines": [
      117,
      118
    ],
    "matched_text": "        kernel = conv.input_tensors[1]  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640795,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " pylint: disable=unused-variable\n pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct_simd.py",
    "lines": [
      134,
      135
    ],
    "matched_text": "        kernel = conv.input_tensors[1]  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640804,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " pylint: disable=unused-variable\n pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct.py",
    "lines": [
      117,
      118
    ],
    "matched_text": "        kernel = conv.input_tensors[1]  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640804,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " pylint: disable=unused-variable\n pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/conv2d/direct_simd.py",
    "lines": [
      134,
      135
    ],
    "matched_text": "        kernel = conv.input_tensors[1]  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640808,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): are there any SIMD tricks to zero out arrays quickly?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/micro_kernel/gemm.py",
    "lines": [
      113
    ],
    "matched_text": "    # TODO(weberlo, areusch): are there any SIMD tricks to zero out arrays quickly?"
  },
  {
    "satd_id": 6640809,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): support more dtypes?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/micro_kernel/gemm.py",
    "lines": [
      50
    ],
    "matched_text": "    # TODO(weberlo, areusch): support more dtypes?"
  },
  {
    "satd_id": 6640813,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " we generate a unique ID for every intrinsic definition, to prevent name\n collisions in the generated source (e.g., if there are multiple operators\n in the same module that use the same intrinsic)\n\n TODO(weberlo, areusch): to cut down on memory usage, we should cache each intrinsic\n instantiation and include it only once, eliminating the need for unique\n IDs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/cortex_m7/micro_kernel/gemm.py",
    "lines": [
      33,
      34,
      35,
      36,
      37,
      38,
      39
    ],
    "matched_text": "    # we generate a unique ID for every intrinsic definition, to prevent name"
  },
  {
    "satd_id": 6640822,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINT(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      56
    ],
    "matched_text": "  char *p = (char*) s;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640822,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINT(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      58
    ],
    "matched_text": "    *p = (char) c;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640822,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINT(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      73
    ],
    "matched_text": "  const char *from_pp = (char*) from;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640822,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINT(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      77
    ],
    "matched_text": "  char *to_pp = (char*) to;  // NOLINT(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640823,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): compiler errors say volatile qualifier is discarded.\n should we just get rid of em?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      35,
      36
    ],
    "matched_text": "// TODO(weberlo, areusch): compiler errors say volatile qualifier is discarded."
  },
  {
    "satd_id": 6640824,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINTNEXTLINE(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      67
    ],
    "matched_text": "  // NOLINTNEXTLINE(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640824,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOLINTNEXTLINE(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      82
    ],
    "matched_text": "  // NOLINTNEXTLINE(readability/casting): linter is configured for c++"
  },
  {
    "satd_id": 6640825,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): will need to factor memmove calls into workspace size calculation\n NOLINTNEXTLINE(readability/casting): linter is configured for c++",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_device_dylib_redirect.c",
    "lines": [
      66,
      67
    ],
    "matched_text": "  // TODO(weberlo, areusch): will need to factor memmove calls into workspace size calculation"
  },
  {
    "satd_id": 6640829,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): move defines into header\n TODO(weberlo, areusch): unify TASK_QUEUE_SIZE and MicroSession::kTaskQueueCapacity.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_runtime.c",
    "lines": [
      37,
      38
    ],
    "matched_text": "// TODO(weberlo, areusch): move defines into header"
  },
  {
    "satd_id": 6640830,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " store the *end* of the alloc, so we can restore the WS pointer when freeing",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_runtime.c",
    "lines": [
      135
    ],
    "matched_text": "  // store the *end* of the alloc, so we can restore the WS pointer when freeing"
  },
  {
    "satd_id": 6640831,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): could you possibly have utvm_alloc_idx pointing to a NULL entry in\n this branch?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_runtime.c",
    "lines": [
      170,
      171
    ],
    "matched_text": "      // TODO(weberlo, areusch): could you possibly have utvm_alloc_idx pointing to a NULL entry in"
  },
  {
    "satd_id": 6640832,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): add dev type check",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_runtime.c",
    "lines": [
      143
    ],
    "matched_text": "  // TODO(weberlo, areusch): add dev type check"
  },
  {
    "satd_id": 6640837,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n * \\brief TODO\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/host_driven/utvm_runtime.h",
    "lines": [
      35,
      36,
      37
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6640837,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n * \\brief TODO\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      154,
      155,
      156
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6640839,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n * \\brief Stop the on-device timer.\n * TODO(areusch): Use an SI specification of timer units here.\n * \\param err Receives a UTVMReturnCode indicating the outcome of the operation.\n * \\return elapsed time since UTVMTimerStart returned, in device timer ticks.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_driven/utvm_runtime.h",
    "lines": [
      78,
      79,
      80,
      81,
      82,
      83
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6640846,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): just get rid of `TargetPtr`.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_common.h",
    "lines": [
      145
    ],
    "matched_text": "// TODO(weberlo, areusch): just get rid of `TargetPtr`."
  },
  {
    "satd_id": 6640855,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo): Reading internal data structure is hacky.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      350
    ],
    "matched_text": "    // TODO(weberlo): Reading internal data structure is hacky."
  },
  {
    "satd_id": 6640856,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo): remove this func",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      638
    ],
    "matched_text": "    // TODO(weberlo): remove this func"
  },
  {
    "satd_id": 6640861,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo): this should be remedied by using interrupts to accumulate the\n timer into a larger datatype (ARM timers are only 24 bits)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      526,
      527
    ],
    "matched_text": "        // TODO(weberlo): this should be remedied by using interrupts to accumulate the"
  },
  {
    "satd_id": 6640864,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(areusch): should be |=",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      251
    ],
    "matched_text": "    // TODO(areusch): should be |="
  },
  {
    "satd_id": 6640864,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(areusch): should be |=",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      309
    ],
    "matched_text": "    // TODO(areusch): should be |="
  },
  {
    "satd_id": 6640865,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo): switch over entirely to error codes that expand to error\n messages on the host side.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      505,
      506
    ],
    "matched_text": "// TODO(weberlo): switch over entirely to error codes that expand to error"
  },
  {
    "satd_id": 6640867,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n   * \\brief The opaque data pointer points to the allocated data.\n   *  This will be CUDA device pointer or cl_mem handle in OpenCL.\n   *  This pointer is always aligns to 256 bytes as in CUDA.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      358,
      359,
      360,
      361,
      362
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6640867,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n   * \\brief The opaque data pointer points to the allocated data.\n   *  This will be CUDA device pointer or cl_mem handle in OpenCL.\n   *  This pointer is always aligns to 256 bytes as in CUDA.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      405,
      406,
      407,
      408,
      409
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6640869,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO hack ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      264
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640869,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO hack ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      266
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640869,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO hack ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      268
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640872,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "!\n   * \\brief TODO\n   ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      154,
      155,
      156
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6640875,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " todo having this decoupled from the value in utvm_runtime.c gives me stress dreams",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      71
    ],
    "matched_text": "  // todo having this decoupled from the value in utvm_runtime.c gives me stress dreams"
  },
  {
    "satd_id": 6640876,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo): we don't even need an allocator mechanism for the args\n section. there's only ever one allocation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      262,
      263
    ],
    "matched_text": "  // TODO(weberlo): we don't even need an allocator mechanism for the args"
  },
  {
    "satd_id": 6640878,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      256
    ],
    "matched_text": "  /*! \\brief TODO */"
  },
  {
    "satd_id": 6640878,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      260
    ],
    "matched_text": "  /*! \\brief TODO */"
  },
  {
    "satd_id": 6640878,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      264
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640878,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      266
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640878,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": "! \\brief TODO ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      268
    ],
    "matched_text": "  /*! \\brief TODO hack */"
  },
  {
    "satd_id": 6640879,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " NOTE: The OS pipe buffer must be able to handle a line long enough to\n print this transfer request.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/openocd_low_level_device.cc",
    "lines": [
      210,
      211
    ],
    "matched_text": "  // NOTE: The OS pipe buffer must be able to handle a line long enough to"
  },
  {
    "satd_id": 6640880,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): this can mask the exception thrown by slot allocation... even though\n that doesn't make sense.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/target_data_layout_encoder.h",
    "lines": [
      181,
      182
    ],
    "matched_text": "  // TODO(weberlo, areusch): this can mask the exception thrown by slot allocation... even though"
  },
  {
    "satd_id": 6640881,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO(weberlo, areusch): Handle endianness.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/target_data_layout_encoder.h",
    "lines": [
      33
    ],
    "matched_text": "// TODO(weberlo, areusch): Handle endianness."
  },
  {
    "satd_id": 6640890,
    "satd_repo": 70746484,
    "satd_sha": "8d7249688771bb6806595931586d95648036f383",
    "satd_text": " TODO add workspace alloc/free stress test",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_runtime_micro.py",
    "lines": [
      342
    ],
    "matched_text": "# TODO add workspace alloc/free stress test"
  },
  {
    "satd_id": 6640897,
    "satd_repo": 70746484,
    "satd_sha": "046b0d98a08153a4829a12cc81a4fa856be6efcd",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1029
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640897,
    "satd_repo": 70746484,
    "satd_sha": "046b0d98a08153a4829a12cc81a4fa856be6efcd",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1085
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640897,
    "satd_repo": 70746484,
    "satd_sha": "046b0d98a08153a4829a12cc81a4fa856be6efcd",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1089
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640897,
    "satd_repo": 70746484,
    "satd_sha": "046b0d98a08153a4829a12cc81a4fa856be6efcd",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1160
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6640900,
    "satd_repo": 70746484,
    "satd_sha": "95a816c9078c5cc7cb08d354a069a15f5d18951c",
    "satd_text": " only check the valid detections are the same\n tvm has a different convention to tflite for invalid detections, it uses all -1s whereas\n tflite appears to put in nonsense data instead",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1739,
      1740,
      1741
    ],
    "matched_text": "    # only check the valid detections are the same"
  },
  {
    "satd_id": 6640901,
    "satd_repo": 70746484,
    "satd_sha": "0a1e160134fe52085f1d9dcba1bb3dfe9439857f",
    "satd_text": " pylint: disable=invalid-name, too-many-locals, too-many-statements, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/tests/python/test_topi_pooling.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, too-many-locals, too-many-statements, unused-argument"
  },
  {
    "satd_id": 6640915,
    "satd_repo": 70746484,
    "satd_sha": "83930a3b74736600734c7db61894670a447bcf33",
    "satd_text": " TODO: Figure out a better way to get typing to work for tensor + scalar",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      120
    ],
    "matched_text": "        # TODO: Figure out a better way to get typing to work for tensor + scalar"
  },
  {
    "satd_id": 6640915,
    "satd_repo": 70746484,
    "satd_sha": "83930a3b74736600734c7db61894670a447bcf33",
    "satd_text": " TODO: Figure out a better way to get typing to work for tensor + scalar",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      1482
    ],
    "matched_text": "        # TODO: Figure out a better way to get typing to work for tensor + scalar"
  },
  {
    "satd_id": 6640925,
    "satd_repo": 70746484,
    "satd_sha": "9a989e57e12d38b4fe58ab22e89506f27ad5d76c",
    "satd_text": " careful: cg will hold a naked pointer reference to ctx, so it should\n have a shorter lifetime than the ctx.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_amdgpu.cc",
    "lines": [
      223,
      224
    ],
    "matched_text": "  // careful: cg will hold a naked pointer reference to ctx, so it should"
  },
  {
    "satd_id": 6640991,
    "satd_repo": 70746484,
    "satd_sha": "b8c23d660dabfde2e63fb9cac4bd4885f125bc60",
    "satd_text": "!\n * \\brief Rewrite the pointer content type of arguments,\n *  as well as Alloc internal to the function to use\n *  the most frequently accessed type for load/store\n *  to avoid pointer casting in backend when possible.\n *\n * \\return The pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/transform.h",
    "lines": [
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641008,
    "satd_repo": 70746484,
    "satd_sha": "8f9796bd976874afe28845be7ce19f3acc8f1883",
    "satd_text": " TODO(@jroesch): we need to get an RFC done to standarize shape dtype",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      540
    ],
    "matched_text": "            // TODO(@jroesch): we need to get an RFC done to standarize shape dtype"
  },
  {
    "satd_id": 6641028,
    "satd_repo": 70746484,
    "satd_sha": "d3277874a24e775d2476b0eb0ad89f3a46964a14",
    "satd_text": " pylint: disable=len-as-condition, no-else-return, unused-argument, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=len-as-condition, no-else-return, unused-argument, invalid-name"
  },
  {
    "satd_id": 6641035,
    "satd_repo": 70746484,
    "satd_sha": "d3277874a24e775d2476b0eb0ad89f3a46964a14",
    "satd_text": " TODO(@tmoreau89): This is only a temporary fix, please take a look.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/ir_pass.py",
    "lines": [
      664
    ],
    "matched_text": "                # TODO(@tmoreau89): This is only a temporary fix, please take a look."
  },
  {
    "satd_id": 6641035,
    "satd_repo": 70746484,
    "satd_sha": "d3277874a24e775d2476b0eb0ad89f3a46964a14",
    "satd_text": " TODO(@tmoreau89): This is only a temporary fix, please take a look.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/transform.py",
    "lines": [
      652
    ],
    "matched_text": "                    # TODO(@tmoreau89): This is only a temporary fix, please take a look."
  },
  {
    "satd_id": 6641041,
    "satd_repo": 70746484,
    "satd_sha": "d3277874a24e775d2476b0eb0ad89f3a46964a14",
    "satd_text": " pylint: disable=unused-argument, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/build_module.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, invalid-name"
  },
  {
    "satd_id": 6641071,
    "satd_repo": 70746484,
    "satd_sha": "3f03869e6b6165e8e700a529d61cc5eea1ad0cf0",
    "satd_text": " Remove FreeVar warnings",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/convert_sparse_dense.cc",
    "lines": [
      133
    ],
    "matched_text": "        // Remove FreeVar warnings"
  },
  {
    "satd_id": 6641074,
    "satd_repo": 70746484,
    "satd_sha": "3f03869e6b6165e8e700a529d61cc5eea1ad0cf0",
    "satd_text": " Remove FreeVar warning",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/convert_sparse_dense.cc",
    "lines": [
      133
    ],
    "matched_text": "        // Remove FreeVar warnings"
  },
  {
    "satd_id": 6641074,
    "satd_repo": 70746484,
    "satd_sha": "3f03869e6b6165e8e700a529d61cc5eea1ad0cf0",
    "satd_text": " Remove FreeVar warning",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/simplify_fc_transpose.cc",
    "lines": [
      128
    ],
    "matched_text": "        // Remove FreeVar warning"
  },
  {
    "satd_id": 6641081,
    "satd_repo": 70746484,
    "satd_sha": "3f03869e6b6165e8e700a529d61cc5eea1ad0cf0",
    "satd_text": "!\n *\n * \\file simplify_fc_transpose.cc\n *\n * \\brief Mutate ```y = nn.dense(x, tranpose(w, [1, 0]))``` to\n *        ```y = nn.dense(x, wt)```\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/simplify_fc_transpose.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641095,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): remove realize_scope, turn the info into\n Buffer's scope field in this pass.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/schedule/schedule_postproc_to_primfunc.cc",
    "lines": [
      71,
      72
    ],
    "matched_text": "    // TODO(tvm-team): remove realize_scope, turn the info into"
  },
  {
    "satd_id": 6641105,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/transform.h",
    "lines": [
      69
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641105,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/storage_flatten.cc",
    "lines": [
      576
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641107,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": "!\n   * \\brief The function to be called.\n   * \\note Deprecated, move to BufferLoad in the future.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/expr.h",
    "lines": [
      713,
      714,
      715,
      716
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6641108,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": "!\n     * \\brief Halide-style call, evaluates func(args).\n     * \\note Deprecated, move to BufferLoad in the future.\n     ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/expr.h",
    "lines": [
      697,
      698,
      699,
      700
    ],
    "matched_text": "    /*!"
  },
  {
    "satd_id": 6641111,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": "!\n * \\brief Annotate the region where the buffer need to\n *  be read and write in the body.\n *  We only need to allocate the space for the corresponding region.\n *\n * \\note There should be at most one BufferRealize for each buffer.\n *       BufferRealize is not necessary for external buffers,\n *       since they are assumed to be fully allocated.\n *\n * \\sa BufferLoad, BufferStore\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/stmt.h",
    "lines": [
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641120,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/transform.h",
    "lines": [
      69
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641120,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/storage_flatten.cc",
    "lines": [
      576
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641126,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/transform.h",
    "lines": [
      69
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641126,
    "satd_repo": 70746484,
    "satd_sha": "c3511c5e2c2f903606209c9eb6d56c2221570a24",
    "satd_text": " TODO(tvm-team): consolidate configs to the PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/storage_flatten.cc",
    "lines": [
      576
    ],
    "matched_text": "// TODO(tvm-team): consolidate configs to the PassContext"
  },
  {
    "satd_id": 6641143,
    "satd_repo": 70746484,
    "satd_sha": "326489505d67226c21e0b73a6aeef60d50f2cd6e",
    "satd_text": " TODO(tvm-team): Make it as a target property.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/tir/transforms/vectorize_loop.cc",
    "lines": [
      565
    ],
    "matched_text": "// TODO(tvm-team): Make it as a target property."
  },
  {
    "satd_id": 6641176,
    "satd_repo": 70746484,
    "satd_sha": "326489505d67226c21e0b73a6aeef60d50f2cd6e",
    "satd_text": " TODO(tvm-team): Make it as a target property.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/tir/transforms/vectorize_loop.cc",
    "lines": [
      565
    ],
    "matched_text": "// TODO(tvm-team): Make it as a target property."
  },
  {
    "satd_id": 6641196,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!< temporary and needs to be released after use.  ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_hvx.h",
    "lines": [
      42
    ],
    "matched_text": "                     /*!< temporary and needs to be released after use.  */"
  },
  {
    "satd_id": 6641202,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n * \\brief\n *   This function cleans up after \\ref prepare_mt_job, in particular\n *   it releases temporarily reserved HVX units and turns the HVX\n *   hardware off.\n *\n * \\return\n *   0 on success, -1 if there was an error.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_hvx.h",
    "lines": [
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641212,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n * \\brief\n *   This function reserves HVX units for the protection domain to which\n *   the caller belongs. Reservation is optional before locking HVX units.\n *   Typically it would be called by applications that want to guarantee\n *   up front that the requested number of HVX units will be available\n *   for the duration of the application.\n *\n * \\param num_units\n *   Number of HVX units to reserve. 0 indicates to reserve all the units\n *   present in the given target. > 0 indicates the number of single HVX\n *   units to reserve. Mode (64 byte vs. 128 byte) is not specified.\n *\n * \\return\n *   The number of HVX units (in terms of 64 byte single units) successfully\n *   reserved. The return value of -1 indicates no HVX hardware is available\n *   on the target.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_hvx.h",
    "lines": [
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641220,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n *  \\brief Dummy function.\n *\n *  \\param handle   Domain channel handle.\n *\n *  \\return This function always returns 0.\n *\n * This function is present as a workaround. See comment at the call site\n * in hexagon_device_target.cc.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_remote_imp.cc",
    "lines": [
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641220,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n *  \\brief Dummy function.\n *\n *  \\param handle   Domain channel handle.\n *\n *  \\return This function always returns 0.\n *\n * This function is present as a workaround. See comment at the call site\n * in hexagon_device_target.cc.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_remote_nd_imp.cc",
    "lines": [
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641241,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n *  \\brief Dummy function.\n *\n *  \\param handle   Domain channel handle.\n *\n *  \\return This function always returns 0.\n *\n * This function is present as a workaround. See comment at the call site\n * in hexagon_device_target.cc.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_remote_imp.cc",
    "lines": [
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641241,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n *  \\brief Dummy function.\n *\n *  \\param handle   Domain channel handle.\n *\n *  \\return This function always returns 0.\n *\n * This function is present as a workaround. See comment at the call site\n * in hexagon_device_target.cc.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_remote_nd_imp.cc",
    "lines": [
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641245,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": "!\n * Implement a wrapper around pthread_create that sets the thread stack\n * size to a chosen value.\n *\n * TVM runtime uses std::thread, but the C++ standard does not provide\n * any means of controlling thread attributes (like stack size). Because\n * of that, any thread created by the std::thread constructor will use\n * default attributes. The default stack size for a thread in QuRT is 16kB.\n * This has proven to be insufficient in the past, so we need to increase\n * it.\n * When libtvm_runtime.so is linked, a linker flag --wrap=pthread_create\n * is used, which causes the linker to rename all uses of pthread_create\n * with references to __wrap_pthread_create. This file implements the\n * __wrap function to set the larger stack size and call the actual\n * pthread_create. The call to pthread_create here must not be renamed,\n * so this function cannot be included in the TVM runtime binary.\n * Instead, it's implemented in a separate shared library.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/fastrpc/src/tvm_wrap_pthread.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641247,
    "satd_repo": 70746484,
    "satd_sha": "fbcf61abf4585d1099f530d354354e20a0b97f4a",
    "satd_text": " a pointer to tvm_remote_buffer or tvm_remote_nd_buffer,\n For example, int foo(tvm_remote_buffer*) and\n int bar(tvm_remote_nd_buffer*) should both have the same type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6641251,
    "satd_repo": 70746484,
    "satd_sha": "c936a81dab2b4b4b595d02153a6654b9d4e09cd5",
    "satd_text": " caffe2.python.module.download generates a progress bar. in non\n interactive use this results in huge progress debris in the log\n files.  There is no option to disable the progress bar so work\n around it by stripping the progress bar output",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docker/install/ubuntu_install_caffe2.sh",
    "lines": [
      23,
      24,
      25,
      26
    ],
    "matched_text": "# caffe2.python.module.download generates a progress bar. in non"
  },
  {
    "satd_id": 6641270,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "##############################################################################\n Deploy a quantized MXNet Model\n ------------------------------\n TODO",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      229,
      230,
      231,
      232
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6641279,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "##############################################################################\n Deploy a quantized TFLite Model\n -------------------------------\n TODO",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      234,
      235,
      236,
      237
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6641281,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "#########################################################################\n Measure performance\n -------------------------\n Here we give an example of how to measure performance of TVM compiled models.\n should be bigger to make the measurement more accurate",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      190,
      191,
      192,
      193,
      194
    ],
    "matched_text": "##########################################################################"
  },
  {
    "satd_id": 6641284,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "#####################################################################\n .. note::\n\n   We recommend this method for the following reasons:\n\n    * Measurements are done in C++, so there is no Python overhead\n    * It includes several warm up runs\n    * The same method can be used to profile on remote devices (android etc.).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6641286,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "#####################################################################\n .. note::\n\n   Unless the hardware has special support for fast 8 bit instructions, quantized models are\n   not expected to be any faster than FP32 models. Without fast 8 bit instructions, TVM does\n   quantized convolution in 16 bit, even if the model itself is 8 bit.\n\n   For x86, the best performance can be achieved on CPUs with AVX512 instructions set.\n   In this case, TVM utilizes the fastest available 8 bit instructions for the given target.\n   This includes support for the VNNI 8 bit dot product instruction (CascadeLake or newer).\n\n   Moreover, the following general tips for CPU performance equally applies:\n\n    * Set the environment variable TVM_NUM_THREADS to the number of physical cores\n    * Choose the best target for your hardware, such as \"llvm -mcpu=skylake-avx512\" or\n      \"llvm -mcpu=cascadelake\" (more CPUs with AVX512 would come in the future)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6641287,
    "satd_repo": 70746484,
    "satd_sha": "3d18adf1e314364f1222e28ccd2714531d6e7a21",
    "satd_text": "#############################################################################\n Quantize, trace and run the PyTorch Mobilenet v2 model\n ------------------------------------------------------\n The details are out of scope for this tutorial. Please refer to the tutorials\n on the PyTorch website to learn about quantization and jit.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/frontend/deploy_prequantized.py",
    "lines": [
      134,
      135,
      136,
      137,
      138
    ],
    "matched_text": "##############################################################################"
  },
  {
    "satd_id": 6641301,
    "satd_repo": 70746484,
    "satd_sha": "09eb50820b1629f77531acaad16701bf572293f0",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1044
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641301,
    "satd_repo": 70746484,
    "satd_sha": "09eb50820b1629f77531acaad16701bf572293f0",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1100
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641301,
    "satd_repo": 70746484,
    "satd_sha": "09eb50820b1629f77531acaad16701bf572293f0",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      1104
    ],
    "matched_text": "    def abs(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641305,
    "satd_repo": 70746484,
    "satd_sha": "d81b006be8bd8aa5566bd32f9c705ce85310ae4d",
    "satd_text": " Disable gpu test for now",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_vision.py",
    "lines": [
      109
    ],
    "matched_text": "        # Disable gpu test for now"
  },
  {
    "satd_id": 6641332,
    "satd_repo": 70746484,
    "satd_sha": "afcf9397b60ae7ccf46601cf29828992ca9d5f57",
    "satd_text": " Get info needed to duplicate the socket",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/win32_process.cc",
    "lines": [
      199
    ],
    "matched_text": "    // Get info needed to duplicate the socket"
  },
  {
    "satd_id": 6641337,
    "satd_repo": 70746484,
    "satd_sha": "afcf9397b60ae7ccf46601cf29828992ca9d5f57",
    "satd_text": " Creates the duplicate socket, that was created in the parent",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/win32_process.cc",
    "lines": [
      122
    ],
    "matched_text": "    // Creates the duplicate socket, that was created in the parent"
  },
  {
    "satd_id": 6641421,
    "satd_repo": 70746484,
    "satd_sha": "0145cd504585e25b776bef83688d10ff0ca44082",
    "satd_text": " workaround for the lack of list rev support",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/pytorch/lstm_test.py",
    "lines": [
      96
    ],
    "matched_text": "            # workaround for the lack of list rev support"
  },
  {
    "satd_id": 6641445,
    "satd_repo": 70746484,
    "satd_sha": "403929f9019e0c44732a64999b8fbaee803cd7e5",
    "satd_text": " LLVM's prefetch intrinsic returns \"void\", while TVM's prefetch\n returns int32. This causes problems because prefetch is one of\n those intrinsics that is generated automatically via the\n tvm.intrin.rule mechanism. Any other intrinsic with a type\n mismatch will have to be treated specially here.\n TODO(kparzysz-quic): fix this once TVM prefetch uses the same\n type as LLVM.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_llvm.cc",
    "lines": [
      769,
      770,
      771,
      772,
      773,
      774,
      775
    ],
    "matched_text": "    // LLVM's prefetch intrinsic returns \"void\", while TVM's prefetch"
  },
  {
    "satd_id": 6641450,
    "satd_repo": 70746484,
    "satd_sha": "3616ebee6890950c1324b6a0733866f404af7041",
    "satd_text": " Only keep the item we want for the child node.\n FIXME(@comaniac): The other items should still be requried for the primary outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/dnnl/codegen.cc",
    "lines": [
      147,
      148
    ],
    "matched_text": "    // Only keep the item we want for the child node."
  },
  {
    "satd_id": 6641458,
    "satd_repo": 70746484,
    "satd_sha": "3616ebee6890950c1324b6a0733866f404af7041",
    "satd_text": " The second block is always conv + relu, to make it more interesting",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      895
    ],
    "matched_text": "        # The second block is always conv + relu, to make it more interesting"
  },
  {
    "satd_id": 6641468,
    "satd_repo": 70746484,
    "satd_sha": "3616ebee6890950c1324b6a0733866f404af7041",
    "satd_text": " conv + bn + relu, conv + relu -> fused conv_bias_relu, conv, and relu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partition_graph.py",
    "lines": [
      927
    ],
    "matched_text": "        # conv + bn + relu, conv + relu -> fused conv_bias_relu, conv, and relu"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      191
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      233
    ],
    "matched_text": "    def relu(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      252
    ],
    "matched_text": "    def relu(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      256
    ],
    "matched_text": "    def concatenate(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      342
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641502,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      346
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641525,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " TODO(@comaniac, @zhiics): Now we simply assign this node to the target with\n the highest priority, but we should preserve all supported targets so that\n we can make a better decision.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/annotate_target.cc",
    "lines": [
      178,
      179,
      180
    ],
    "matched_text": "    // TODO(@comaniac, @zhiics): Now we simply assign this node to the target with"
  },
  {
    "satd_id": 6641542,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " TODO(@comaniac, @zhiics): We should also handle the annotation with \"default\" attribute\n by treating them as un-annotated, but we don't have it yet. This workaround pass removes\n all \"default\" annotations and should be deleted in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/partition_graph.cc",
    "lines": [
      516,
      517,
      518
    ],
    "matched_text": "        // TODO(@comaniac, @zhiics): We should also handle the annotation with \"default\" attribute"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      191
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      233
    ],
    "matched_text": "    def relu(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      252
    ],
    "matched_text": "    def relu(attrs, args): # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      256
    ],
    "matched_text": "    def concatenate(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      342
    ],
    "matched_text": "    def relu(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641544,
    "satd_repo": 70746484,
    "satd_sha": "f506c8b19ab3a7634ac56f63298dade6d40d2d1d",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_annotate_target.py",
    "lines": [
      346
    ],
    "matched_text": "    def add(attrs, args):  # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6641549,
    "satd_repo": 70746484,
    "satd_sha": "e21f26827c1b4df9564216cd1e8b9d7b018577c6",
    "satd_text": "!\n * \\brief Obtain Smith Normal Form of linear equation A x = y.\n *        Smith Normal Form of matrix A_{mxn} is S_{mxn} = U_{mxm} A_{mxn} V_{nxn},\n *        in which S_{mxn} is diag(s1, s2, ..., sr, 0, ..., 0) and r is the rank of A.\n *        NOTE: Although in standard Smith Normal Form the diagonal elements satisfy\n *              s_i | s_{i+1} (| means divides), the implement here does not guarantee it.\n *        TODO(yzhliu): From sergei-grechanik:\n *          computing the proper Smith normal form may improve stability of automatic differentiation\n *          (generating the same gradient code for slightly different but equivalent input code\n *        U_{mxm} and V_{nxn} are invertible matrices.\n *        This function modifies \\p S to be S_{mxn}, \\p V to be V_{nxn},\n *        \\p y to be U_{mxm} y_{mx1} and \\p x to be V^{-1} x.\n * \\param S  the original A_{mxn}, it will be modified to S_{mxn}\n * \\param V  an identity matrix, it will be modified to V_{nxn}\n * \\param x  the x in A x = y. it will be modified to V^{-1}_{nxn} x_{nx1}\n * \\param y  the y in A x = y. it will be modified to U_{mxm} y_{mx1}\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arith/int_solver.h",
    "lines": [
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641572,
    "satd_repo": 70746484,
    "satd_sha": "e21f26827c1b4df9564216cd1e8b9d7b018577c6",
    "satd_text": " Explicitly avoid changing the index-th column. This is important to avoid infinite\n loop. Note that here we don't have to set `changed` to true since we don't change the\n index-th column.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_equation.cc",
    "lines": [
      159,
      160,
      161
    ],
    "matched_text": "          // Explicitly avoid changing the index-th column. This is important to avoid infinite"
  },
  {
    "satd_id": 6641602,
    "satd_repo": 70746484,
    "satd_sha": "e21f26827c1b4df9564216cd1e8b9d7b018577c6",
    "satd_text": " Explicitly avoid changing the index-th row. This is important to avoid infinite loop.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_equation.cc",
    "lines": [
      103
    ],
    "matched_text": "          // Explicitly avoid changing the index-th row. This is important to avoid infinite loop."
  },
  {
    "satd_id": 6641614,
    "satd_repo": 70746484,
    "satd_sha": "e21f26827c1b4df9564216cd1e8b9d7b018577c6",
    "satd_text": " Simplify right hand sides",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/solve_linear_equation.cc",
    "lines": [
      348
    ],
    "matched_text": "  // Simplify right hand sides"
  },
  {
    "satd_id": 6641663,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": " TODO(kparzysz-quic): copy return value back",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/hexagon_module.cc",
    "lines": [
      326
    ],
    "matched_text": "  // TODO(kparzysz-quic): copy return value back"
  },
  {
    "satd_id": 6641665,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": " Call the function: construct temporary values/codes and pass them through\n the arg layout building to preprare for the actual remote call.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/hexagon_module.cc",
    "lines": [
      311,
      312
    ],
    "matched_text": "  // Call the function: construct temporary values/codes and pass them through"
  },
  {
    "satd_id": 6641669,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": " KLUDGE: There is no distinction between 32- and 64-bit integer\n types, so there is no way to tell if the value being passed needs\n one or two registers. Assume that all integers are 32-bit, and\n simply abort if the actual value does not fit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/hexagon_module.cc",
    "lines": [
      474,
      475,
      476,
      477
    ],
    "matched_text": "        // KLUDGE: There is no distinction between 32- and 64-bit integer"
  },
  {
    "satd_id": 6641685,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": "!\n * \\brief Function argument locations according to the Hexagon ABI.\n *\n * In order to invoke a function whose arguments are in TVMArgs list, at\n * some point before branching to the function's address, these arguments\n * need to be loaded into locations (registers or stack) specified by the\n * corresponding ABI.\n * When a host wants to call a function on Hexagon, the host will identify\n * how each element of the TVMArgs list will be passed to the Hexagon\n * function. This class is a description of which values should go into\n * registers, and which values should be on stack. Right before the call\n * this class will be serialized and transfereed over to the Hexagon side.\n * The code running on Hexagon will then execute the argument placement\n * and invoke the function.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/hexagon_module.cc",
    "lines": [
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641759,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": " This is a workaround. If HexagonTarget::Alloc is called from a different\n thread then remote_mmap64 fails. FastRPC expects one call to be made to\n DSP before calling remote_map64. Hence this call is needed for now untill\n FastRPC comes up with a fix.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/hexagon_device_target.cc",
    "lines": [
      266,
      267,
      268,
      269
    ],
    "matched_text": "  // This is a workaround. If HexagonTarget::Alloc is called from a different"
  },
  {
    "satd_id": 6641779,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": "!\n * Encapsulation of the API of lib(a|c)dsprpc.so (loaded via dlopen), allowing\n * for having versions of the library that do not implement all of the\n * functions.\n *\n * Functions defined in the DSP RPC library:\n *   remote_handle_close\n *   remote_handle_control\n *   remote_handle_invoke\n *   remote_handle_open\n *   remote_mmap\n *   remote_munmap\n *\n *   remote_handle64_close\n *   remote_handle64_control\n *   remote_handle64_invoke\n *   remote_handle64_open\n *   remote_mmap64\n *   remote_munmap64\n *\n *   remote_register_buf\n *   remote_register_buf_attr\n *   remote_register_dma_handle\n *   remote_register_dma_handle_attr\n *   remote_register_fd\n *\n *   remote_session_control\n *   remote_set_mode\n *\n *   rpcmem_init\n *   rpcmem_deinit\n *   rpcmem_alloc\n *   rpcmem_free\n *   rpcmem_to_fd\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/hexagon_dsprpcapi.h",
    "lines": [
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641787,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": " Create types for each remote function. For functions that take\n a pointer to tvm_hexagon_remote_buffer or tvm_hexagon_remote_nd_buffer,\n replace that pointer with pointer to void to make pointers to these\n two types identical in the function types created below.\n For example, int foo(tvm_hexagon_remote_buffer*) and\n int bar(tvm_hexagon_remote_nd_buffer*) should both have the same type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/hexagon_stubapi.h",
    "lines": [
      159,
      160,
      161,
      162,
      163,
      164
    ],
    "matched_text": "  // Create types for each remote function. For functions that take"
  },
  {
    "satd_id": 6641791,
    "satd_repo": 70746484,
    "satd_sha": "02d3a59b962cfce9dc9200d530f0f5ca62181076",
    "satd_text": "!\n * Unify the handling of domain and non-domain functions.\n *\n * In most cases, for a function \"foo\", the domain version will be called\n * \"tvm_hexagon_remote_foo\", and the non-domain version will have \"nd_foo\".\n * The interfaces will be the same, except:\n * - the domain version will take \"remote_handle64\" as the first parameter,\n *   while the non-domain version will not:\n *   int tvm_hexagon_remote_foo   (remote_handle64 h, param1, param2, ...);\n *   int tvm_hexagon_remote_nd_foo                   (param1, param2, ...);\n * - any parameter of type \"buffer\" in the IDL, will be converted into a\n *   type \"tvm_hexagon_remote_buffer\" for domain functions, and into\n *   \"tvm_hexagon_remote_nd_buffer\" for non-domain functions. These two\n *   types are identical, but since they are declared in two different IDLs,\n *   they get different names.\n *\n * For any function, only a pointer to the \"buffer\" type is passed, but\n * since the pointee types are different, this is enough to create a\n * difference in the function signatures even if the \"remote_handle64\"\n * parameter is ignored. For this reason, in all function types, the\n * types \"tvm_hexagon_remote_buffer *\" and \"tvm_hexagon_remote_nd_buffer *\",\n * both const and non-const, are replaced with \"void *\", with the\n * corresponding const-qualification. This is done by the templates\n * \"replace_pointee_type\" and \"map_tuple_element\" below.\n *\n * The following functions are subject to the uniform handling:\n *\n *   tvm_hexagon_remote_load_library     (remote_handle64 h, p1, p2, ...)\n *   tvm_hexagon_remote_release_library\n *   tvm_hexagon_remote_get_symbol\n *   tvm_hexagon_remote_kernel\n *   tvm_hexagon_remote_close\n *   tvm_hexagon_remote_alloc_vtcm\n *   tvm_hexagon_remote_free_vtcm\n *\n *   tvm_hexagon_remote_nd_load_library  (p1, p2, ...)\n *   tvm_hexagon_remote_nd_release_library\n *   tvm_hexagon_remote_nd_get_symbol\n *   tvm_hexagon_remote_nd_kernel\n *   tvm_hexagon_remote_nd_close\n *\n * The \"open\" functions differ in their parameters in different ways, and\n * need to be handled individually.\n *\n *   tvm_hexagon_remote_open\n *   tvm_hexagon_remote_nd_open\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/hexagon/target/hexagon_stubapi.h",
    "lines": [
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641817,
    "satd_repo": 70746484,
    "satd_sha": "f0f036478cd820254cd25f0d3bea1fd9fbd40528",
    "satd_text": " Only keep the item we want for the child node.\n FIXME(@comaniac): The other items should still be requried for the primary outputs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/dnnl/codegen.cc",
    "lines": [
      59,
      60
    ],
    "matched_text": "    // Only keep the item we want for the child node."
  },
  {
    "satd_id": 6641819,
    "satd_repo": 70746484,
    "satd_sha": "f0f036478cd820254cd25f0d3bea1fd9fbd40528",
    "satd_text": " FIXME(@comaniac): BN has 3 outputs: out, new_mean and new_variance, but we do not update\n the rest two because no one cares about them for now. Should update it in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/dnnl/dnnl.cc",
    "lines": [
      175,
      176
    ],
    "matched_text": "  // FIXME(@comaniac): BN has 3 outputs: out, new_mean and new_variance, but we do not update"
  },
  {
    "satd_id": 6641870,
    "satd_repo": 70746484,
    "satd_sha": "4e00763242bd7242c37f64f62cf750e918790bf5",
    "satd_text": " The intrinsic x86_vcvtph2ps_256 was removed in LLVM 11.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_x86_64.cc",
    "lines": [
      104
    ],
    "matched_text": "    // The intrinsic x86_vcvtph2ps_256 was removed in LLVM 11."
  },
  {
    "satd_id": 6641892,
    "satd_repo": 70746484,
    "satd_sha": "e11a6092e629cadd34af1f48be47817ca9c65fd4",
    "satd_text": "! \\brief The bits in page table ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/runtime/crt/memory.c",
    "lines": [
      46
    ],
    "matched_text": "/*! \\brief The bits in page table */"
  },
  {
    "satd_id": 6641901,
    "satd_repo": 70746484,
    "satd_sha": "e11a6092e629cadd34af1f48be47817ca9c65fd4",
    "satd_text": " TODO(liangfu): found out whether we can extend current entry\n\n insert new page entry",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/memory.c",
    "lines": [
      269,
      270,
      271
    ],
    "matched_text": "      // TODO(liangfu): found out whether we can extend current entry"
  },
  {
    "satd_id": 6641907,
    "satd_repo": 70746484,
    "satd_sha": "e11a6092e629cadd34af1f48be47817ca9c65fd4",
    "satd_text": "!\n * \\file memory.c\n * \\brief Virtal memory manager\n *\n * To maximize portability, thread-safe feature has been dropped for now.\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/crt/memory.c",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641922,
    "satd_repo": 70746484,
    "satd_sha": "e11a6092e629cadd34af1f48be47817ca9c65fd4",
    "satd_text": "!\n * \\brief Log memory pool size for virtual memory allocation\n *\n * Here is a list of possible choices:\n * * use 16 for 64 KiB memory space\n * * use 17 for 128 KiB memory space\n * * use 18 for 256 KiB memory space\n * * use 19 for 512 KiB memory space\n * * use 20 for 1 MiB memory space\n * * use 21 for 2 MiB memory space\n * * use 22 for 4 MiB memory space\n * * use 23 for 8 MiB memory space\n * * use 24 for 16 MiB memory space\n * * use 25 for 32 MiB memory space\n * * use 26 for 64 MiB memory space\n * * use 27 for 128 MiB memory space\n * * use 28 for 256 MiB memory space\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/runtime.c",
    "lines": [
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6641930,
    "satd_repo": 70746484,
    "satd_sha": "f5b02fdb1b5a7b6be79df97035ec1c3b80e3c665",
    "satd_text": " The monomial coefficients of the numerator polynomial (odd).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/include/topi/elemwise.h",
    "lines": [
      78
    ],
    "matched_text": "  // The monomial coefficients of the numerator polynomial (odd)."
  },
  {
    "satd_id": 6641930,
    "satd_repo": 70746484,
    "satd_sha": "f5b02fdb1b5a7b6be79df97035ec1c3b80e3c665",
    "satd_text": " The monomial coefficients of the numerator polynomial (odd).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/include/topi/elemwise.h",
    "lines": [
      475
    ],
    "matched_text": "  // The monomial coefficients of the numerator polynomial (odd)."
  },
  {
    "satd_id": 6642008,
    "satd_repo": 70746484,
    "satd_sha": "02eb18332a4f9b9491da0d4e8ed01c49fec2ac5e",
    "satd_text": " TODO unrolling by omg, eps, nu may improve performance but\n in some cases causes extremely long build times due to imperfect tiling.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv3d_winograd.py",
    "lines": [
      271,
      272
    ],
    "matched_text": "    # TODO unrolling by omg, eps, nu may improve performance but"
  },
  {
    "satd_id": 6642037,
    "satd_repo": 70746484,
    "satd_sha": "02eb18332a4f9b9491da0d4e8ed01c49fec2ac5e",
    "satd_text": " convert 3-way padding to 6-way padding",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/nn.py",
    "lines": [
      368
    ],
    "matched_text": "    # convert 3-way padding to 6-way padding"
  },
  {
    "satd_id": 6642097,
    "satd_repo": 70746484,
    "satd_sha": "b41f4e5523b1f5974a4bdfe4dcc3233903394224",
    "satd_text": " If we load from and then store into the same res_handles in the thread_allreduce intrinsic,\n something goes wrong, so we use an extra variable here for normal reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/operation/cross_thread_reduction.cc",
    "lines": [
      80,
      81
    ],
    "matched_text": "  // If we load from and then store into the same res_handles in the thread_allreduce intrinsic,"
  },
  {
    "satd_id": 6642113,
    "satd_repo": 70746484,
    "satd_sha": "75e936e1b5db305864c76277e2ba47c453c4c6a8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/tir/transform/transform.py",
    "lines": [
      38
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6642113,
    "satd_repo": 70746484,
    "satd_sha": "75e936e1b5db305864c76277e2ba47c453c4c6a8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/tir/transform/transform.py",
    "lines": [
      57
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6642127,
    "satd_repo": 70746484,
    "satd_sha": "7de8a539b1e73627309308b49c6c69625efc4d5a",
    "satd_text": "! \\brief Non-recursive DFS Graph Traversal for Custom Rewriting Passes\n *\n * MixedModeMutator treats Expr as dataflow graph, and only Rewrites each Expr once.\n * The mutated results are memoized in a map and reused so that\n * local transformation on the dataflow preserves the graph structure.\n *\n * MixedModeMutator provides the same recursive API as ExprMutator, and uses\n * recursion to traverse most forms of the IR, but under the hood it expands nested dataflow regions\n * of the graph and processes them iteratatively to prevent stack overflows\n *\n * Uses Rewrite_ API of ExprRewriter for a cleaner split between recrusive and non-recursive behavior.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/expr_functor.h",
    "lines": [
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287
    ],
    "matched_text": "/*! \\brief Non-recursive DFS Graph Traversal for Custom Rewriting Passes"
  },
  {
    "satd_id": 6642136,
    "satd_repo": 70746484,
    "satd_sha": "7de8a539b1e73627309308b49c6c69625efc4d5a",
    "satd_text": "! \\brief The constructor of MixedModeVisitor\n   *  \\param visit_limit The number of times to allow visitation to a node. Usually 1, ocassionally\n   * higher (i.e., 2 for dead code elimiation), limited to 10 as a sanity check.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/expr_functor.h",
    "lines": [
      246,
      247,
      248,
      249
    ],
    "matched_text": "  /*! \\brief The constructor of MixedModeVisitor"
  },
  {
    "satd_id": 6642156,
    "satd_repo": 70746484,
    "satd_sha": "316ce055ce11ae5ecb2d02a1438df26a5ef4ef4a",
    "satd_text": " We could emit make_float4 like calls, but the emitted code looks\n too compact to read. Emit this as vectorized unary ops.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_cuda.cc",
    "lines": [
      366,
      367
    ],
    "matched_text": "  // We could emit make_float4 like calls, but the emitted code looks"
  },
  {
    "satd_id": 6642169,
    "satd_repo": 70746484,
    "satd_sha": "44bffdb398f2309f7506b9e51b774b8a743c1f03",
    "satd_text": "!\n * \\brief Temporary backward compatible function to convert a list\n *  of LoweredFunc to a IRModule of PrimfFuncs\n * \\param funcs The input lowered function.\n * \\return The IRModule.\n *\n * \\note This function is only used for code refactor and will be\n *       removed once the refactor completes.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/target/codegen.h",
    "lines": [
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642176,
    "satd_repo": 70746484,
    "satd_sha": "44bffdb398f2309f7506b9e51b774b8a743c1f03",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/driver/build_module.py",
    "lines": [
      230
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6642199,
    "satd_repo": 70746484,
    "satd_sha": "4e5c5843e7c078e39d89c4ee2163f1fd40aef952",
    "satd_text": " a map from IterVar before rewrite to that after rewrite,\n ensures one old IterVar maps to exactly one new IterVar",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/narrow_datatype.cc",
    "lines": [
      333,
      334
    ],
    "matched_text": "  // a map from IterVar before rewrite to that after rewrite,"
  },
  {
    "satd_id": 6642200,
    "satd_repo": 70746484,
    "satd_sha": "4e5c5843e7c078e39d89c4ee2163f1fd40aef952",
    "satd_text": " a map from Var before rewrite to that after rewrite,\n ensures one old Var maps to exactly one new Var",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/narrow_datatype.cc",
    "lines": [
      330,
      331
    ],
    "matched_text": "  // a map from Var before rewrite to that after rewrite,"
  },
  {
    "satd_id": 6642205,
    "satd_repo": 70746484,
    "satd_sha": "4e5c5843e7c078e39d89c4ee2163f1fd40aef952",
    "satd_text": " This pass narrows indexing expressions (like StoreNode::Index)\n that trivially fit into i32/i16 (denoted by `target_bits_`) to\n i32/i16. Considering that i32/i16 indices may be more\n efficient on some backends (while i64 may be more efficient\n on others, like llvm), we may want this pass when i32/i16\n indices are more efficient.\n\n For Var v, we determine its dtype by examining all the PrimExpr\n that contains v, denoted by E = {e_0 = v, e_1, e_2, ..., e_k}.\n If all expressions in E fit into i32/i16, then we think v can be narrowed\n to i32/i16.\n\n To make an indexing expression i32/i16, we must make sure that every\n component of that expression is of dtype i32/i16. So besides Var, we\n rewrite the following inside an indexing expression\n - Var\n - IntImm\n - Cast\n\n Algorithm:\n - Use DataTypeVisitor to determine whether a Var can be narrowed or not.\n - Use DataTypeRewritter to rewrite the components of an indexing expression.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/narrow_datatype.cc",
    "lines": [
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56
    ],
    "matched_text": "// This pass narrows indexing expressions (like StoreNode::Index)"
  },
  {
    "satd_id": 6642209,
    "satd_repo": 70746484,
    "satd_sha": "4e5c5843e7c078e39d89c4ee2163f1fd40aef952",
    "satd_text": " Recursively call simplification when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/transforms/narrow_datatype.cc",
    "lines": [
      127
    ],
    "matched_text": "    // Recursively call simplification when necessary."
  },
  {
    "satd_id": 6642228,
    "satd_repo": 70746484,
    "satd_sha": "4e5c5843e7c078e39d89c4ee2163f1fd40aef952",
    "satd_text": "!\n   * \\brief analyze the expr with the intermediate memorized to avoid redundant computation\n   * \\param expr The expression of interest.\n   * \\param bound The lookup table to store the intermediate results\n   * \\return the result of the analysis.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arith/analyzer.h",
    "lines": [
      117,
      118,
      119,
      120,
      121,
      122
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6642235,
    "satd_repo": 70746484,
    "satd_sha": "e60003c20095f1e40d2e492fd06267f7293c6764",
    "satd_text": "!\n * \\brief Compare two expressions recursively and check if they are equal\n *        to each other without var remapping.\n *\n *  This function does not remap variable bindings, it will not\n *  return true for (let x = 1 in x + 1) vs (let y = 1 in y + 1), unless x.same_as(y).\n *\n *  Use StructuralEqual for such cases.\n *\n *  Due to the restriction of not remapping variables, this function can run\n *  faster than StructuralEqual and can be used as a utility function during arithmetic\n *  simplifications.\n *\n * \\sa StructuralEqual\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/analysis.h",
    "lines": [
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642263,
    "satd_repo": 70746484,
    "satd_sha": "e46aa3338ca0b4779aaf8a1f94950aee5921fbaf",
    "satd_text": " codegen to the module scope and rely on the pass manager to prevent\n relay function level passes (i.e. simplify inference and fusion)\n optimizing it.\n If there is only a single output; no need to add a tuplegetitem\n node",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6642344,
    "satd_repo": 70746484,
    "satd_sha": "e4a5441d3d36c15f7310f86dc646e4cad7085960",
    "satd_text": " Also simplify the resulting combiner\n (mostly to get rid of unused components, e.g., the original expressions)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/jacobian.cc",
    "lines": [
      265,
      266
    ],
    "matched_text": "    // Also simplify the resulting combiner"
  },
  {
    "satd_id": 6642345,
    "satd_repo": 70746484,
    "satd_sha": "e4a5441d3d36c15f7310f86dc646e4cad7085960",
    "satd_text": " This case is relatively difficult because a reduction expression\n may use an arbitrary combiner.\n The resulting reduction expression will return a tuple containing\n both derivatives and the original results (in exactly this order).\n The order matters when original init value is different from its derivative init value,\n and they depend on each other during gradient calculation,\n we must calculate derivatives first (using origin's init value),\n switching the order (original results first, then derivatives)\n makes the origin value be replaced before using,\n produces incorrect results.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/autodiff/jacobian.cc",
    "lines": [
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192
    ],
    "matched_text": "    // This case is relatively difficult because a reduction expression"
  },
  {
    "satd_id": 6642392,
    "satd_repo": 70746484,
    "satd_sha": "021213832cb98703dda54f631215ac17fbabff7b",
    "satd_text": " Cache compiler_begin and compiler_end annotation ops for equivalence check to\n reduce registry lookup overhead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/transforms/merge_compiler_regions.cc",
    "lines": [
      52,
      53
    ],
    "matched_text": "// Cache compiler_begin and compiler_end annotation ops for equivalence check to"
  },
  {
    "satd_id": 6642415,
    "satd_repo": 70746484,
    "satd_sha": "919ae889638555b82de2d124d5f3e08d76bf789b",
    "satd_text": " Note: we change it from Int(64) to Int(32) for now as\n combine_parallel_dense will transform the graph with Int(32).\n More invetigation is needs to check which one we should use.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/tensor/transform.cc",
    "lines": [
      2145,
      2146,
      2147
    ],
    "matched_text": "      // Note: we change it from Int(64) to Int(32) for now as"
  },
  {
    "satd_id": 6642449,
    "satd_repo": 70746484,
    "satd_sha": "497d01d37f26e75fe0f36a1091a72f8e220b06c3",
    "satd_text": "!\n * \\brief A Reducer class to reduce the structural hash value.\n *\n *  The reducer will call the SEqualHash function of each objects recursively.\n *\n *  A SEqualHash function will make a sequence of calls to the reducer to\n *  indicate a sequence of child hash values that the reducer need to combine\n *  inorder to obtain the hash value of the hash value of the parent object.\n *\n *  Importantly, the reducer may not directly use recursive calls\n *  to compute the hash values of child objects directly.\n *\n *  Instead, it can store the necessary hash computing task into a stack\n *  and reduce the result later.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/structural_hash.h",
    "lines": [
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642524,
    "satd_repo": 70746484,
    "satd_sha": "997a14eda9aec3b343e742e55c3018f9dc23d8c3",
    "satd_text": "!\n * \\brief A Reducer class to reduce the structural equality result of two objects.\n *\n * The reducer will call the SEqualReduce function of each objects recursively.\n * Importantly, the reducer may not directly use recursive calls to resolve the\n * equality checking. Instead, it can store the necessary equality conditions\n * and check later via an internally managed stack.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/structural_equal.h",
    "lines": [
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642583,
    "satd_repo": 70746484,
    "satd_sha": "997a14eda9aec3b343e742e55c3018f9dc23d8c3",
    "satd_text": " Use namehint for now to be consistent with the legacy relay impl\n TODO(tvm-team) revisit, need to check the type var.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir/adt.h",
    "lines": [
      67,
      68
    ],
    "matched_text": "    // Use namehint for now to be consistent with the legacy relay impl"
  },
  {
    "satd_id": 6642590,
    "satd_repo": 70746484,
    "satd_sha": "997a14eda9aec3b343e742e55c3018f9dc23d8c3",
    "satd_text": "!\n * \\brief Directly register reflection VTable.\n * \\param TypeName The name of the type.\n * \\param TraitName A trait class that implements functions like VisitAttrs and SEqualReduce.\n *\n * \\code\n *\n *  // Example SEQualReduce traits for runtime StringObj.\n *\n *  struct StringObjTrait {\n *     static constexpr const std::nullptr_t VisitAttrs = nullptr;\n *\n *    static bool SEqualReduce(const runtime::StringObj* lhs,\n *                             const runtime::StringObj* rhs,\n *                             SEqualReducer equal) {\n *      if (lhs == rhs) return true;\n *      if (lhs->size != rhs->size) return false;\n *      if (lhs->data != rhs->data) return true;\n *      return std::memcmp(lhs->data, rhs->data, lhs->size) != 0;\n *    }\n *  };\n *\n *  TVM_REGISTER_REFLECTION_VTABLE(runtime::StringObj, StringObjTrait);\n *\n * \\endcode\n *\n * \\note This macro can be called in different place as TVM_REGISTER_OBJECT_TYPE.\n *       And can be used to register the related reflection functions for runtime objects.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/reflection.h",
    "lines": [
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642591,
    "satd_repo": 70746484,
    "satd_sha": "997a14eda9aec3b343e742e55c3018f9dc23d8c3",
    "satd_text": "!\n   * \\brief Equality comparison function.\n   * \\note We use function pointer, instead of std::function\n   *       to reduce the dispatch overhead as field visit\n   *       does not need as much customization.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/reflection.h",
    "lines": [
      90,
      91,
      92,
      93,
      94,
      95
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6642600,
    "satd_repo": 70746484,
    "satd_sha": "997a14eda9aec3b343e742e55c3018f9dc23d8c3",
    "satd_text": " Use DefEqual as buffer can define variables\n in its semantics, skip name as name is not important.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/buffer.h",
    "lines": [
      154,
      155
    ],
    "matched_text": "    // Use DefEqual as buffer can define variables"
  },
  {
    "satd_id": 6642614,
    "satd_repo": 70746484,
    "satd_sha": "dada6761ee929211909a4dbd90dd85afb378cf16",
    "satd_text": " TODO(shoubhik) - The lowering can be further optimized. Instead of inserting requantize in\n the start, we can insert requantize at the end if both input tensors have same qnn params. In\n that case, we can first subtract the tensors, add the zero point, and requantize at the end.\n This can be done in future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/subtract.cc",
    "lines": [
      48,
      49,
      50,
      51
    ],
    "matched_text": "  // TODO(shoubhik) - The lowering can be further optimized. Instead of inserting requantize in"
  },
  {
    "satd_id": 6642677,
    "satd_repo": 70746484,
    "satd_sha": "f4286cc71776e1e731be711fcbe7b161d595e39a",
    "satd_text": " pylint: disable=invalid-name, unnecessary-lambda, too-many-arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/tensor_intrin.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unnecessary-lambda, too-many-arguments"
  },
  {
    "satd_id": 6642733,
    "satd_repo": 70746484,
    "satd_sha": "314f31b0b4e2dbc934d74afe90bff1ef3ac40b17",
    "satd_text": " TODO:\n This schedule has incorrect result on some hardware platforms (like NV Jetson TX2)\n Let us comment it out but not remove.\n see discussion:\n https://discuss.tvm.ai/t/autotuner-incorrect-result-after-tuning-mobilenetv2-on-arm-cpu/6088\n strategy.add_implementation(\n     wrap_compute_conv2d(topi.arm_cpu.depthwise_conv2d_nchw_spatial_pack),\n     wrap_topi_schedule(topi.arm_cpu.schedule_depthwise_conv2d_nchw_spatial_pack),\n     name=\"depthwise_conv2d_nchw_spatial_pack.arm_cpu\",\n     plevel=15)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117
    ],
    "matched_text": "            # TODO:"
  },
  {
    "satd_id": 6642734,
    "satd_repo": 70746484,
    "satd_sha": "314f31b0b4e2dbc934d74afe90bff1ef3ac40b17",
    "satd_text": " TODO:\n This schedule has incorrect result on some hardware platforms (like NV Jetson TX2)\n Let us comment it out but not remove.\n see discussion:\n https://discuss.tvm.ai/t/autotuner-incorrect-result-after-tuning-mobilenetv2-on-arm-cpu/6088",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      108,
      109,
      110,
      111,
      112
    ],
    "matched_text": "            # TODO:"
  },
  {
    "satd_id": 6642734,
    "satd_repo": 70746484,
    "satd_sha": "314f31b0b4e2dbc934d74afe90bff1ef3ac40b17",
    "satd_text": " TODO:\n This schedule has incorrect result on some hardware platforms (like NV Jetson TX2)\n Let us comment it out but not remove.\n see discussion:\n https://discuss.tvm.ai/t/autotuner-incorrect-result-after-tuning-mobilenetv2-on-arm-cpu/6088",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/depthwise_conv2d.py",
    "lines": [
      142,
      143,
      144,
      145,
      146
    ],
    "matched_text": "# TODO:"
  },
  {
    "satd_id": 6642807,
    "satd_repo": 70746484,
    "satd_sha": "e6dd8e1e7b38fc2862c53f445899997bb8a19534",
    "satd_text": "!\n* \\brief Convert all expressions of TensorType into GradCell,\n* an algebraic data type defined in gradient.rly.\n*\n* This will delay or decrease memory usage. All calls to\n* ones, ones_like, zeros, zeros_like will not immediately instantiate a tensor in memory,\n* rather only instantiate if needed. It also defines + and * operation\n* between GradCell types which can increase performance when using\n* zero-filled or one-filled tensors, which is the case in reverse mode ad.\n*\n* \\return the pass\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642826,
    "satd_repo": 70746484,
    "satd_sha": "2adcb738450c9f67d23ba6dee809974de9ec2c81",
    "satd_text": "!\n   * \\brief The constructor\n   * \\param name_hint The name hint of a variable.\n   * \\param type_annotation The type annotation of a variable.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/relay/expr.h",
    "lines": [
      172,
      173,
      174,
      175,
      176
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6642838,
    "satd_repo": 70746484,
    "satd_sha": "2adcb738450c9f67d23ba6dee809974de9ec2c81",
    "satd_text": " To be consistent with previous behavior, a nullptr layout is created\n when argument is invalid.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/ir/data_layout.cc",
    "lines": [
      359,
      360
    ],
    "matched_text": "  // To be consistent with previous behavior, a nullptr layout is created"
  },
  {
    "satd_id": 6642839,
    "satd_repo": 70746484,
    "satd_sha": "7bc0b27ecb4de359243937a4b3954857a64f44fd",
    "satd_text": " TODO(kevinthesun): Use VM for all cases.\n pylint: disable=import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/common.py",
    "lines": [
      492,
      493
    ],
    "matched_text": "        # TODO(kevinthesun): Use VM for all cases."
  },
  {
    "satd_id": 6642858,
    "satd_repo": 70746484,
    "satd_sha": "50b5adaac2956712d65e14c163148c1e6279f5e2",
    "satd_text": " cleanup old states",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_docs.sh",
    "lines": [
      22
    ],
    "matched_text": "# cleanup old states"
  },
  {
    "satd_id": 6642868,
    "satd_repo": 70746484,
    "satd_sha": "05b0f7e00217958d4b2017802b2e4bddcc3aaa0b",
    "satd_text": " set of intrinsics does not support fp16 yet.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/unittest/test_target_codegen_cuda.py",
    "lines": [
      390
    ],
    "matched_text": "        # set of intrinsics does not support fp16 yet."
  },
  {
    "satd_id": 6642925,
    "satd_repo": 70746484,
    "satd_sha": "1d83ece55dfa25cf810b97b665b3620d2322cbc1",
    "satd_text": " Enable custom logging - this will cause TVM to pass every log message\n * through CustomLogMessage instead of LogMessage. By enabling this, we must\n * implement dmlc::CustomLogMessage::Log. We use this to pass TVM log\n * messages to Android logcat.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/android_camera/app/src/main/jni/tvm_runtime.h",
    "lines": [
      27,
      28,
      29,
      30,
      31
    ],
    "matched_text": "/* Enable custom logging - this will cause TVM to pass every log message"
  },
  {
    "satd_id": 6642958,
    "satd_repo": 70746484,
    "satd_sha": "5088a034b85bcb8ca806fd9e3c8b1f7256a7978c",
    "satd_text": " Define a const buffer: float const_0[64] = {1.0, 2.0, ...};\n\n Technically, you may need: static float* const_0 = (float*)malloc(4 * 64)\n to avoid possible stack overflow.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen.cc",
    "lines": [
      81,
      82,
      83,
      84
    ],
    "matched_text": "    // Define a const buffer: float const_0[64] = {1.0, 2.0, ...};"
  },
  {
    "satd_id": 6642968,
    "satd_repo": 70746484,
    "satd_sha": "2e8f3a910af69d6d239596e006a0985b12634272",
    "satd_text": " TODO: implement argsort_nms with Thrust",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/cuda/sort.py",
    "lines": [
      321
    ],
    "matched_text": "        # TODO: implement argsort_nms with Thrust"
  },
  {
    "satd_id": 6642978,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": "!\n * \\brief Rewrite the pointer content type of arguments,\n *  as well as Alloc internal to the function to use\n *  the most frequently accessed type for load/store\n *  to avoid pointer casting in backend when possible.\n *\n * \\note implemeneted in storage_rewrite.cc\n * \\param f The function to be trasnformed\n * \\return Transformed function.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/ir_pass.h",
    "lines": [
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514,
      515,
      516
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642978,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": "!\n * \\brief Rewrite the pointer content type of arguments,\n *  as well as Alloc internal to the function to use\n *  the most frequently accessed type for load/store\n *  to avoid pointer casting in backend when possible.\n *\n * \\note implemeneted in storage_rewrite.cc\n * \\param f The function to be trasnformed\n * \\return Transformed function.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/ir_pass.h",
    "lines": [
      520,
      521,
      522,
      523,
      524,
      525,
      526,
      527,
      528,
      529
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6642984,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " TODO(tvm-team):\n Update the function type to respect the ret_type field of f.\n Once we allow more flexibility in the PrimFunc.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/target/llvm/codegen_llvm.cc",
    "lines": [
      125,
      126,
      127
    ],
    "matched_text": "  // TODO(tvm-team):"
  },
  {
    "satd_id": 6642985,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " TODO(tvm-team) consider put storage scope into the pointer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/codegen_llvm.cc",
    "lines": [
      333
    ],
    "matched_text": "    // TODO(tvm-team) consider put storage scope into the pointer type."
  },
  {
    "satd_id": 6642986,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " TODO(tqchen): remove the entry function behavior as it does not\n makes sense when we start to use multiple modules.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/llvm/llvm_module.cc",
    "lines": [
      216,
      217
    ],
    "matched_text": "    // TODO(tqchen): remove the entry function behavior as it does not"
  },
  {
    "satd_id": 6642988,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " Register handle data type\n TODO(tvm-team): consider simply keep type info in the\n type annotation(via a normalizing rewriting).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_c.cc",
    "lines": [
      101,
      102,
      103
    ],
    "matched_text": "      // Register handle data type"
  },
  {
    "satd_id": 6642988,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " Register handle data type\n TODO(tvm-team): consider simply keep type info in the\n type annotation(via a normalizing rewriting).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_metal.cc",
    "lines": [
      79,
      80,
      81
    ],
    "matched_text": "    // Register handle data type"
  },
  {
    "satd_id": 6642995,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " Register handle data type\n TODO(tvm-team): consider simply keep type info in the\n type annotation(via a normalizing rewriting).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_c.cc",
    "lines": [
      101,
      102,
      103
    ],
    "matched_text": "      // Register handle data type"
  },
  {
    "satd_id": 6642995,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " Register handle data type\n TODO(tvm-team): consider simply keep type info in the\n type annotation(via a normalizing rewriting).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_metal.cc",
    "lines": [
      79,
      80,
      81
    ],
    "matched_text": "    // Register handle data type"
  },
  {
    "satd_id": 6642999,
    "satd_repo": 70746484,
    "satd_sha": "841725cc5858a196297bbd316a589afb2f87ab18",
    "satd_text": " TODO(tqchen): add recursive type inference for Call here\n once we introduced the corresponding fields to the IR.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/tir/ir/op.cc",
    "lines": [
      49,
      50
    ],
    "matched_text": "  // TODO(tqchen): add recursive type inference for Call here"
  },
  {
    "satd_id": 6643029,
    "satd_repo": 70746484,
    "satd_sha": "c3b89b76b408757cfac56034d0f7902732d2c08d",
    "satd_text": " overload min and max to avoid ambiguous call errors",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_opencl.h",
    "lines": [
      59
    ],
    "matched_text": "  // overload min and max to avoid ambiguous call errors"
  },
  {
    "satd_id": 6643030,
    "satd_repo": 70746484,
    "satd_sha": "c3b89b76b408757cfac56034d0f7902732d2c08d",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_target_codegen_opencl.py",
    "lines": [
      36
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6643030,
    "satd_repo": 70746484,
    "satd_sha": "c3b89b76b408757cfac56034d0f7902732d2c08d",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_target_codegen_opencl.py",
    "lines": [
      52
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6643030,
    "satd_repo": 70746484,
    "satd_sha": "c3b89b76b408757cfac56034d0f7902732d2c08d",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_target_codegen_opencl.py",
    "lines": [
      80
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6643030,
    "satd_repo": 70746484,
    "satd_sha": "c3b89b76b408757cfac56034d0f7902732d2c08d",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_target_codegen_opencl.py",
    "lines": [
      109
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6643094,
    "satd_repo": 70746484,
    "satd_sha": "e03164159ce08f2739a26c10531b26713e72153e",
    "satd_text": " TODO(tvm-team) redirect to Text printer once we have a good text format.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/ir/function.cc",
    "lines": [
      61
    ],
    "matched_text": "  // TODO(tvm-team) redirect to Text printer once we have a good text format."
  },
  {
    "satd_id": 6643096,
    "satd_repo": 70746484,
    "satd_sha": "e03164159ce08f2739a26c10531b26713e72153e",
    "satd_text": " Assume void-return type for now\n TODO(tvm-team) consider type deduction from body.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/ir/function.cc",
    "lines": [
      35,
      36
    ],
    "matched_text": "  // Assume void-return type for now"
  },
  {
    "satd_id": 6643109,
    "satd_repo": 70746484,
    "satd_sha": "e03164159ce08f2739a26c10531b26713e72153e",
    "satd_text": " Temporarily skip non-relay functions.\n TODO(tvm-team) enhance the code to work for all functions",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/relay_text_printer.cc",
    "lines": [
      104,
      105
    ],
    "matched_text": "      // Temporarily skip non-relay functions."
  },
  {
    "satd_id": 6643111,
    "satd_repo": 70746484,
    "satd_sha": "e03164159ce08f2739a26c10531b26713e72153e",
    "satd_text": " TODO(tqchen): add recursive type inference for Var and Call here\n once we introduced the corresponding fields to the IR.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/tir/ir/op.cc",
    "lines": [
      42,
      43
    ],
    "matched_text": "  // TODO(tqchen): add recursive type inference for Var and Call here"
  },
  {
    "satd_id": 6643120,
    "satd_repo": 70746484,
    "satd_sha": "327891cbb863c9ef48ec8ba3cab950dee7c845c3",
    "satd_text": " Function traversal order isn't obvious, so checking both orders is more consistent",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_analysis_extract_fused_functions.py",
    "lines": [
      102
    ],
    "matched_text": "    # Function traversal order isn't obvious, so checking both orders is more consistent"
  },
  {
    "satd_id": 6643136,
    "satd_repo": 70746484,
    "satd_sha": "681df4fcd57851b96e6fdc47c1576908c8636bd3",
    "satd_text": " Dilation not supported yet. Return None if dilation is not (1, 1)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/cuda/conv2d_alter_op.py",
    "lines": [
      159
    ],
    "matched_text": "    # Dilation not supported yet. Return None if dilation is not (1, 1)"
  },
  {
    "satd_id": 6643170,
    "satd_repo": 70746484,
    "satd_sha": "2421a85474cc3ea291e87dab8133022e0d13c07f",
    "satd_text": " Tighten iv's extent to min(parent_extent, factor_or_nparts), only if all of the\n following conditions are met:\n 1. No leaf IterVar derived from iv binds to any thread.  People may use split\n to force an IterVar extent to match the number of allocated threads to fuse stages\n that require different number of threads.  We don't want to change these extents.\n 2. allow_missing is false, i.e. that PassDownDomain is called by the final InferBound,\n rather than by an early compiler phase, such as rfactor().  We don't want to tighten an\n IterVar in an early phase allowing missing IterVars, because it may bind to a thread later.\n 3. range_parent's extent is not 0.  At lest one Topi test has a case where a tensor has one\n zero-sized dimension.  Split creates iv with a positive extent to avoid zero-extent\n IterVar.  We don't touch it.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/schedule/message_passing.cc",
    "lines": [
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134
    ],
    "matched_text": "      // Tighten iv's extent to min(parent_extent, factor_or_nparts), only if all of the"
  },
  {
    "satd_id": 6643260,
    "satd_repo": 70746484,
    "satd_sha": "0755e4a58897c64d6a7ffc86bab3df45554bac7e",
    "satd_text": " TODO enforce 4-way padding in topi/nn/conv2d after #4644 merged\n convert 2-way padding to 4-way padding",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/qnn/op/qnn.py",
    "lines": [
      284,
      285
    ],
    "matched_text": "    # TODO enforce 4-way padding in topi/nn/conv2d after #4644 merged"
  },
  {
    "satd_id": 6643275,
    "satd_repo": 70746484,
    "satd_sha": "45ee7b5fef67ef362538885802f68cbd034f1524",
    "satd_text": " `__tanf` seems to produce some values too deviant from numpy tan version.\n So, let's use just `tanf` instead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/intrin_rule_cuda.cc",
    "lines": [
      62,
      63
    ],
    "matched_text": "          // `__tanf` seems to produce some values too deviant from numpy tan version."
  },
  {
    "satd_id": 6643278,
    "satd_repo": 70746484,
    "satd_sha": "6026af501e32e170a19b3783a164425c23b66f26",
    "satd_text": " Temporary disable rust tests\n remove this line to re-enable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_rust.sh",
    "lines": [
      22,
      23
    ],
    "matched_text": "# Temporary disable rust tests"
  },
  {
    "satd_id": 6643330,
    "satd_repo": 70746484,
    "satd_sha": "93dff448b06a8fd6e133326cf8c32bb623817fc3",
    "satd_text": " test on only cpu for now, torch cannot run quant models on cuda\n also not to make CI too slow",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/pytorch/qnn_test.py",
    "lines": [
      46,
      47
    ],
    "matched_text": "        # test on only cpu for now, torch cannot run quant models on cuda"
  },
  {
    "satd_id": 6643336,
    "satd_repo": 70746484,
    "satd_sha": "93dff448b06a8fd6e133326cf8c32bb623817fc3",
    "satd_text": " TODO: maybe fix this\n This assumes expand_as can be removed because TVM has broadcast op",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      720,
      721
    ],
    "matched_text": "        # TODO: maybe fix this"
  },
  {
    "satd_id": 6643348,
    "satd_repo": 70746484,
    "satd_sha": "450f7163d22890de78a68abf85245231d556eb8b",
    "satd_text": "! Support low-level debugging in MISRA-C runtime ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/bundle_deploy/runtime.c",
    "lines": [
      26
    ],
    "matched_text": "/*! Support low-level debugging in MISRA-C runtime */"
  },
  {
    "satd_id": 6643363,
    "satd_repo": 70746484,
    "satd_sha": "450f7163d22890de78a68abf85245231d556eb8b",
    "satd_text": " Assign the pooled entries. A unified memory pool is used to simplifiy\n memory assignment for each node entry. The allocated memory on each device\n is mapped to this pool.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/graph_runtime.c",
    "lines": [
      531,
      532,
      533
    ],
    "matched_text": "  // Assign the pooled entries. A unified memory pool is used to simplifiy"
  },
  {
    "satd_id": 6643468,
    "satd_repo": 70746484,
    "satd_sha": "450f7163d22890de78a68abf85245231d556eb8b",
    "satd_text": " handle uses 64 bit by default.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/crt/packed_func.h",
    "lines": [
      52
    ],
    "matched_text": "    t.bits = 64;  // handle uses 64 bit by default."
  },
  {
    "satd_id": 6643477,
    "satd_repo": 70746484,
    "satd_sha": "5b4cf5df70b42ab64629decf587b413bf836f5e0",
    "satd_text": " 8. Clear the interrupt bit of nSTATUS (ns) in the gpio interrupt\n register (fpgamgrregs.mon.gpio_porta_eoi).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/de10nano/de10nano_mgr.h",
    "lines": [
      441,
      442
    ],
    "matched_text": "      // 8. Clear the interrupt bit of nSTATUS (ns) in the gpio interrupt"
  },
  {
    "satd_id": 6643492,
    "satd_repo": 70746484,
    "satd_sha": "5b4cf5df70b42ab64629decf587b413bf836f5e0",
    "satd_text": " Reg32 is a static base class interface and implementation\n of a generic 32 bit register that avoids the use of a virtual\n class and ugly bit shift manipulations.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/de10nano/de10nano_mgr.h",
    "lines": [
      39,
      40,
      41
    ],
    "matched_text": "  // Reg32 is a static base class interface and implementation"
  },
  {
    "satd_id": 6643498,
    "satd_repo": 70746484,
    "satd_sha": "5b4cf5df70b42ab64629decf587b413bf836f5e0",
    "satd_text": " Configuration sequence documented at page A-34.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/src/de10nano/de10nano_mgr.h",
    "lines": [
      378
    ],
    "matched_text": "  // Configuration sequence documented at page A-34."
  },
  {
    "satd_id": 6643507,
    "satd_repo": 70746484,
    "satd_sha": "28ee806dcbd803f4079365dd308a673bd1a89588",
    "satd_text": " Inline the functions that have been lifted by the module scope.\n\n TODO(@zhiics) Note that we need to be careful about the subgraphs with\n global function calls. We should make sure that these callees are also\n inline functions. However, this should be very unlikely for accelerators\n and vendor-provided libraries. So we don't handle for now.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/build_module.cc",
    "lines": [
      337,
      338,
      339,
      340,
      341,
      342
    ],
    "matched_text": "    // Inline the functions that have been lifted by the module scope."
  },
  {
    "satd_id": 6643511,
    "satd_repo": 70746484,
    "satd_sha": "28ee806dcbd803f4079365dd308a673bd1a89588",
    "satd_text": " Create a global function and add it to the IRModule for the subgraph.\n This way we lift the functions that should be handled by external\n codegen to the module scope and rely on the pass manager to prevent relay\n function level passes (i.e. simplify inference and fusion) optimizing it.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partition_graph.cc",
    "lines": [
      225,
      226,
      227,
      228
    ],
    "matched_text": "      // Create a global function and add it to the IRModule for the subgraph."
  },
  {
    "satd_id": 6643513,
    "satd_repo": 70746484,
    "satd_sha": "d992468d80af816f0413fc43c2ee1c02f7fe19c3",
    "satd_text": " `__tanf` seems to produce some values too deviant from numpy tan version.\n So, let's use just `tanf` instead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/intrin_rule_cuda.cc",
    "lines": [
      62,
      63
    ],
    "matched_text": "          // `__tanf` seems to produce some values too deviant from numpy tan version."
  },
  {
    "satd_id": 6643516,
    "satd_repo": 70746484,
    "satd_sha": "f63b249dd01b8b59258a1ff310e957c5b1d16dd9",
    "satd_text": "!\n * \\brief Remove the unused functions in the Relay IRModule.\n *\n * \\param entry_functions The entry functions used to search the functions that\n *        are being used.\n *\n * \\return The pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6643555,
    "satd_repo": 70746484,
    "satd_sha": "fc7f0783940c362bf48cd46817956381196201e2",
    "satd_text": " test on only cpu for now, torch cannot run quant models on cuda\n also not to make CI too slow",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/pytorch/qnn_test.py",
    "lines": [
      46,
      47
    ],
    "matched_text": "        # test on only cpu for now, torch cannot run quant models on cuda"
  },
  {
    "satd_id": 6643561,
    "satd_repo": 70746484,
    "satd_sha": "fc7f0783940c362bf48cd46817956381196201e2",
    "satd_text": " TODO: maybe fix this\n This assumes expand_as can be removed because TVM has broadcast op",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      717,
      718
    ],
    "matched_text": "        # TODO: maybe fix this"
  },
  {
    "satd_id": 6643565,
    "satd_repo": 70746484,
    "satd_sha": "585f9ce6e7bef7d0e8902b1c1e55dcb3bbe84eed",
    "satd_text": " Tighten iv's extent to min(parent_extent, factor_or_nparts), only if all of the\n following conditions are met:\n 1. No leaf IterVar derived from iv binds to any thread.  People may use split\n to force an IterVar extent to match the number of allocated threads to fuse stages\n that require different number of threads.  We don't want to change these extents.\n 2. allow_missing is false, i.e. that PassDownDomain is called by the final InferBound,\n rather than by an early compiler phase, such as rfactor().  We don't want to tighten an\n IterVar in an early phase allowing missing IterVars, because it may bind to a thread later.\n 3. range_parent's extent is not 0.  At lest one Topi test has a case where a tensor has one\n zero-sized dimension.  Split creates iv with a positive extent to avoid zero-extent\n IterVar.  We don't touch it.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/te/schedule/message_passing.cc",
    "lines": [
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134
    ],
    "matched_text": "      // Tighten iv's extent to min(parent_extent, factor_or_nparts), only if all of the"
  },
  {
    "satd_id": 6643573,
    "satd_repo": 70746484,
    "satd_sha": "98b1759052c2dacb38b6d3e0bbdba38002bbef75",
    "satd_text": " TODO(@zhiics, @comaniac) Handle composite functions.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/annotate_target.cc",
    "lines": [
      42
    ],
    "matched_text": "    // TODO(@zhiics, @comaniac) Handle composite functions."
  },
  {
    "satd_id": 6643579,
    "satd_repo": 70746484,
    "satd_sha": "8502691b5b7ca152da9eb626529070db53d479c8",
    "satd_text": " Operators that get pruned away when the complete graph is frozen.\n These operators are not needed for inference.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      1503,
      1504
    ],
    "matched_text": "# Operators that get pruned away when the complete graph is frozen."
  },
  {
    "satd_id": 6643585,
    "satd_repo": 70746484,
    "satd_sha": "0fb48360e63589a695263dd1886209a338f8f747",
    "satd_text": " TODO(zhiics) Maybe move this to CallGraph, but updating function from\n CallGraph arbitarily may lead to incorrect CallGraph.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/inline.cc",
    "lines": [
      187,
      188
    ],
    "matched_text": "      // TODO(zhiics) Maybe move this to CallGraph, but updating function from"
  },
  {
    "satd_id": 6643599,
    "satd_repo": 70746484,
    "satd_sha": "0fb48360e63589a695263dd1886209a338f8f747",
    "satd_text": " Clean up the functions that are inlined and have no reference.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/inline.cc",
    "lines": [
      193
    ],
    "matched_text": "  // Clean up the functions that are inlined and have no reference."
  },
  {
    "satd_id": 6643615,
    "satd_repo": 70746484,
    "satd_sha": "51af454ad7f97a49b19bd02830edcdff9379c58f",
    "satd_text": " Cache the following ops. They will be used in the passes repeatedly for\n operator equivalence checking so that the registry lookup overhead can be\n reduced.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fast_math.cc",
    "lines": [
      51,
      52,
      53
    ],
    "matched_text": "  // Cache the following ops. They will be used in the passes repeatedly for"
  },
  {
    "satd_id": 6643625,
    "satd_repo": 70746484,
    "satd_sha": "7ccb4363eefa76ae355ee263aa5527d43fb699fb",
    "satd_text": " It seems variable names could change the first time a copy is made\n Use the copy of the graph here to prevent troubles later",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      994,
      995
    ],
    "matched_text": "    # It seems variable names could change the first time a copy is made"
  },
  {
    "satd_id": 6643630,
    "satd_repo": 70746484,
    "satd_sha": "a6fae5ed64d1e8bf0cb0d0e01cb27d7aa537e0e1",
    "satd_text": " cleanup cache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_sphinx_precheck.sh",
    "lines": [
      30
    ],
    "matched_text": "# cleanup cache"
  },
  {
    "satd_id": 6643638,
    "satd_repo": 70746484,
    "satd_sha": "6b1136dd311190a70d22fd13751b4f64ac3e075a",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      647
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6643641,
    "satd_repo": 70746484,
    "satd_sha": "9816efc2df63cf6a14a6de46dc2adfafde58acc1",
    "satd_text": " The following hack term is used to make the padding in batch gemm (\"M\")\n effective, otherwise the padding will be eliminated by bound inference.\n Use `tvm.tir.Mul` instead of `*` to avoid issues in const folding.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6643647,
    "satd_repo": 70746484,
    "satd_sha": "9816efc2df63cf6a14a6de46dc2adfafde58acc1",
    "satd_text": " :code:`te.compute`. Imagine for more complicated operations how much details we need to provide.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6643686,
    "satd_repo": 70746484,
    "satd_sha": "eba50ad8b27cffc05a0a59aa796265f5cbf9446e",
    "satd_text": " Update the current level and clean the next level.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/call_graph.cc",
    "lines": [
      201
    ],
    "matched_text": "    // Update the current level and clean the next level."
  },
  {
    "satd_id": 6643696,
    "satd_repo": 70746484,
    "satd_sha": "eba50ad8b27cffc05a0a59aa796265f5cbf9446e",
    "satd_text": " Only GlobalVar nodes need to be handled in a function. It indicates that\n the global function of a callee is called by the function that is being\n processed. An edge will be added from the current global function, cg_node,\n to the node that contains the found callee GlobalVarNode.\n\n This is the major overhead for constructing a call graph because the\n post-order visitor will visit each AST node of the current function to\n figure out the dependencies between functions.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/call_graph.cc",
    "lines": [
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64
    ],
    "matched_text": "  // Only GlobalVar nodes need to be handled in a function. It indicates that"
  },
  {
    "satd_id": 6643700,
    "satd_repo": 70746484,
    "satd_sha": "eba50ad8b27cffc05a0a59aa796265f5cbf9446e",
    "satd_text": " Find out the missing global functions if there are any to help debugging.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/call_graph.cc",
    "lines": [
      160
    ],
    "matched_text": "  // Find out the missing global functions if there are any to help debugging."
  },
  {
    "satd_id": 6643751,
    "satd_repo": 70746484,
    "satd_sha": "eba50ad8b27cffc05a0a59aa796265f5cbf9446e",
    "satd_text": "!\n   * \\brief Remove a GlobalVar in a given CallGraphEntry from the current\n   *        IR module.\n   *\n   * \\param cg_node The CallGraphEntry that contains a global function to be\n   *        removed.\n   * \\param update_call_graph Indicate if we will update the CallGraph as well\n   *        since updating is costly. We are only able to remove a leaf function\n   *        when update_call_graph is disabled because the edges pointing to\n   *        functions being removed are not updated.\n   *\n   * \\return The GlobalVar removed from the current module.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/call_graph.h",
    "lines": [
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6643805,
    "satd_repo": 70746484,
    "satd_sha": "b0b1e7daf4f9a44505915e57682ce59d43873ddf",
    "satd_text": "##################################################################### \n .. note:: \n \n   By definition, IterVars are internal nodes and computes are leaf nodes in \n   a schedule tree.   The edges among IterVars and compute within one stage are \n   omitted, making every stage a block, for better readability.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/language/tedd.py",
    "lines": [
      132,
      133,
      134,
      135,
      136,
      137
    ],
    "matched_text": "###################################################################### "
  },
  {
    "satd_id": 6643807,
    "satd_repo": 70746484,
    "satd_sha": "b0b1e7daf4f9a44505915e57682ce59d43873ddf",
    "satd_text": "##################################################################### \n Summary \n ------- \n This tutorial demonstrates the usage of TEDD.  We use an example built \n with TOPI to show the schedules under the hood.  You can also use \n it before and after any schedule primitive to inspect its effect.\n",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/language/tedd.py",
    "lines": [
      158,
      159,
      160,
      161,
      162,
      163
    ],
    "matched_text": "###################################################################### "
  },
  {
    "satd_id": 6643814,
    "satd_repo": 70746484,
    "satd_sha": "b0b1e7daf4f9a44505915e57682ce59d43873ddf",
    "satd_text": "##################################################################### \n Render Graphs with TEDD\n -----------------------\n We render graphs to see the computation  \n and how it is scheduled.   \n If you run the tutorial in a Jupyter notebook, you can use the following commented lines  \n to render SVG figures showing in notebook directly.\n",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/language/tedd.py",
    "lines": [
      72,
      73,
      74,
      75,
      76,
      77,
      78
    ],
    "matched_text": "###################################################################### "
  },
  {
    "satd_id": 6643821,
    "satd_repo": 70746484,
    "satd_sha": "87c20bb2b266a3df1c0228d4bf996c8cd5cf9c66",
    "satd_text": " TODO: Temporary fix to remove prim::CallMethod node introduced in PT 1.4",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      731
    ],
    "matched_text": "        # TODO: Temporary fix to remove prim::CallMethod node introduced in PT 1.4"
  },
  {
    "satd_id": 6643825,
    "satd_repo": 70746484,
    "satd_sha": "87c20bb2b266a3df1c0228d4bf996c8cd5cf9c66",
    "satd_text": " TODO: Add reshape when channel multiplier > 1. Pending PR #4644",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      210
    ],
    "matched_text": "        # TODO: Add reshape when channel multiplier > 1. Pending PR #4644"
  },
  {
    "satd_id": 6643834,
    "satd_repo": 70746484,
    "satd_sha": "87c20bb2b266a3df1c0228d4bf996c8cd5cf9c66",
    "satd_text": " TODO: Figure out a better way to get typing to work for tensor + scalar",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/pytorch.py",
    "lines": [
      37
    ],
    "matched_text": "        # TODO: Figure out a better way to get typing to work for tensor + scalar"
  },
  {
    "satd_id": 6643846,
    "satd_repo": 70746484,
    "satd_sha": "81d1124055ddbf46ee9c2daa89c03a294548c37e",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/darknet.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6643852,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": "!\n * \\brief Operator strategy to choose implementation.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/op_strategy.h",
    "lines": [
      128,
      129,
      130
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643872,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643874,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643879,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      149
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643879,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      103
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643880,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda\n elif layout == \"NHWC\":\n     assert kernel_layout == \"HWIO\"\n     strategy.add_implementation(\n         wrap_compute_conv2d(topi.cuda.conv2d_nhwc),\n         wrap_topi_schedule(topi.cuda.schedule_conv2d_nhwc),\n         name=\"conv2d_nhwc.cuda\")",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      108,
      109,
      110,
      111,
      112,
      113,
      114
    ],
    "matched_text": "        # TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda"
  },
  {
    "satd_id": 6643880,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda\n elif layout == \"NHWC\":\n     assert kernel_layout == \"HWIO\"\n     strategy.add_implementation(\n         wrap_compute_conv2d(topi.cuda.conv2d_nhwc),\n         wrap_topi_schedule(topi.cuda.schedule_conv2d_nhwc),\n         name=\"conv2d_nhwc.cuda\")",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      63,
      64,
      65,
      66,
      67,
      68,
      69
    ],
    "matched_text": "        # TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda"
  },
  {
    "satd_id": 6643881,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      88
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643881,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      44
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643882,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_algorithm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,unused-wildcard-import,wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/deformable_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6643887,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/generic/nn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643921,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643924,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643926,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " conv2d_NCHWc won't work without alter op layout pass\n TODO(@Laurawly): fix this",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      43,
      44
    ],
    "matched_text": "            # conv2d_NCHWc won't work without alter op layout pass"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643928,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643932,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643935,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      149
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643935,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      103
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use group_conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643936,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda\n elif layout == \"NHWC\":\n     assert kernel_layout == \"HWIO\"\n     strategy.add_implementation(\n         wrap_compute_conv2d(topi.cuda.conv2d_nhwc),\n         wrap_topi_schedule(topi.cuda.schedule_conv2d_nhwc),\n         name=\"conv2d_nhwc.cuda\")",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      108,
      109,
      110,
      111,
      112,
      113,
      114
    ],
    "matched_text": "        # TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda"
  },
  {
    "satd_id": 6643936,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda\n elif layout == \"NHWC\":\n     assert kernel_layout == \"HWIO\"\n     strategy.add_implementation(\n         wrap_compute_conv2d(topi.cuda.conv2d_nhwc),\n         wrap_topi_schedule(topi.cuda.schedule_conv2d_nhwc),\n         name=\"conv2d_nhwc.cuda\")",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      63,
      64,
      65,
      66,
      67,
      68,
      69
    ],
    "matched_text": "        # TODO(@alexgl-github): Re-enable this after fix the conv2d_nhwc for cuda"
  },
  {
    "satd_id": 6643938,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      88
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643938,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      44
    ],
    "matched_text": "            # TODO(@vinx13, @icemelon9): Use conv2d_NCHWc_int8 when dtype is int8/uint8."
  },
  {
    "satd_id": 6643940,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,unused-wildcard-import,wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,unused-wildcard-import,wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643941,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6643943,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " this implementation may not be well-optimized, so use plevel=8 for now.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      238
    ],
    "matched_text": "        # this implementation may not be well-optimized, so use plevel=8 for now."
  },
  {
    "satd_id": 6643970,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@icemelon9): Allow tvm to generate multiple kernels for dynamic shapes.\n   Currently, we just use the implementation with highest plevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/backend/compile_engine.py",
    "lines": [
      252,
      253
    ],
    "matched_text": "        # TODO(@icemelon9): Allow tvm to generate multiple kernels for dynamic shapes."
  },
  {
    "satd_id": 6643974,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " Prepare the call_node->checked_type(). For the call node inputs, we ensure that\n the shape is Int32. Following code ensures the same for the output as well.\n TODO(@icemelon9): Support recursive tuple",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/backend/compile_engine.py",
    "lines": [
      220,
      221,
      222
    ],
    "matched_text": "    # Prepare the call_node->checked_type(). For the call node inputs, we ensure that"
  },
  {
    "satd_id": 6643998,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": "pylint: disable=unused-argument,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/op.py",
    "lines": [
      17
    ],
    "matched_text": "#pylint: disable=unused-argument,invalid-name"
  },
  {
    "satd_id": 6644006,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@kevinthesun, @icemelon9): This won't work if inputs/outputs are dynamic shapes.\n   Probably we need to disable the AlterOpLayout when compiling dynamic models.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/alter_op_layout.cc",
    "lines": [
      86,
      87
    ],
    "matched_text": "      // TODO(@kevinthesun, @icemelon9): This won't work if inputs/outputs are dynamic shapes."
  },
  {
    "satd_id": 6644010,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@kevinthesun): Need to fix the compute in conv2d_NCHWc to support any",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      388
    ],
    "matched_text": "# TODO(@kevinthesun): Need to fix the compute in conv2d_NCHWc to support any"
  },
  {
    "satd_id": 6644012,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@anijain2305, @icemelon9): We should fix this. This doesn't seem to be the\n   right behavior of alter_layout",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_alter_op_layout.py",
    "lines": [
      942,
      943
    ],
    "matched_text": "# TODO(@anijain2305, @icemelon9): We should fix this. This doesn't seem to be the"
  },
  {
    "satd_id": 6644017,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): It's invalid to call schedule_direct_cuda for NHWC layout\n  as it assumes the input layout to be NCHW. Please fix this.\n @autotvm.register_topi_compute(\"conv2d_nhwc.cuda\")\n def conv2d_nhwc(cfg, data, kernel, strides, padding, dilation, out_dtype='float32'):\n     return nn.conv2d_nhwc(data, kernel, strides, padding, dilation, out_dtype)\n\n\n @autotvm.register_topi_schedule(\"conv2d_nhwc.cuda\")\n def schedule_conv2d_nhwc(cfg, outs):\n     outs = [outs] if isinstance(outs, tvm.tensor.Tensor) else outs\n     s = tvm.create_schedule([x.op for x in outs])\n\n     def _callback(op):\n         if op.tag == 'conv2d_nhwc':\n             schedule_direct_cuda(cfg, s, op.output(0))\n\n     traverse_inline(s, outs[0].op, _callback)\n     return s",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d.py",
    "lines": [
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66
    ],
    "matched_text": "# TODO(@alexgl-github): It's invalid to call schedule_direct_cuda for NHWC layout"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/_contrib.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv1d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv3d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/depthwise_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644018,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644019,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, too-many-locals, too-many-statements, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d_hwcn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, too-many-locals, too-many-statements, unused-argument"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_algorithm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/arm_cpu.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/bifrost.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/cuda.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/hls.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/intel_graphics.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/mali.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/opengl.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/rocm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,unused-wildcard-import,wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/strategy/x86.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument,wildcard-import,unused-wildcard-import"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/deformable_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6644020,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/generic/nn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/_contrib.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv1d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv3d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/depthwise_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644021,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/contrib/_contrib.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv1d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv3d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/depthwise_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644025,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644028,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member\n pylint: disable=no-value-for-parameter,import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      17,
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6644028,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member\n pylint: disable=no-value-for-parameter,import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_int8.py",
    "lines": [
      17,
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6644032,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member\n pylint: disable=no-value-for-parameter,import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      17,
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6644032,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member\n pylint: disable=no-value-for-parameter,import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_int8.py",
    "lines": [
      17,
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6644038,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@alexgl-github): add cuda back after fix conv2d_nhwc for cuda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/tests/python/test_topi_conv2d_nhwc.py",
    "lines": [
      73
    ],
    "matched_text": "    # TODO(@alexgl-github): add cuda back after fix conv2d_nhwc for cuda"
  },
  {
    "satd_id": 6644040,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " test_conv2d_nhwc()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_conv2d_nhwc.py",
    "lines": [
      78
    ],
    "matched_text": "def test_conv2d_nhwc():"
  },
  {
    "satd_id": 6644040,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " test_conv2d_nhwc()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_conv2d_nhwc.py",
    "lines": [
      96
    ],
    "matched_text": "    test_conv2d_nhwc()"
  },
  {
    "satd_id": 6644040,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " test_conv2d_nhwc()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_conv2d_nhwc_pack_int8.py",
    "lines": [
      75
    ],
    "matched_text": "def test_conv2d_nhwc():"
  },
  {
    "satd_id": 6644040,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " test_conv2d_nhwc()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_conv2d_nhwc_pack_int8.py",
    "lines": [
      80
    ],
    "matched_text": "    # test_conv2d_nhwc()"
  },
  {
    "satd_id": 6644041,
    "satd_repo": 70746484,
    "satd_sha": "623dd2087839b76bf7950f0759d5d8746497f2b7",
    "satd_text": " TODO(@tmoreau89): This is only a temporary fix, please take a look.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/ir_pass.py",
    "lines": [
      665
    ],
    "matched_text": "                # TODO(@tmoreau89): This is only a temporary fix, please take a look."
  },
  {
    "satd_id": 6644055,
    "satd_repo": 70746484,
    "satd_sha": "98e7709ff9e69d48ed46e66d89145aeed074f509",
    "satd_text": " --------------------------------------\n This part reuses the code from the above example.\n ----------------------------------------------------------\n -----------------------------------------\n -------------------------------------------------------\n ---------------------------------------\n ---------------------------------------\n -----------------------------------------------------\n -------------------\n ------------------------\n\n --------------------------------------------------------",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6644075,
    "satd_repo": 70746484,
    "satd_sha": "08338dd5f8089b4fbf61ae8a63f02277dfcca713",
    "satd_text": " TODO(tvm-team) consolidate with PassContext",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/target/build_config.py",
    "lines": [
      18
    ],
    "matched_text": "# TODO(tvm-team) consolidate with PassContext"
  },
  {
    "satd_id": 6644101,
    "satd_repo": 70746484,
    "satd_sha": "e7be8bf43de4c1b19ea68134812ea7b0cd8e361f",
    "satd_text": " cleanup stale log files",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_docs.sh",
    "lines": [
      30
    ],
    "matched_text": "# cleanup stale log files"
  },
  {
    "satd_id": 6644102,
    "satd_repo": 70746484,
    "satd_sha": "d50ba721eb5f7c0dbeceeaa78335d6f4c8cf2973",
    "satd_text": " Scope may not be part of type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_c.cc",
    "lines": [
      163
    ],
    "matched_text": "      // Scope may not be part of type."
  },
  {
    "satd_id": 6644106,
    "satd_repo": 70746484,
    "satd_sha": "d50ba721eb5f7c0dbeceeaa78335d6f4c8cf2973",
    "satd_text": "!\n   * \\brief Handle volatile loads.\n   *\n   * This is to workaround a bug in CUDA cuda_fp16.h. Volatile accesses\n   * to shared memory are required for reductions. However, __half class\n   * does not implement volatile member functions. CUDA codegen will cast\n   * away volatile qualifier from CUDA __half types.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/target/source/codegen_c.h",
    "lines": [
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644138,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/api.py",
    "lines": [
      633
    ],
    "matched_text": "# pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6644138,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/math.py",
    "lines": [
      39
    ],
    "matched_text": "    # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6644138,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/math.py",
    "lines": [
      57
    ],
    "matched_text": "    # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6644138,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/rcnn/roi_pool.py",
    "lines": [
      87
    ],
    "matched_text": "        # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6644139,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint:disable=unused-wildcard-import, wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/generic.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint:disable=unused-wildcard-import, wildcard-import"
  },
  {
    "satd_id": 6644139,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint:disable=unused-wildcard-import, wildcard-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/intrin.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint:disable=unused-wildcard-import, wildcard-import, redefined-builtin"
  },
  {
    "satd_id": 6644140,
    "satd_repo": 70746484,
    "satd_sha": "b787ffa34a1fafb953da26f582f97865f7d422c0",
    "satd_text": " pylint:disable=unused-wildcard-import, wildcard-import, redefined-builtin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/intrin.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint:disable=unused-wildcard-import, wildcard-import, redefined-builtin"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/runtime.py",
    "lines": [
      35
    ],
    "matched_text": "def allocate(shape, dtype='float32', scope='global'): #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      148
    ],
    "matched_text": "def _power2_scale(sq_call):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      165
    ],
    "matched_text": "def _global_scale(sq_call): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition.py",
    "lines": [
      17
    ],
    "matched_text": "#pylint: disable=unused-argument,inconsistent-return-statements"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/target.py",
    "lines": [
      293
    ],
    "matched_text": "            #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/target/generic_func.py",
    "lines": [
      178
    ],
    "matched_text": "            #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d_transpose_nchw.py",
    "lines": [
      127
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      54
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      89
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=unused-argument, redefined-builtin"
  },
  {
    "satd_id": 6644151,
    "satd_repo": 70746484,
    "satd_sha": "51a265af018964165eed570f57424eeabe120d1c",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/op.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, ungrouped-imports"
  },
  {
    "satd_id": 6644173,
    "satd_repo": 70746484,
    "satd_sha": "a5661611472c8e92b20bbe4d074333b8183f2878",
    "satd_text": " pylint: disable=invalid-name, unused-argument, missing-docstring, unused-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/transform.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, missing-docstring, unused-import"
  },
  {
    "satd_id": 6644183,
    "satd_repo": 70746484,
    "satd_sha": "0dbe70c16dd6d8a2f7596a175544589e6b05e711",
    "satd_text": " if there's a var in the pattern, it must be a free var\n so call the function to update the var_map",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/pass/merge_composite.cc",
    "lines": [
      111,
      112
    ],
    "matched_text": "        // if there's a var in the pattern, it must be a free var"
  },
  {
    "satd_id": 6644185,
    "satd_repo": 70746484,
    "satd_sha": "0dbe70c16dd6d8a2f7596a175544589e6b05e711",
    "satd_text": "! \\brief The name of the pattern to match ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/pass/merge_composite.cc",
    "lines": [
      178
    ],
    "matched_text": "  /*! \\brief The name of the pattern to match */"
  },
  {
    "satd_id": 6644221,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=unused-variable,invalid-name, not-context-manager\n pylint: disable=import-outside-toplevel\n pylint: disable=import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6644235,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=unused-argument, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/debug.py",
    "lines": [
      23
    ],
    "matched_text": "# pylint: disable=unused-argument, import-outside-toplevel"
  },
  {
    "satd_id": 6644238,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, import-self, unused-argument, unused-variable\n pylint: disable=inconsistent-return-statements, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/coreml.py",
    "lines": [
      17,
      18
    ],
    "matched_text": "# pylint: disable=invalid-name, import-self, unused-argument, unused-variable"
  },
  {
    "satd_id": 6644243,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines, import-outside-toplevel"
  },
  {
    "satd_id": 6644245,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=no-else-return, invalid-name, unused-argument, too-many-arguments, consider-using-in\n pylint: disable=import-outside-toplevel\n pylint: disable=import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6644248,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": "pylint: disable=unused-argument, not-context-manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      17
    ],
    "matched_text": "#pylint: disable=unused-argument, not-context-manager"
  },
  {
    "satd_id": 6644249,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init, unpacking-non-sequence",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/darknet.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init, unpacking-non-sequence"
  },
  {
    "satd_id": 6644250,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init, import-outside-toplevel\n pylint: disable=import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6644251,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init,\n pylint: disable=import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6644254,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-variable, no-else-return, unused-argument, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, no-else-return, unused-argument, import-outside-toplevel"
  },
  {
    "satd_id": 6644256,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-member, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-member, import-outside-toplevel"
  },
  {
    "satd_id": 6644258,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member,import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member,import-outside-toplevel"
  },
  {
    "satd_id": 6644259,
    "satd_repo": 70746484,
    "satd_sha": "b528acc143dd8a09b322ba0845743e18ae206e22",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member, import-outside-toplevel",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_int8.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member, import-outside-toplevel"
  },
  {
    "satd_id": 6644265,
    "satd_repo": 70746484,
    "satd_sha": "e0122c0ea68043372220e4e02b81692c34832227",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-lines"
  },
  {
    "satd_id": 6644265,
    "satd_repo": 70746484,
    "satd_sha": "e0122c0ea68043372220e4e02b81692c34832227",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/runtime/_ffi_node_api.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6644307,
    "satd_repo": 70746484,
    "satd_sha": "5ea4f0d554511445245e9d7976fa6b6f9a8c5397",
    "satd_text": " TODO enforce 4-way padding in topi/nn/conv2d after #4644 merged\n convert 2-way padding to 4-way padding",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/nn.py",
    "lines": [
      204,
      205
    ],
    "matched_text": "    # TODO enforce 4-way padding in topi/nn/conv2d after #4644 merged"
  },
  {
    "satd_id": 6644358,
    "satd_repo": 70746484,
    "satd_sha": "00097b195b207c5368eebabbd673eb869f341d38",
    "satd_text": " Fallback to int32 conv if there is dilation with non-zero kernel point or grouped conv2d\n For dilated conv, if the kernel zero point is non-zero, the pooling operator also has to\n traverse the elements in dilated manner. Currently, we do not have strided pool. So, in case of\n dilated conv with non-zero kernel point, we fall back to simpler but slow lowering.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/convolution.cc",
    "lines": [
      601,
      602,
      603,
      604
    ],
    "matched_text": "  // Fallback to int32 conv if there is dilation with non-zero kernel point or grouped conv2d"
  },
  {
    "satd_id": 6644446,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": " TODO(M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/doc.cc",
    "lines": [
      138
    ],
    "matched_text": "  // TODO(M.K.): add escape."
  },
  {
    "satd_id": 6644446,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": " TODO(M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.cc",
    "lines": [
      115
    ],
    "matched_text": "  // TODO(M.K.): add escape."
  },
  {
    "satd_id": 6644450,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "! \\brief The amount of indent in newline. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/printer/doc.cc",
    "lines": [
      68
    ],
    "matched_text": "  /*! \\brief The amount of indent in newline. */"
  },
  {
    "satd_id": 6644453,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "!\n * \\brief Represent a piece of text in the doc.\n ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/doc.cc",
    "lines": [
      33,
      34,
      35
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6644459,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "!\n   * \\brief Create a doc by concatenating  together with separator.\n   * \\param vec The docs to be concatenated.\n   * \\param sep The seperator.\n   * \\return The created doc.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/doc.h",
    "lines": [
      151,
      152,
      153,
      154,
      155,
      156
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644468,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "! \\brief Internal doc stream. ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/doc.h",
    "lines": [
      160
    ],
    "matched_text": "  /*! \\brief Internal doc stream. */"
  },
  {
    "satd_id": 6644469,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "!\n   * \\brief Create a new doc that adds indentation to everyline of the doc.\n   * \\param indent The indent to be added.\n   * \\param doc The doc to be indented.\n   * \\return The created doc.\n   * \\note pass by value to allow copy elison optimization.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/doc.h",
    "lines": [
      118,
      119,
      120,
      121,
      122,
      123,
      124
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644472,
    "satd_repo": 70746484,
    "satd_sha": "e4d817d4c63b1f9881e5085e6a18c856770bae14",
    "satd_text": "!\n   * \\brief Convert the doc stream into string.\n   * \\return The string representation.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/printer/doc.h",
    "lines": [
      103,
      104,
      105,
      106
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644570,
    "satd_repo": 70746484,
    "satd_sha": "33b0831c45c01990e5472cfdace0ef478cabe671",
    "satd_text": "!\n   * \\brief The offset factor to use when constructing buffers. If this is set to\n   * 0, then the offset field is not used.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/build_module.h",
    "lines": [
      51,
      52,
      53,
      54
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644570,
    "satd_repo": 70746484,
    "satd_sha": "33b0831c45c01990e5472cfdace0ef478cabe671",
    "satd_text": "!\n   * \\brief The offset factor to use when constructing buffers. If this is set to\n   * 0, then the offset field is not used.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/target/target.h",
    "lines": [
      192,
      193,
      194,
      195
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644577,
    "satd_repo": 70746484,
    "satd_sha": "33b0831c45c01990e5472cfdace0ef478cabe671",
    "satd_text": "!\n   * \\brief The data alignment to use when constructing buffers. If this is set to\n   * -1, then TVM's internal default will be used\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/build_module.h",
    "lines": [
      46,
      47,
      48,
      49
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644577,
    "satd_repo": 70746484,
    "satd_sha": "33b0831c45c01990e5472cfdace0ef478cabe671",
    "satd_text": "!\n   * \\brief The data alignment to use when constructing buffers. If this is set to\n   * -1, then TVM's internal default will be used\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/target/target.h",
    "lines": [
      187,
      188,
      189,
      190
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644646,
    "satd_repo": 70746484,
    "satd_sha": "cf59b206b80bc80db51ae670f64315ef96043780",
    "satd_text": "!\n   * \\brief Communicative reduction.\n   *  Cannot be directly parallelized.\n   *\n   *  Disallow: parallel/vectorize\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr.h",
    "lines": [
      286,
      287,
      288,
      289,
      290,
      291
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644646,
    "satd_repo": 70746484,
    "satd_sha": "cf59b206b80bc80db51ae670f64315ef96043780",
    "satd_text": "!\n   * \\brief Communicative reduction.\n   *  Cannot be directly parallelized.\n   *\n   *  Disallow: parallel/vectorize\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/expr.h",
    "lines": [
      190,
      191,
      192,
      193,
      194,
      195
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644761,
    "satd_repo": 70746484,
    "satd_sha": "cf59b206b80bc80db51ae670f64315ef96043780",
    "satd_text": "!\n   * \\brief Communicative reduction.\n   *  Cannot be directly parallelized.\n   *\n   *  Disallow: parallel/vectorize\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr.h",
    "lines": [
      286,
      287,
      288,
      289,
      290,
      291
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644761,
    "satd_repo": 70746484,
    "satd_sha": "cf59b206b80bc80db51ae670f64315ef96043780",
    "satd_text": "!\n   * \\brief Communicative reduction.\n   *  Cannot be directly parallelized.\n   *\n   *  Disallow: parallel/vectorize\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/tir/expr.h",
    "lines": [
      190,
      191,
      192,
      193,
      194,
      195
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644861,
    "satd_repo": 70746484,
    "satd_sha": "2738eddf4ad7aded6760466dff36b15e6503050d",
    "satd_text": " Check style of scala code",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta_tsim.sh",
    "lines": [
      35
    ],
    "matched_text": "# Check style of scala code"
  },
  {
    "satd_id": 6644876,
    "satd_repo": 70746484,
    "satd_sha": "2f8a01f7071deae4503e9b730304a0e4551c9210",
    "satd_text": " NOTE: reverse dependency on top/tir.\n These dependencies do not happen at the interface-level,\n and are only used in minimum cases where they are clearly marked.\n\n Rationale: convert from IterVar and top::Tensor",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/expr.cc",
    "lines": [
      26,
      27,
      28,
      29,
      30
    ],
    "matched_text": "// NOTE: reverse dependency on top/tir."
  },
  {
    "satd_id": 6644889,
    "satd_repo": 70746484,
    "satd_sha": "03ffb01c92cf032d066b47697118707f3883a623",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta_fsim.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6644889,
    "satd_repo": 70746484,
    "satd_sha": "03ffb01c92cf032d066b47697118707f3883a623",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta_tsim.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6644898,
    "satd_repo": 70746484,
    "satd_sha": "03ffb01c92cf032d066b47697118707f3883a623",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta_fsim.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6644898,
    "satd_repo": 70746484,
    "satd_sha": "03ffb01c92cf032d066b47697118707f3883a623",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta_tsim.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6644986,
    "satd_repo": 70746484,
    "satd_sha": "31021d2b99fbea92df9c1cd17648b23304f29f6b",
    "satd_text": "!\n   * \\brief Initialize the edge TPU tflite runtime with tflite model and context.\n   * \\param tflite_model_bytes The tflite model.\n   * \\param ctx The context where the tflite model will be executed on.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/edgetpu/edgetpu_runtime.h",
    "lines": [
      51,
      52,
      53,
      54,
      55
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6644988,
    "satd_repo": 70746484,
    "satd_sha": "31021d2b99fbea92df9c1cd17648b23304f29f6b",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_edgetpu_runtime.py",
    "lines": [
      25
    ],
    "matched_text": "def skipped_test_tflite_runtime():"
  },
  {
    "satd_id": 6644988,
    "satd_repo": 70746484,
    "satd_sha": "31021d2b99fbea92df9c1cd17648b23304f29f6b",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_edgetpu_runtime.py",
    "lines": [
      82
    ],
    "matched_text": "    # skipped_test_tflite_runtime()"
  },
  {
    "satd_id": 6644988,
    "satd_repo": 70746484,
    "satd_sha": "31021d2b99fbea92df9c1cd17648b23304f29f6b",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_tflite_runtime.py",
    "lines": [
      25
    ],
    "matched_text": "def skipped_test_tflite_runtime():"
  },
  {
    "satd_id": 6644988,
    "satd_repo": 70746484,
    "satd_sha": "31021d2b99fbea92df9c1cd17648b23304f29f6b",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_tflite_runtime.py",
    "lines": [
      103
    ],
    "matched_text": "    # skipped_test_tflite_runtime()"
  },
  {
    "satd_id": 6645020,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      24
    ],
    "matched_text": "#ifndef TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645020,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      25
    ],
    "matched_text": "#define TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645020,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      144
    ],
    "matched_text": "#endif  // TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645030,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      24
    ],
    "matched_text": "#ifndef TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645030,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      25
    ],
    "matched_text": "#define TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645030,
    "satd_repo": 70746484,
    "satd_sha": "c7a83199a892eff1e0d1ed03c999dcace84218ed",
    "satd_text": " TVM_ARITH_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arith/rewrite_simplify.h",
    "lines": [
      144
    ],
    "matched_text": "#endif  // TVM_ARITH_REWRITE_SIMPLIFY_H_"
  },
  {
    "satd_id": 6645090,
    "satd_repo": 70746484,
    "satd_sha": "83da72f285486de0f811ec3044f12782270bf266",
    "satd_text": " However, in some corner cases, the elemwise operator is not fused,\n we can receive as constant.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      619,
      620
    ],
    "matched_text": "            # However, in some corner cases, the elemwise operator is not fused,"
  },
  {
    "satd_id": 6645090,
    "satd_repo": 70746484,
    "satd_sha": "83da72f285486de0f811ec3044f12782270bf266",
    "satd_text": " However, in some corner cases, the elemwise operator is not fused,\n we can receive as constant.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      631,
      632
    ],
    "matched_text": "            # However, in some corner cases, the elemwise operator is not fused,"
  },
  {
    "satd_id": 6645130,
    "satd_repo": 70746484,
    "satd_sha": "3f2abfbcb74dea2129e85a5a22e915310295a420",
    "satd_text": "!\n * \\brief TODO(@zhiics, @comaniac) Combine parallel regions that belong to\n * the same codegen backend. This reduces rounds trips between TVM and external\n * backends. Likely we can borrow some ideas from operator fusion.\n *\n * For example, sg1 and sg2 should be combined if they belong to the same\n * codegen tool in the following case.\n *\n *      op1\n *     /   \\\n *   sg1   sg2\n *\n *       |\n *      \\|/\n *\n *      op1\n *       |\n *    sg1_sg2\n *\n * where the return type of the new subgraph sg1_sg2 is a tuple, and op1 has two\n * inputs that obtained from the tuple.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partition_graph.cc",
    "lines": [
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6645138,
    "satd_repo": 70746484,
    "satd_sha": "3f2abfbcb74dea2129e85a5a22e915310295a420",
    "satd_text": "! \\brief This class partitions the expr labeled with begin and end annoations\n * into function containing multiple regions. Each region is labeled with\n * a compiler attribute so that it will be handled by any compilers that are not\n * in the TVM stack.\n *\n * TODO(@zhiics) This following algorithm is not adequate to handle all cases,\n * i.e. multiple `compiler_end` nodes.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partition_graph.cc",
    "lines": [
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110
    ],
    "matched_text": "/*! \\brief This class partitions the expr labeled with begin and end annoations"
  },
  {
    "satd_id": 6645150,
    "satd_repo": 70746484,
    "satd_sha": "3f2abfbcb74dea2129e85a5a22e915310295a420",
    "satd_text": " Cache compiler_begin and compiler_end annotation ops for equivalence check to\n reduce registry lookup overhead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partition_graph.cc",
    "lines": [
      49,
      50
    ],
    "matched_text": "// Cache compiler_begin and compiler_end annotation ops for equivalence check to"
  },
  {
    "satd_id": 6645174,
    "satd_repo": 70746484,
    "satd_sha": "d7d2a9b336f55bceb1f89f5f45f13171d5d5a667",
    "satd_text": " TODO(tqchen): Update to use String container after it is merged.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/ir/transform.cc",
    "lines": [
      30
    ],
    "matched_text": "// TODO(tqchen): Update to use String container after it is merged."
  },
  {
    "satd_id": 6645175,
    "satd_repo": 70746484,
    "satd_sha": "d7d2a9b336f55bceb1f89f5f45f13171d5d5a667",
    "satd_text": " TODO(tqchen): Update to use String container after it is merged.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/ir/transform.cc",
    "lines": [
      30
    ],
    "matched_text": "// TODO(tqchen): Update to use String container after it is merged."
  },
  {
    "satd_id": 6645176,
    "satd_repo": 70746484,
    "satd_sha": "edc3674d89d9b2791be45e59c10a97c3395388c2",
    "satd_text": " NOTE on dependencies on relay AsText.\n We calls into relay's printing module for better rendering.\n These dependency does not happen at the interface-level.\n And is only used to enhance developer experiences when relay\n functions are presented.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/error.cc",
    "lines": [
      27,
      28,
      29,
      30,
      31
    ],
    "matched_text": "// NOTE on dependencies on relay AsText."
  },
  {
    "satd_id": 6645177,
    "satd_repo": 70746484,
    "satd_sha": "edc3674d89d9b2791be45e59c10a97c3395388c2",
    "satd_text": " NOTE on dependencies on relay AsText.\n We calls into relay's printing module for better rendering.\n These dependency does not happen at the interface-level.\n And is only used to enhance developer experiences when relay\n functions are presented.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/ir/error.cc",
    "lines": [
      27,
      28,
      29,
      30,
      31
    ],
    "matched_text": "// NOTE on dependencies on relay AsText."
  },
  {
    "satd_id": 6645242,
    "satd_repo": 70746484,
    "satd_sha": "d8f06020a10deb25722c9f97363368e8ae1c2b62",
    "satd_text": " TODO(tvm-team): migrate low-level intrinsics to use Op",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir/op.h",
    "lines": [
      47
    ],
    "matched_text": "// TODO(tvm-team): migrate low-level intrinsics to use Op"
  },
  {
    "satd_id": 6645248,
    "satd_repo": 70746484,
    "satd_sha": "d8f06020a10deb25722c9f97363368e8ae1c2b62",
    "satd_text": " TODO(tqchen): remove after migrate Module to ir.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/ir/type_relation.h",
    "lines": [
      32
    ],
    "matched_text": "// TODO(tqchen): remove after migrate Module to ir."
  },
  {
    "satd_id": 6645255,
    "satd_repo": 70746484,
    "satd_sha": "a2fe7a3e14ffc8c01abec71ae0bbc4be677b8a86",
    "satd_text": "##############################################################################\n The calibration dataset should be an iterable object. We define the\n calibration dataset as a generator object in Python. In this tutorial, we\n only use a few samples for calibration.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/frontend/deploy_quantized.py",
    "lines": [
      77,
      78,
      79,
      80
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6645257,
    "satd_repo": 70746484,
    "satd_sha": "a2fe7a3e14ffc8c01abec71ae0bbc4be677b8a86",
    "satd_text": " only run inference on a few samples in this tutorial",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/frontend/deploy_quantized.py",
    "lines": [
      149
    ],
    "matched_text": "        if i > 10:  # only run inference on a few samples in this tutorial"
  },
  {
    "satd_id": 6645258,
    "satd_repo": 70746484,
    "satd_sha": "a2fe7a3e14ffc8c01abec71ae0bbc4be677b8a86",
    "satd_text": "##############################################################################\n Quantize the Model\n ------------------\n In quantization, we need to find the scale for each weight and intermediate\n feature map tensor of each layer.\n\n For weights, the scales are directly calculated based on the value of the\n weights. Two modes are supported: `power2` and `max`. Both modes find the\n maximum value within the weight tensor first. In `power2` mode, the maximum\n is rounded down to power of two. If the scales of both weights and\n intermediate feature maps are power of two, we can leverage bit shifting for\n multiplications. This make it computationally more efficient. In `max` mode,\n the maximum is used as the scale. Without rounding, `max` mode might have\n better accuracy in some cases. When the scales are not powers of two, fixed\n point multiplications will be used.\n\n For intermediate feature maps, we can find the scales with data-aware\n quantization. Data-aware quantization takes a calibration dataset as the\n input argument. Scales are calculated by minimizing the KL divergence between\n distribution of activation before and after quantization.\n Alternatively, we can also use pre-defined global scales. This saves the time\n for calibration. But the accuracy might be impacted.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_quantized.py",
    "lines": [
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6645262,
    "satd_repo": 70746484,
    "satd_sha": "3d52a99c8bf6bab20a010932061c6335ee97fff0",
    "satd_text": " TODO(tvm-team):\n Think about mixed call into global that is not a relay::Function\n perhaps establish as an invariance(all functions in mod must be relay::Function)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      616,
      617,
      618
    ],
    "matched_text": "      // TODO(tvm-team):"
  },
  {
    "satd_id": 6645307,
    "satd_repo": 70746484,
    "satd_sha": "dcf7fbf1f962569e78c624755b2d612fffa81ada",
    "satd_text": " FIXME(tmoreau89): currently IR pass breaks when output padding != (0,0)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/vta_conv2d_transpose.py",
    "lines": [
      43
    ],
    "matched_text": "    # FIXME(tmoreau89): currently IR pass breaks when output padding != (0,0)"
  },
  {
    "satd_id": 6645410,
    "satd_repo": 70746484,
    "satd_sha": "76efece39f836a6cb6ed297b31479007b79a4118",
    "satd_text": " 3) Perform the multiplication in higher precision.\n The scalar is a fixed point value of int32 where the decimal point is\n between bits 31 and 30. After multiplying with input_tensor, the result\n is in int64 where the decimal point is sitting between bits 31 and 30\n (from the right, rightmost bit is bit 0). The computation is performed in\n higher precision to avoid overflow in multiplying two int32 values.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/util.cc",
    "lines": [
      96,
      97,
      98,
      99,
      100,
      101
    ],
    "matched_text": "  // 3) Perform the multiplication in higher precision."
  },
  {
    "satd_id": 6645410,
    "satd_repo": 70746484,
    "satd_sha": "76efece39f836a6cb6ed297b31479007b79a4118",
    "satd_text": " 3) Perform the multiplication in higher precision.\n The scalar is a fixed point value of int32 where the decimal point is\n between bits 31 and 30. After multiplying with input_tensor, the result\n is in int64 where the decimal point is sitting between bits 31 and 30\n (from the right, rightmost bit is bit 0). The computation is performed in\n higher precision to avoid overflow in multiplying two int32 values.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/util.cc",
    "lines": [
      167,
      168,
      169,
      170,
      171,
      172
    ],
    "matched_text": "  // 3) Perform the multiplication in higher precision."
  },
  {
    "satd_id": 6645423,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645423,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_nightly.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645423,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_topi.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645423,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_unittest.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645423,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645424,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645424,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_nightly.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645424,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_topi.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645424,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_unittest.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645424,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645425,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645425,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_nightly.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645425,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_topi.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645425,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_unittest.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645425,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645426,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645426,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_nightly.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645426,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_topi.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645426,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_unittest.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645426,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645427,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_integration.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645427,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_nightly.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645427,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_topi.sh",
    "lines": [
      27
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645427,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_unittest.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645427,
    "satd_repo": 70746484,
    "satd_sha": "4e5c6c7bddf4b89d508d55e9f4bc69e9d7ed0672",
    "satd_text": " cleanup pycache",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      24
    ],
    "matched_text": "# cleanup pycache"
  },
  {
    "satd_id": 6645449,
    "satd_repo": 70746484,
    "satd_sha": "3595cbe02cc813e400357e30161249dc43f7f05d",
    "satd_text": " NOTE: If copy on write is allowed\n the assignment to seq below will\n destruct the original seq.\n\n Such destruction removes duplicated reference\n count to children and still enables COW for\n child Stmt.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/ir_functor.cc",
    "lines": [
      536,
      537,
      538,
      539,
      540,
      541,
      542
    ],
    "matched_text": "    // NOTE: If copy on write is allowed"
  },
  {
    "satd_id": 6645496,
    "satd_repo": 70746484,
    "satd_sha": "1ecd3ee2b3a4c7ca8c56145f74b82372d7126882",
    "satd_text": "!\n   * \\brief The name of the variable,\n   *  this only acts as a hint to the user,\n   *  and is not used for equality.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/ir/type.h",
    "lines": [
      123,
      124,
      125,
      126,
      127
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6645496,
    "satd_repo": 70746484,
    "satd_sha": "1ecd3ee2b3a4c7ca8c56145f74b82372d7126882",
    "satd_text": "!\n   * \\brief The name of the variable,\n   *  this only acts as a hint to the user,\n   *  and is not used for equality.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/ir/type.h",
    "lines": [
      156,
      157,
      158,
      159,
      160
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6645496,
    "satd_repo": 70746484,
    "satd_sha": "1ecd3ee2b3a4c7ca8c56145f74b82372d7126882",
    "satd_text": "!\n   * \\brief The name of the variable,\n   *  this only acts as a hint to the user,\n   *  and is not used for equality.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/relay/base.h",
    "lines": [
      89,
      90,
      91,
      92,
      93
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6645507,
    "satd_repo": 70746484,
    "satd_sha": "9c638f060aaaefcd866433e4f0257a044f5b58d9",
    "satd_text": " Due to current relay type system, it is possible even\n a static kernel function needs shape function. To handle\n this case, we allow axis to be None in squeeze shape func\n for now.\n TODO(kevinthesun): Enhance relay type system to avoid this.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      472,
      473,
      474,
      475,
      476
    ],
    "matched_text": "    # Due to current relay type system, it is possible even"
  },
  {
    "satd_id": 6645591,
    "satd_repo": 70746484,
    "satd_sha": "1ef1605a378c5a44f645b2f1459a58e0092f8726",
    "satd_text": " pylint: disable=unused-argument, redefined-builtin, no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv3d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=unused-argument, redefined-builtin, no-else-return"
  },
  {
    "satd_id": 6645599,
    "satd_repo": 70746484,
    "satd_sha": "475158f6285c63b42efe574cb9ba8afec24261be",
    "satd_text": " Cache device copy op for equivalence checking to reduce registry lookup\n overhead for each invocation of call node when retrieving schedules.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      335,
      336
    ],
    "matched_text": "  // Cache device copy op for equivalence checking to reduce registry lookup"
  },
  {
    "satd_id": 6645600,
    "satd_repo": 70746484,
    "satd_sha": "475158f6285c63b42efe574cb9ba8afec24261be",
    "satd_text": " Cache ops that need to be frequently used later to reduce lookup overhead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      787
    ],
    "matched_text": "  // Cache ops that need to be frequently used later to reduce lookup overhead."
  },
  {
    "satd_id": 6645607,
    "satd_repo": 70746484,
    "satd_sha": "475158f6285c63b42efe574cb9ba8afec24261be",
    "satd_text": " Cache the following ops. They will be used in the passes repeatedly for\n operator equivalence checking so that the registry lookup overhead can be\n reduced.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/simplify_inference.cc",
    "lines": [
      169,
      170,
      171
    ],
    "matched_text": "  // Cache the following ops. They will be used in the passes repeatedly for"
  },
  {
    "satd_id": 6645608,
    "satd_repo": 70746484,
    "satd_sha": "475158f6285c63b42efe574cb9ba8afec24261be",
    "satd_text": " Cache the operators that are checked recursively to reduce lookup overhead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/util.cc",
    "lines": [
      364
    ],
    "matched_text": "// Cache the operators that are checked recursively to reduce lookup overhead."
  },
  {
    "satd_id": 6645616,
    "satd_repo": 70746484,
    "satd_sha": "55bd786fe25f710f6f46769fb7175f44dd73b2ea",
    "satd_text": " ObjectRef related conversion handling\n Object can have three possible type codes:\n      kNDArrayContainer, kModuleHandle, kObjectHandle\n\n We use type traits to eliminate un-necessary checks.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/packed_func.h",
    "lines": [
      1233,
      1234,
      1235,
      1236,
      1237
    ],
    "matched_text": "// ObjectRef related conversion handling"
  },
  {
    "satd_id": 6645618,
    "satd_repo": 70746484,
    "satd_sha": "55bd786fe25f710f6f46769fb7175f44dd73b2ea",
    "satd_text": " NOTE: the following code can be optimized by constant folding.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/packed_func.h",
    "lines": [
      1264
    ],
    "matched_text": "  // NOTE: the following code can be optimized by constant folding."
  },
  {
    "satd_id": 6645618,
    "satd_repo": 70746484,
    "satd_sha": "55bd786fe25f710f6f46769fb7175f44dd73b2ea",
    "satd_text": " NOTE: the following code can be optimized by constant folding.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/packed_func.h",
    "lines": [
      1288
    ],
    "matched_text": "  // NOTE: the following code can be optimized by constant folding."
  },
  {
    "satd_id": 6645631,
    "satd_repo": 70746484,
    "satd_sha": "55bd786fe25f710f6f46769fb7175f44dd73b2ea",
    "satd_text": " RAII in effect, now run the check.\n TODO(@jroesch): generalize later to non-overlapping allocations.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/memory_manager.cc",
    "lines": [
      93,
      94
    ],
    "matched_text": "  // RAII in effect, now run the check."
  },
  {
    "satd_id": 6645710,
    "satd_repo": 70746484,
    "satd_sha": "73dda6be503922da4a3861f5a48718f6d7b2ef1a",
    "satd_text": " a useless tuple, which will be eliminated",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_convert_op_layout.py",
    "lines": [
      100
    ],
    "matched_text": "        # a useless tuple, which will be eliminated"
  },
  {
    "satd_id": 6645710,
    "satd_repo": 70746484,
    "satd_sha": "73dda6be503922da4a3861f5a48718f6d7b2ef1a",
    "satd_text": " a useless tuple, which will be eliminated",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_convert_op_layout.py",
    "lines": [
      120
    ],
    "matched_text": "        # a useless tuple, which will be eliminated"
  },
  {
    "satd_id": 6645828,
    "satd_repo": 70746484,
    "satd_sha": "e274e66eae6be24be427455bb1c53667d7a194dc",
    "satd_text": " here we flip the shapes because this can be more simply written\n when the innermost dimension is located at the index 0.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      1108,
      1109
    ],
    "matched_text": "            # here we flip the shapes because this can be more simply written"
  },
  {
    "satd_id": 6645857,
    "satd_repo": 70746484,
    "satd_sha": "93843536010af46e8fa3668e423e027cab53deda",
    "satd_text": " run nn graph test",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/scripts/task_rust.sh",
    "lines": [
      55
    ],
    "matched_text": "# run nn graph test"
  },
  {
    "satd_id": 6645859,
    "satd_repo": 70746484,
    "satd_sha": "c44b7bf107637ca81cd93eaee13e14a5e60386d5",
    "satd_text": "!\n * \\brief The external compiler/codegen tool. It takes a Relay expression/module and\n * compile it into a runtime module.\n *\n * The external codegen tool should have been registered similiarly to LLVM,\n * CUDA, etc, under TVM, so the generated code could be packed in a runtime\n * module. This module simplifies code serialization and invocation.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen.cc",
    "lines": [
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6645897,
    "satd_repo": 70746484,
    "satd_sha": "c44b7bf107637ca81cd93eaee13e14a5e60386d5",
    "satd_text": "! \\brief Print indents using spaces. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/codegen_c/codegen_c.h",
    "lines": [
      72
    ],
    "matched_text": "  /*! \\brief Print indents using spaces. */"
  },
  {
    "satd_id": 6645929,
    "satd_repo": 70746484,
    "satd_sha": "c44b7bf107637ca81cd93eaee13e14a5e60386d5",
    "satd_text": " TODO(@zhiics, @comaniac): This is a basic implementation. We should implement\n all utilities and make a base class for users to implement.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/contrib/dnnl/codegen.cc",
    "lines": [
      41,
      42
    ],
    "matched_text": "// TODO(@zhiics, @comaniac): This is a basic implementation. We should implement"
  },
  {
    "satd_id": 6646005,
    "satd_repo": 70746484,
    "satd_sha": "40f1886c62e1c68b7658532700596ff8f6ee26a8",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_rocm.py",
    "lines": [
      65
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6646070,
    "satd_repo": 70746484,
    "satd_sha": "6ab158063d53f9dcc992777dc7f2b72d2092e802",
    "satd_text": " FIXME: we need a custom clip operator to circumvent a pattern detection limitation",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/integration/test_benchmark_topi_group_conv2d.py",
    "lines": [
      57
    ],
    "matched_text": "# FIXME: we need a custom clip operator to circumvent a pattern detection limitation"
  },
  {
    "satd_id": 6646074,
    "satd_repo": 70746484,
    "satd_sha": "3fa80975164a9e9330acfedb32206d7b47856648",
    "satd_text": " Workaround to make CUDA compilation work. Issue #4470\n TODO make _fallback_schedule work for all kernel/strides combinations\n  after issue #4470 is resolved",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/cuda/conv2d_transpose_nchw.py",
    "lines": [
      192,
      193,
      194
    ],
    "matched_text": "                # Workaround to make CUDA compilation work. Issue #4470"
  },
  {
    "satd_id": 6646089,
    "satd_repo": 70746484,
    "satd_sha": "24713bde423d0eb0a06ac6ee85854dbee033f925",
    "satd_text": "!\n   * \\brief Update allocations for all tenssors. This is relatively expensive.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/contrib/tflite/tflite_runtime.h",
    "lines": [
      64,
      65,
      66
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6646097,
    "satd_repo": 70746484,
    "satd_sha": "24713bde423d0eb0a06ac6ee85854dbee033f925",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_tflite_runtime.py",
    "lines": [
      25
    ],
    "matched_text": "def skipped_test_tflite_runtime():"
  },
  {
    "satd_id": 6646097,
    "satd_repo": 70746484,
    "satd_sha": "24713bde423d0eb0a06ac6ee85854dbee033f925",
    "satd_text": " skipped_test_tflite_runtime()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/contrib/test_tflite_runtime.py",
    "lines": [
      109
    ],
    "matched_text": "    # skipped_test_tflite_runtime()"
  },
  {
    "satd_id": 6646143,
    "satd_repo": 70746484,
    "satd_sha": "279a8ebae6d507f02d904397672dc44982719645",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      255
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6646143,
    "satd_repo": 70746484,
    "satd_sha": "279a8ebae6d507f02d904397672dc44982719645",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      272
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6646143,
    "satd_repo": 70746484,
    "satd_sha": "279a8ebae6d507f02d904397672dc44982719645",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      515
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6646143,
    "satd_repo": 70746484,
    "satd_sha": "279a8ebae6d507f02d904397672dc44982719645",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      775
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6646143,
    "satd_repo": 70746484,
    "satd_sha": "279a8ebae6d507f02d904397672dc44982719645",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      781
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6646175,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " There are two implementations of cycle counters on the STM32F7X: SysTick and\n CYCCNT.  SysTick is preferred, as it gives better error handling, but the\n counter is only 24 bits wide.  If a larger timer is needed, use the CYCCNT\n implementation, which has a 32-bit counter.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/device/arm/stm32f746xx/utvm_timer.c",
    "lines": [
      33,
      34,
      35,
      36
    ],
    "matched_text": "// There are two implementations of cycle counters on the STM32F7X: SysTick and"
  },
  {
    "satd_id": 6646183,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " TODO(weberlo): use this? https://stackoverflow.com/questions/5141960/get-the-current-time-in-c",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/device/host/utvm_timer.c",
    "lines": [
      31
    ],
    "matched_text": "// TODO(weberlo): use this? https://stackoverflow.com/questions/5141960/get-the-current-time-in-c"
  },
  {
    "satd_id": 6646193,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/exec/rpc_server.py",
    "lines": [
      85
    ],
    "matched_text": "            # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6646194,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " TODO(weberlo): we should probably use a more distinctive suffix for uTVM object files",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/module.py",
    "lines": [
      268
    ],
    "matched_text": "    # TODO(weberlo): we should probably use a more distinctive suffix for uTVM object files"
  },
  {
    "satd_id": 6646201,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": "! \\brief 64-bit pointer ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_common.h",
    "lines": [
      59
    ],
    "matched_text": "  /*! \\brief 64-bit pointer */"
  },
  {
    "satd_id": 6646210,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " TODO(weberlo): move checks to python",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      89
    ],
    "matched_text": "    // TODO(weberlo): move checks to python"
  },
  {
    "satd_id": 6646211,
    "satd_repo": 70746484,
    "satd_sha": "47c870a9ebc0251143dfa6bc0322ae8aeef7a604",
    "satd_text": " TODO(weberlo): maybe templatize serialization to reduce redundancy",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.h",
    "lines": [
      282
    ],
    "matched_text": "// TODO(weberlo): maybe templatize serialization to reduce redundancy"
  },
  {
    "satd_id": 6646267,
    "satd_repo": 70746484,
    "satd_sha": "2bf5fd2b5e5c032d0c1803b271c2462e171e5d40",
    "satd_text": " NOTE: the first argument is not needed for ArrayObjAllocator\n It is reserved for special allocators that needs to recycle\n the object to itself (e.g. in the case of object pool).\n\n In the case of an object pool, an allocator needs to create\n a special chunk memory that hides reference to the allocator\n and call allocator's release function in the deleter.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/memory.h",
    "lines": [
      156,
      157,
      158,
      159,
      160,
      161,
      162
    ],
    "matched_text": "      // NOTE: the first argument is not needed for ArrayObjAllocator"
  },
  {
    "satd_id": 6646279,
    "satd_repo": 70746484,
    "satd_sha": "2a8c6978b5c45f778bbf7ce1d52e4f02d962b646",
    "satd_text": " TODO(@jroesch): Need to fix memory alloc to support closure\n test_loop_bodies()",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tensorflow/test_control_flow.py",
    "lines": [
      309,
      310
    ],
    "matched_text": "    # TODO(@jroesch): Need to fix memory alloc to support closure"
  },
  {
    "satd_id": 6646280,
    "satd_repo": 70746484,
    "satd_sha": "2d0010f3689db8ad10c70fd20c183e739f2fe714",
    "satd_text": " pylint: disable=no-else-return, invalid-name, unused-argument, too-many-arguments\n NHWC layout\n NCHW layout.\n in ARM CPU contrib_spatial_pack schedule, we will prepack weight layout",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6646290,
    "satd_repo": 70746484,
    "satd_sha": "a44ac185f90e60eaf015cfd3d094b98bac6ff756",
    "satd_text": " based on the reduction tutorial",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tests/python/unittest/test_codegen_rocm.py",
    "lines": [
      26
    ],
    "matched_text": "    # based on the reduction tutorial"
  },
  {
    "satd_id": 6646375,
    "satd_repo": 70746484,
    "satd_sha": "122a4930f2bf818501d67b755f0cf21c79b85a21",
    "satd_text": " TODO(icemelon9): For heterogeneous execution, get input device information",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      670
    ],
    "matched_text": "      // TODO(icemelon9): For heterogeneous execution, get input device information"
  },
  {
    "satd_id": 6646394,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " weight scale functions\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      126,
      127
    ],
    "matched_text": "# weight scale functions"
  },
  {
    "satd_id": 6646396,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      82
    ],
    "matched_text": "    def func(sq_call):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6646396,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      127
    ],
    "matched_text": "def _power2_scale(sq_call):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6646396,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      144
    ],
    "matched_text": "def _global_scale(sq_call): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6646396,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      164
    ],
    "matched_text": "    def wrapped_func(mod, ctx): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6646398,
    "satd_repo": 70746484,
    "satd_sha": "500ff05193210b6b5f720128d198046675ed4f4d",
    "satd_text": " input scale functions\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_calibrate.py",
    "lines": [
      143,
      144
    ],
    "matched_text": "# input scale functions"
  },
  {
    "satd_id": 6646401,
    "satd_repo": 70746484,
    "satd_sha": "af52eba129db56f87bba07b578e73c7d5b333296",
    "satd_text": " avoid too many parallelism",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/reduction.py",
    "lines": [
      53
    ],
    "matched_text": "            # avoid too many parallelism"
  },
  {
    "satd_id": 6646469,
    "satd_repo": 70746484,
    "satd_sha": "560280dd7cbc99ab9fbae52b52cee7c8b7150d11",
    "satd_text": " Sort on the basis of execution time. Prints the most expensive ops in the start.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/debugger/debug_result.py",
    "lines": [
      233
    ],
    "matched_text": "            # Sort on the basis of execution time. Prints the most expensive ops in the start."
  },
  {
    "satd_id": 6646523,
    "satd_repo": 70746484,
    "satd_sha": "7dca65526b0ed235cb91c46649ccc398fb6a2ae4",
    "satd_text": "!\n *  Copyright (c) 2019 by Contributors\n * \\file tvm/relay/backend/vm/remove_unused_funcs.cc\n * \\brief Remove unused global relay functions in a relay module.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/removed_unused_funcs.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6646526,
    "satd_repo": 70746484,
    "satd_sha": "7dca65526b0ed235cb91c46649ccc398fb6a2ae4",
    "satd_text": "!\n * \\brief Remove functions that are not used.\n *\n * \\param module The Relay module.\n * \\param entry_funcs The set of functions that can be entry function.\n * \n * \\return The module with dead functions removed.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/removed_unused_funcs.cc",
    "lines": [
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6646530,
    "satd_repo": 70746484,
    "satd_sha": "cf83d50cee669d4c6d2ac2bcb5078b9bd1b18e1d",
    "satd_text": " FIXME(tvm-team): \"volatile\" is used to enable cross thread reduction,\n which is needed by operations such as softmax.\n However, volatile overloading is not supported in NVRTC and CUDA < 9.2.\n We need to figure out a solution which can satisfy both scenario.\n decl_stream << \"__device__ half operator<=\"\n             << \"(const volatile __half &a,  const volatile __half &b)\\n\"\n             << \"{\\n  return __hlt(a, b);\\n}\\n\";\n decl_stream << \"__device__ half operator+\"\n             << \"(const volatile __half &a,  const volatile __half &b)\\n\"\n             <<\"{\\n  return __hadd(a, b);\\n}\\n\";\n decl_stream << \"__device__ half operator*\"\n             << \"(const volatile __half &a, const volatile __half &b)\\n\"\n             <<   \"{\\n  return __hmul(a, b);\\n}\\n\";",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_cuda.cc",
    "lines": [
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73
    ],
    "matched_text": "    // FIXME(tvm-team): \"volatile\" is used to enable cross thread reduction,"
  },
  {
    "satd_id": 6646546,
    "satd_repo": 70746484,
    "satd_sha": "62521453a03d73c90900ba08ced6af06ee7f543a",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks, too-many-local-variables, too-many-arguments"
  },
  {
    "satd_id": 6646547,
    "satd_repo": 70746484,
    "satd_sha": "62521453a03d73c90900ba08ced6af06ee7f543a",
    "satd_text": " pylint: disable=invalid-name, unused-argument, too-many-arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, too-many-arguments"
  },
  {
    "satd_id": 6646550,
    "satd_repo": 70746484,
    "satd_sha": "62521453a03d73c90900ba08ced6af06ee7f543a",
    "satd_text": " Always use dense_nopack for dynamic input.\n This is a temporary for CV models.\n TODO(kevinthesun): use kernel dispatcher instead.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/dense.py",
    "lines": [
      40,
      41,
      42
    ],
    "matched_text": "    # Always use dense_nopack for dynamic input."
  },
  {
    "satd_id": 6646575,
    "satd_repo": 70746484,
    "satd_sha": "18f8581bbec72b4f0b5ab30b32c74fd4aac85252",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument, too-many-lines, len-as-condition, broad-except",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument, too-many-lines, len-as-condition, broad-except"
  },
  {
    "satd_id": 6646585,
    "satd_repo": 70746484,
    "satd_sha": "cff62bdbd20bab3ebcc27213be1e6d79da00c842",
    "satd_text": "##############################################################################\n Create An Example Relay Program\n -------------------------------\n First of all, we create a simple Relay program for the tutorial. This program\n will be used by various optimizations of the examples in this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/dev/relay_pass_infra.py",
    "lines": [
      54,
      55,
      56,
      57,
      58
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6646586,
    "satd_repo": 70746484,
    "satd_sha": "cff62bdbd20bab3ebcc27213be1e6d79da00c842",
    "satd_text": "#############################################################################\n Implement a Pass Using Python Decorator\n ------------------------------------------\n The next example illustrates how we can orchestrate a customized optimization\n pipeline through the pass infra using Python decorators. This functionality\n greatly eases the implementation of passes. For example, users can simply\n define a decorated class to do function-level optimizations as the following\n example shows. `transform_function` wraps a class to replace all constants\n with a multiple of `c`. Later on, each function in a given module will be\n visited and each constant in the function will be replaced when we invoke the\n customized pass.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/dev/relay_pass_infra.py",
    "lines": [
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212
    ],
    "matched_text": "##############################################################################"
  },
  {
    "satd_id": 6646614,
    "satd_repo": 70746484,
    "satd_sha": "d2fc0252ba036a23a60975e8754523830f403043",
    "satd_text": "!\n * \\brief CleanDir Removes the files from the directory\n * \\param dirname The name of the directory\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/rpc_env.cc",
    "lines": [
      230,
      231,
      232,
      233
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6646617,
    "satd_repo": 70746484,
    "satd_sha": "d2fc0252ba036a23a60975e8754523830f403043",
    "satd_text": "!\n * \\brief Remove The RPC Environment cleanup function\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/rpc_env.cc",
    "lines": [
      81,
      82,
      83
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6646630,
    "satd_repo": 70746484,
    "satd_sha": "d2fc0252ba036a23a60975e8754523830f403043",
    "satd_text": "!\n * \\brief CleanDir Removes the files from the directory\n * \\param dirname THe name of the directory\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/rpc_env.h",
    "lines": [
      45,
      46,
      47,
      48
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6646631,
    "satd_repo": 70746484,
    "satd_sha": "d2fc0252ba036a23a60975e8754523830f403043",
    "satd_text": "!\n   * \\brief The RPC Environment cleanup function\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/cpp_rpc/rpc_env.h",
    "lines": [
      66,
      67,
      68
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6646756,
    "satd_repo": 70746484,
    "satd_sha": "d64bf6b51b1d720cd437bd356bd8aed9ef655575",
    "satd_text": " TODO(minmin): handle the case where MatMul is not the output stage",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/tensor_core.cc",
    "lines": [
      282
    ],
    "matched_text": "    // TODO(minmin): handle the case where MatMul is not the output stage"
  },
  {
    "satd_id": 6646765,
    "satd_repo": 70746484,
    "satd_sha": "d64bf6b51b1d720cd437bd356bd8aed9ef655575",
    "satd_text": "test with warp_tile 16x16x16\ntest with warp_tile 8x32x16\ntest with warp_tile 32x8x16",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_pass_rewrite_for_tensor_core.py",
    "lines": [
      214,
      215,
      216
    ],
    "matched_text": "    tensor_core_matmul(16) #test with warp_tile 16x16x16"
  },
  {
    "satd_id": 6646770,
    "satd_repo": 70746484,
    "satd_sha": "d64bf6b51b1d720cd437bd356bd8aed9ef655575",
    "satd_text": "##############################################################################\n Scheduling the Computation\n --------------------------\n This schedule is no different than a non-tensorcore matmul schedule on GPU.\n Please refer to :ref:`opt-gemm` tutorial for basics of optimizing matmul schedule.\n When the \"tensor_core\" pragma is set, the \"rewrite for tensorcore\" ir pass\n will automatically transform the schedule for tensorcore codegen,\n otherwise normal CUDA code, with lower performance but equal functionality, will be generated.\n\n .. note::\n\n   *Requirements of TesnsorCore*\n\n   Note that in the following 2 cases, even though the \"tensor_core\" pragma is set, TVM will still fall back to normal CUDA codegen:\n   (1) The m, n or k of input matrices is not multiple of 16;\n   (2) The warp tile size is not 16x16x16 on CUDA9, or not one of {16x16x16, 32x8x16, 8x32x16} on CUDA version >= 10.0.\n\n In this schedule, storage_align is used to reduce bank conflicts of shared memory. Please refer to this\n `doc <https://docs.tvm.ai/api/python/schedule.html#tvm.schedule.Stage.storage_align>`_\n for the usage of storage_align primitive. In short, we need to add an offset to some shared memory buffer\n to reduce bank conflicts.\n According to the `wmma doc <https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#wmma-description>`_,\n the stride of load_matrix_sync must be a multiple of 16 bytes,\n so we choose 8 as offset for float16 and 16 as offset for int8.\n\n We use AutoTVM to search for best configurations in this schedule.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_matmul_auto_tensorcore.py",
    "lines": [
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6646774,
    "satd_repo": 70746484,
    "satd_sha": "d64bf6b51b1d720cd437bd356bd8aed9ef655575",
    "satd_text": "##############################################################################\n Summary\n --------------------------\n This tutorial demonstrates how to use the AutoTensorCoreCodeGen of TVM\n to generate tensorcore kernels.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/optimize/opt_matmul_auto_tensorcore.py",
    "lines": [
      461,
      462,
      463,
      464,
      465
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6646785,
    "satd_repo": 70746484,
    "satd_sha": "d64bf6b51b1d720cd437bd356bd8aed9ef655575",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n .. code-block:: bash\n\n    Best config:\n    [('bx', 4), ('by', 32), ('step_k', 16), ('v', 8)],,None,40\n    Finish loading 162 records\n    produce compute {\n      // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1\n      // attr [compute.local] storage_scope = \"wmma.accumulator\"\n      allocate compute.local[float32 * 256]\n      // attr [A.shared] storage_scope = \"shared\"\n      allocate A.shared[float16 * 8448]\n      // attr [B.shared] storage_scope = \"shared\"\n      allocate B.shared[float16 * 8192]\n      // attr [A.shared.local] storage_scope = \"wmma.matrix_b\"\n      allocate A.shared.local[float16 * 256]\n      // attr [B.shared.local] storage_scope = \"wmma.matrix_a\"\n      allocate B.shared.local[float16 * 256]\n      // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 16\n      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 2\n      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 32\n      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2\n      produce compute.local {\n        for (j.c.init, 0, 1) {\n          tvm_fill_fragment(compute.local, 16, 16, 16, 0, 0f)\n        }\n        // attr [iter_var(k.outer, )] pragma_tensor_core = 1\n        for (k.outer, 0, 2) {\n          produce A.shared {\n            for (ax0.ax1.outer.fused.outer, 0, 8) {\n              // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 32\n              // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 2\n              // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2\n              A.shared[ramp((((((ax0.ax1.outer.fused.outer*1056) + (floordiv(threadIdx.y, 8)*264)) + (floormod(threadIdx.y, 8)*32)) + (threadIdx.z*16)) + (threadIdx.x*8)), 1, 8)] = A[ramp(((((((ax0.ax1.outer.fused.outer*2048) + (floordiv(threadIdx.y, 8)*512)) + (k.outer*256)) + (floormod(threadIdx.y, 8)*32)) + (threadIdx.z*16)) + (threadIdx.x*8)), 1, 8)]\n            }\n          }\n          produce B.shared {\n            for (ax0.ax1.outer.fused.outer, 0, 8) {\n              // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 32\n              // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 2\n              // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2\n              B.shared[ramp(((((ax0.ax1.outer.fused.outer*1024) + (threadIdx.y*32)) + (threadIdx.z*16)) + (threadIdx.x*8)), 1, 8)] = B[ramp(((((((k.outer*131072) + (ax0.ax1.outer.fused.outer*16384)) + (threadIdx.y*512)) + (blockIdx.x*32)) + (threadIdx.z*16)) + (threadIdx.x*8)), 1, 8)]\n            }\n          }\n          for (k.inner.outer, 0, 16) {\n            produce A.shared.local {\n              for (ax1, 0, 1) {\n                tvm_load_matrix_sync(A.shared.local, 16, 16, 16, 0, &(A.shared[(((threadIdx.y/16)*4224) + (k.inner.outer*16))]), 264, \"col_major\")\n              }\n            }\n            produce B.shared.local {\n              for (ax0, 0, 1) {\n                for (ax1, 0, 1) {\n                  tvm_load_matrix_sync(B.shared.local, 16, 16, 16, 0, &(B.shared[((k.inner.outer*512) + (threadIdx.z*16))]), 32, \"col_major\")\n                }\n              }\n            }\n            for (k.inner.inner, 0, 1) {\n              for (j.c, 0, 1) {\n                tvm_mma_sync(compute.local, 0, B.shared.local, 0, A.shared.local, 0, compute.local, 0)\n              }\n            }\n          }\n        }\n      }\n      for (j.inner.inner.inner, 0, 1) {\n        tvm_store_matrix_sync(compute.local, 16, 16, 16, 0, &(compute[((((threadIdx.y/16)*8192) + (blockIdx.x*32)) + (threadIdx.z*16))]), 512, \"col_major\")\n      }\n    }\n\n    #include <cuda_fp16.h>\n    __device__ half max(const half a, const half b)\n    {\n      return __hgt(__half(a), __half(b)) ? a : b;\n    }\n    __device__ half min(const half a, const half b)\n    {\n      return __hlt(__half(a), __half(b)) ? a : b;\n    }\n    __device__ half operator+(const volatile __half &a,  const volatile __half &b)\n    {\n      return __hadd(a, b);\n    }\n    __device__ half operator<=(const volatile __half &a,  const volatile __half &b)\n    {\n      return __hlt(a, b);\n    }\n    __device__ half operator*(const volatile __half &a,  const volatile __half &b)\n    {\n      return __hmul(a, b);\n    }\n    #include <mma.h>\n    extern \"C\" __global__ void default_function_kernel0( half* __restrict__ A,  half* __restrict__ B,  float* __restrict__ compute) {\n      nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, float> compute_local[1];\n      __shared__ half A_shared[8448];\n      __shared__ half B_shared[8192];\n      nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::col_major> A_shared_local[1];\n      nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::col_major> B_shared_local[1];\n      for (int j_c_init = 0; j_c_init < 1; ++j_c_init) {\n        (void)nvcuda::wmma::fill_fragment(compute_local[0], 0.000000e+00f);\n      }\n      for (int k_outer = 0; k_outer < 2; ++k_outer) {\n        __syncthreads();\n        for (int ax0_ax1_outer_fused_outer = 0; ax0_ax1_outer_fused_outer < 8; ++ax0_ax1_outer_fused_outer) {\n          ((__shared__ float4*)(A_shared + (((((ax0_ax1_outer_fused_outer * 1056) + ((((int)threadIdx.y) >> 3) * 264)) + ((((int)threadIdx.y) & 7) * 32)) + (((int)threadIdx.z) * 16)) + (((int)threadIdx.x) * 8))))[0] = (( float4*)(A + ((((((ax0_ax1_outer_fused_outer * 2048) + ((((int)threadIdx.y) >> 3) * 512)) + (k_outer * 256)) + ((((int)threadIdx.y) & 7) * 32)) + (((int)threadIdx.z) * 16)) + (((int)threadIdx.x) * 8))))[0];\n        }\n        for (int ax0_ax1_outer_fused_outer1 = 0; ax0_ax1_outer_fused_outer1 < 8; ++ax0_ax1_outer_fused_outer1) {\n          ((__shared__ float4*)(B_shared + ((((ax0_ax1_outer_fused_outer1 * 1024) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.z) * 16)) + (((int)threadIdx.x) * 8))))[0] = (( float4*)(B + ((((((k_outer * 131072) + (ax0_ax1_outer_fused_outer1 * 16384)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.z) * 16)) + (((int)threadIdx.x) * 8))))[0];\n        }\n        __syncthreads();\n        for (int k_inner_outer = 0; k_inner_outer < 16; ++k_inner_outer) {\n          for (int ax1 = 0; ax1 < 1; ++ax1) {\n            (void)nvcuda::wmma::load_matrix_sync(A_shared_local[0], &(A_shared[(((((int)threadIdx.y) / 16) * 4224) + (k_inner_outer * 16))]), 264);\n          }\n          for (int ax0 = 0; ax0 < 1; ++ax0) {\n            for (int ax11 = 0; ax11 < 1; ++ax11) {\n              (void)nvcuda::wmma::load_matrix_sync(B_shared_local[0], &(B_shared[((k_inner_outer * 512) + (((int)threadIdx.z) * 16))]), 32);\n            }\n          }\n          for (int k_inner_inner = 0; k_inner_inner < 1; ++k_inner_inner) {\n            for (int j_c = 0; j_c < 1; ++j_c) {\n              (void)nvcuda::wmma::mma_sync(compute_local[0], B_shared_local[0], A_shared_local[0], compute_local[0]);\n            }\n          }\n        }\n      }\n      for (int j_inner_inner_inner = 0; j_inner_inner_inner < 1; ++j_inner_inner_inner) {\n        (void)nvcuda::wmma::store_matrix_sync(&(compute[((((((int)threadIdx.y) / 16) * 8192) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.z) * 16))]), compute_local[0], 512, nvcuda::wmma::mem_col_major);\n      }\n    }\n\n\n    Time cost of this operator: 0.000008",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_matmul_auto_tensorcore.py",
    "lines": [
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6646833,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): Is there a way to do one shot initilization?\n can we have def pass_init?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      271,
      272
    ],
    "matched_text": "        # TODO(@jroesch): Is there a way to do one shot initilization?"
  },
  {
    "satd_id": 6646837,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): restore this code, more complex then it seems\n for arg in call.args:\n     is_dynamic = is_dynamic or arg.checked_type.is_dynamic()",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      177,
      178,
      179
    ],
    "matched_text": "            # TODO(@jroesch): restore this code, more complex then it seems"
  },
  {
    "satd_id": 6646839,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): handle 3rd case",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      203
    ],
    "matched_text": "                    # TODO(@jroesch): handle 3rd case"
  },
  {
    "satd_id": 6646840,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): There is a bug with typing based on the constant shape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      149
    ],
    "matched_text": "        # TODO(@jroesch): There is a bug with typing based on the constant shape."
  },
  {
    "satd_id": 6646841,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): port to c++ and unify with existing code",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      33
    ],
    "matched_text": "# TODO(@jroesch): port to c++ and unify with existing code"
  },
  {
    "satd_id": 6646842,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): replace with new flattening pass",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/memory_alloc.py",
    "lines": [
      46
    ],
    "matched_text": "            # TODO(@jroesch): replace with new flattening pass"
  },
  {
    "satd_id": 6646854,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): should only support tensors.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/op/memory/memory.cc",
    "lines": [
      238
    ],
    "matched_text": "  // TODO(@jroesch): should only support tensors."
  },
  {
    "satd_id": 6646864,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): MOVE ME",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      75
    ],
    "matched_text": "// TODO(@jroesch): MOVE ME"
  },
  {
    "satd_id": 6646872,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): we need to get an RFC done to standarize this",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      544
    ],
    "matched_text": "            // TODO(@jroesch): we need to get an RFC done to standarize this"
  },
  {
    "satd_id": 6646877,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): we really need to standaridize the bit width of\n all of the shape manipulating code.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      211,
      212
    ],
    "matched_text": "  // TODO(@jroesch): we really need to standaridize the bit width of"
  },
  {
    "satd_id": 6646877,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): we really need to standaridize the bit width of\n all of the shape manipulating code.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      228,
      229
    ],
    "matched_text": "  // TODO(@jroesch): we really need to standaridize the bit width of"
  },
  {
    "satd_id": 6646890,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): fix this",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_constant.cc",
    "lines": [
      193
    ],
    "matched_text": "      // TODO(@jroesch): fix this"
  },
  {
    "satd_id": 6646895,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): generalize later to non-overlapping allocations.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/memory_manager.cc",
    "lines": [
      78
    ],
    "matched_text": "  // TODO(@jroesch): generalize later to non-overlapping allocations."
  },
  {
    "satd_id": 6646895,
    "satd_repo": 70746484,
    "satd_sha": "2083513fcd06e7126465a48fd1b0d6faa288df3e",
    "satd_text": " TODO(@jroesch): generalize later to non-overlapping allocations.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/memory_manager.cc",
    "lines": [
      84
    ],
    "matched_text": "  // TODO(@jroesch): generalize later to non-overlapping allocations."
  },
  {
    "satd_id": 6646913,
    "satd_repo": 70746484,
    "satd_sha": "bafc675ce6dc9b6209eac46eb1547a388a269473",
    "satd_text": " We clip values with min and max so that simplifiers know the ranges of values",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_codegen_llvm.py",
    "lines": [
      417
    ],
    "matched_text": "        # We clip values with min and max so that simplifiers know the ranges of values"
  },
  {
    "satd_id": 6646915,
    "satd_repo": 70746484,
    "satd_sha": "ebfcd28cd1349cadbccee61218da234a6f53ed7c",
    "satd_text": " TODO(tvm-team) fix fp16 codegen here\n or hit an error if it is less frequently used.\n check_cuda(\"float16\", 64, 2)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_codegen_cuda.py",
    "lines": [
      57,
      58,
      59
    ],
    "matched_text": "    # TODO(tvm-team) fix fp16 codegen here"
  },
  {
    "satd_id": 6646929,
    "satd_repo": 70746484,
    "satd_sha": "156aa5900ab04d9176cd333bb7d1ce10dce19faa",
    "satd_text": " Clean fake params out of param dictionary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/common.py",
    "lines": [
      517
    ],
    "matched_text": "    # Clean fake params out of param dictionary."
  },
  {
    "satd_id": 6646933,
    "satd_repo": 70746484,
    "satd_sha": "09f0ac3385757e4d1de2d5766fc3aae22504baa2",
    "satd_text": " TODO(weberlo): make type vars hashable, so we can memoize",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/type_functor.py",
    "lines": [
      29
    ],
    "matched_text": "        # TODO(weberlo): make type vars hashable, so we can memoize"
  },
  {
    "satd_id": 6646958,
    "satd_repo": 70746484,
    "satd_sha": "13b2856616981ee92182bb3edece4936c182a86b",
    "satd_text": " (m,16) * (16,16) GEMM",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/apps/gemm/tests/python/chisel_accel.py",
    "lines": [
      183
    ],
    "matched_text": "    # (m,16) * (16,16) GEMM"
  },
  {
    "satd_id": 6646990,
    "satd_repo": 70746484,
    "satd_sha": "78ca6fc8b00eb26dbba335c1fad8f46ae62b4822",
    "satd_text": "!\n   * \\brief Visitor function.\n   * \\note We use function pointer, instead of std::function\n   *       to reduce the dispatch overhead as field visit\n   *       does not need as much customization.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/reflection.h",
    "lines": [
      83,
      84,
      85,
      86,
      87,
      88
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6647070,
    "satd_repo": 70746484,
    "satd_sha": "324a9607eb563f81e55fdd0c9d078c2f74651817",
    "satd_text": "##############################################################################\n Summary\n This tutorial demonstrates how TVM scheduling primitives can be used to\n call TensorCores on specific GPUs.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/optimize/opt_conv_tensorcore.py",
    "lines": [
      345,
      346,
      347,
      348
    ],
    "matched_text": "###############################################################################"
  },
  {
    "satd_id": 6647074,
    "satd_repo": 70746484,
    "satd_sha": "324a9607eb563f81e55fdd0c9d078c2f74651817",
    "satd_text": "###############################################################\n Preparation and Algorithm\n --------------------------\n We use the fixed size for input tensors with 256 channels and 14 x 14 dimensions.\n The batch size is 256. Convolution filters contain 512 filters of size 3 x 3.\n We use stride size 1 and padding size 1 for the convolution. In the example, we use\n NHWCnc memory layout.The following code defines the convolution algorithm in TVM.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_conv_tensorcore.py",
    "lines": [
      46,
      47,
      48,
      49,
      50,
      51,
      52
    ],
    "matched_text": "################################################################"
  },
  {
    "satd_id": 6647075,
    "satd_repo": 70746484,
    "satd_sha": "324a9607eb563f81e55fdd0c9d078c2f74651817",
    "satd_text": "###############################################################\n TensorCore Introduction\n -------------------------\n Each Tensor Core provides a 4x4x4 matrix processing array that operates\n :code:`D = A * B + C`, where A, B, C and D are 4x4 matrices as Figure shows.\n The matrix multiplication inputs A and B are FP16 matrices, while the accumulation\n matrices C and D may be FP16 or FP32 matrices.\n\n However, CUDA programmers can only use warp-level primitive\n :code:`wmma::mma_sync(acc_frag, a_frag, b_frag, acc_frag)` to perform\n 16x16x16 half-precision matrix multiplication on tensor cores. Before invoking\n the matrix multiplication, programmers must load data from memory into registers\n with primitive :code:`wmma::load_matrix_sync`, explicitly. The NVCC compiler translates\n that primitive into multiple memory load instructions. At run time, every thread loads\n 16 elements from matrix A and 16 elements from B.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_conv_tensorcore.py",
    "lines": [
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44
    ],
    "matched_text": "################################################################"
  },
  {
    "satd_id": 6647105,
    "satd_repo": 70746484,
    "satd_sha": "c147a31ddea3ba675b72185dd066e52e739b278d",
    "satd_text": " In TVM, tf.assert is converted to a no-op which is actually a 0,\n though it should probably be none or an empty tuple.\n\n ToDo: It appears that the frontend converter gets confused here and\n entirely eliminates all operands from main(). Likely because x <= x\n is always true, so the placeholder can be eliminated. But TF doesn't\n do that, it's happening in Relay, and that optimization shouldn't\n affect the arity of the main function. We should have to pass in\n x_value here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tensorflow/test_debugging.py",
    "lines": [
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46
    ],
    "matched_text": "        # In TVM, tf.assert is converted to a no-op which is actually a 0,"
  },
  {
    "satd_id": 6647106,
    "satd_repo": 70746484,
    "satd_sha": "c147a31ddea3ba675b72185dd066e52e739b278d",
    "satd_text": " It turns out that tf.assert() creates a large and complex subgraph if\n you capture a variable as part of the error message. So we need to\n test that, too.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/tensorflow/test_debugging.py",
    "lines": [
      54,
      55,
      56
    ],
    "matched_text": "        # It turns out that tf.assert() creates a large and complex subgraph if"
  },
  {
    "satd_id": 6647108,
    "satd_repo": 70746484,
    "satd_sha": "c147a31ddea3ba675b72185dd066e52e739b278d",
    "satd_text": " ToDo: The frontend converter gets confused here as well, thinking\n that it needs to be told what x is twice. It also notes the output of\n the graph as a boolean, which is not correct - as you can see above,\n TF believes that the value of this graph is None. In addition, the\n arity of the translated function should be 1, not 2.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tensorflow/test_debugging.py",
    "lines": [
      63,
      64,
      65,
      66,
      67
    ],
    "matched_text": "        # ToDo: The frontend converter gets confused here as well, thinking"
  },
  {
    "satd_id": 6647114,
    "satd_repo": 70746484,
    "satd_sha": "c147a31ddea3ba675b72185dd066e52e739b278d",
    "satd_text": " ToDo: This should really be an op that returns nothing, which could\n be represented as an empty tuple. It turns out that TVM\n infrastructure doesn't like running functions that return None and\n also don't like running functions that return an empty tuple. So it\n doesn't work, but it should be made to work and then this could be\n improved. In the mean time, it is hard to imagine a case where it\n matters in any real way that a no-op is converted to a constant 0.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      448,
      449,
      450,
      451,
      452,
      453,
      454
    ],
    "matched_text": "        # ToDo: This should really be an op that returns nothing, which could"
  },
  {
    "satd_id": 6647124,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647124,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/depthwise_conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647124,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/gemm.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647124,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/transforms.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647157,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647157,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/depthwise_conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647157,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/gemm.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647157,
    "satd_repo": 70746484,
    "satd_sha": "ecb0a7eab07444758f107062ff9472dc3fc6c6a6",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/bifrost/transforms.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6647182,
    "satd_repo": 70746484,
    "satd_sha": "5a17707089fd0fb23d482d8e3efcd965b7ccdf5d",
    "satd_text": " We cache the allocated object in the constant pool. To measure, the\n first iteration will set the pool up. The other iterations will\n directly reuse the allocated objects.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      798,
      799,
      800
    ],
    "matched_text": "        // We cache the allocated object in the constant pool. To measure, the"
  },
  {
    "satd_id": 6647223,
    "satd_repo": 70746484,
    "satd_sha": "7895adb243ea6fbb1b434904ff3925c3a84f5693",
    "satd_text": " Hack use TVMRetValue as exchange",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/op.cc",
    "lines": [
      190
    ],
    "matched_text": "  // Hack use TVMRetValue as exchange"
  },
  {
    "satd_id": 6647259,
    "satd_repo": 70746484,
    "satd_sha": "36a96773bc24f65a52404056d9f1c170ebea206b",
    "satd_text": " TODO(wweic): Gather fails in PartialEvaluate\n self.define_tensor_array_gather()",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/prelude.py",
    "lines": [
      523,
      524
    ],
    "matched_text": "        # TODO(wweic): Gather fails in PartialEvaluate"
  },
  {
    "satd_id": 6647260,
    "satd_repo": 70746484,
    "satd_sha": "36a96773bc24f65a52404056d9f1c170ebea206b",
    "satd_text": " TODO(wweic): fix conversion for Any",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/testing/py_converter.py",
    "lines": [
      210
    ],
    "matched_text": "                # TODO(wweic): fix conversion for Any"
  },
  {
    "satd_id": 6647272,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " The number of dimensions is not needed for constructing an\n `AllocTensor` instruction as it equals to the length of the `shape`\n vector. However, we save it to conveniently deserialize the instruction\n because we will know how many fields are needed by the `shape` argument.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/serializer.cc",
    "lines": [
      248,
      249,
      250,
      251
    ],
    "matched_text": "      // The number of dimensions is not needed for constructing an"
  },
  {
    "satd_id": 6647272,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " The number of dimensions is not needed for constructing an\n `AllocTensor` instruction as it equals to the length of the `shape`\n vector. However, we save it to conveniently deserialize the instruction\n because we will know how many fields are needed by the `shape` argument.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/executable.cc",
    "lines": [
      294,
      295,
      296,
      297
    ],
    "matched_text": "      // The number of dimensions is not needed for constructing an"
  },
  {
    "satd_id": 6647334,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": "! \\brief A map from globals (as strings) to their index in the function map. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      534
    ],
    "matched_text": "  /*! \\brief A map from globals (as strings) to their index in the function map. */"
  },
  {
    "satd_id": 6647340,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " TODO(wweic) ctx could be obtained from the ctxs list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      676
    ],
    "matched_text": "  // TODO(wweic) ctx could be obtained from the ctxs list."
  },
  {
    "satd_id": 6647340,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " TODO(wweic) ctx could be obtained from the ctxs list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      798
    ],
    "matched_text": "        // TODO(wweic) ctx could be obtained from the ctxs list."
  },
  {
    "satd_id": 6647340,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " TODO(wweic) ctx could be obtained from the ctxs list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      898
    ],
    "matched_text": "        // TODO(wweic) ctx could be obtained from the ctxs list."
  },
  {
    "satd_id": 6647340,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " TODO(wweic) ctx could be obtained from the ctxs list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      920
    ],
    "matched_text": "        // TODO(wweic) ctx could be obtained from the ctxs list."
  },
  {
    "satd_id": 6647341,
    "satd_repo": 70746484,
    "satd_sha": "4052de6d1ce446d124363c3530bc2ad2fb7bfa80",
    "satd_text": " TODO(wweic) ctx could be obtained from the ctxs list.\n TODO(wweic) ctx could be obtained from the ctxs list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6647376,
    "satd_repo": 70746484,
    "satd_sha": "a0bd3786ed8957520dad55afe4909d785b58ff61",
    "satd_text": " NOTE: the first argument is not needed for SimpleObjAllocator\n It is reserved for special allocators that needs to recycle\n the object to itself (e.g. in the case of object pool).\n\n In the case of an object pool, an allocator needs to create\n a special chunk memory that hides reference to the allocator\n and call allocator's release function in the deleter.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/memory.h",
    "lines": [
      87,
      88,
      89,
      90,
      91,
      92,
      93
    ],
    "matched_text": "      // NOTE: the first argument is not needed for SimpleObjAllocator"
  },
  {
    "satd_id": 6647383,
    "satd_repo": 70746484,
    "satd_sha": "a0bd3786ed8957520dad55afe4909d785b58ff61",
    "satd_text": " NOTE: this is a relatively slow path for child checking\n Most types are already checked by the fast-path via reserved slot checking.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/object.cc",
    "lines": [
      56,
      57
    ],
    "matched_text": "  // NOTE: this is a relatively slow path for child checking"
  },
  {
    "satd_id": 6647404,
    "satd_repo": 70746484,
    "satd_sha": "a0bd3786ed8957520dad55afe4909d785b58ff61",
    "satd_text": " dynamically allocate slow",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/cpp/object_protocol_test.cc",
    "lines": [
      32
    ],
    "matched_text": "  // dynamically allocate slow"
  },
  {
    "satd_id": 6647417,
    "satd_repo": 70746484,
    "satd_sha": "bfb811c72c484e00283a20f6b4773659092dfb62",
    "satd_text": " TODO - Naive softmax int8 implementation leads to bad accuracy. Currently, we can\n dequantize to FP32 and perform softmax on FP32. We can investigate an integer only softmax\n implementation in future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      368,
      369,
      370
    ],
    "matched_text": "        # TODO - Naive softmax int8 implementation leads to bad accuracy. Currently, we can"
  },
  {
    "satd_id": 6647421,
    "satd_repo": 70746484,
    "satd_sha": "bfb811c72c484e00283a20f6b4773659092dfb62",
    "satd_text": " End to End quantized\n TODO - MobilenetV2 fails for now. Remove when fixed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1113,
      1114
    ],
    "matched_text": "    # End to End quantized"
  },
  {
    "satd_id": 6647432,
    "satd_repo": 70746484,
    "satd_sha": "9d5cba201a0dc6121ca03b5fe311ff35e4c5f220",
    "satd_text": " Test broadcast with 1s\n Test broadcast with values other than 1",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6647513,
    "satd_repo": 70746484,
    "satd_sha": "9572d98e04425baa48cbefd1791affae68bef4f6",
    "satd_text": " n is the number of nodes to be fused, should be less than 2*max_fused_ops",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_fuse_ops.py",
    "lines": [
      558
    ],
    "matched_text": "    # n is the number of nodes to be fused, should be less than 2*max_fused_ops"
  },
  {
    "satd_id": 6647530,
    "satd_repo": 70746484,
    "satd_sha": "425430d46048a78701e4b81674455d24e22e6ffc",
    "satd_text": " 3) Perform the multiplication in higher precision.\n The scalar is a fixed point value of int32 where the decimal point is\n between bits 31 and 30. After multiplying with input_tensor, the result\n is in int64 where the decimal point is sitting between bits 31 and 30\n (from the right, rightmost bit is bit 0). The computation is performed in\n higher precision to avoid overflow in multiplying two int32 values.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/util.cc",
    "lines": [
      97,
      98,
      99,
      100,
      101,
      102
    ],
    "matched_text": "  // 3) Perform the multiplication in higher precision."
  },
  {
    "satd_id": 6647542,
    "satd_repo": 70746484,
    "satd_sha": "22412726ce6950b2145f39ca1c228fd88e367d1c",
    "satd_text": " The dce code seprate variable into three parts:\n used 0 times (remove)\n used 1 times (inline)\n used 2 times (dont do anything).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/dead_code.cc",
    "lines": [
      114,
      115,
      116,
      117
    ],
    "matched_text": "    // The dce code seprate variable into three parts:"
  },
  {
    "satd_id": 6647565,
    "satd_repo": 70746484,
    "satd_sha": "92ffa0622ccf5ec4b971bfeded56356e79bb330c",
    "satd_text": " TODO(wweic): Support heterogenous execution",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      897
    ],
    "matched_text": "  // TODO(wweic): Support heterogenous execution"
  },
  {
    "satd_id": 6647602,
    "satd_repo": 70746484,
    "satd_sha": "fa4d3ec6e31461697acf910a8aa1f0680308dcaf",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition, too-many-nested-blocks"
  },
  {
    "satd_id": 6647622,
    "satd_repo": 70746484,
    "satd_sha": "d0fe532ed8edf2f1474beec868b0742a3d503c5b",
    "satd_text": " Prepare the call_node->checked_type(). For the call node inputs, we ensure that the shape is\n Int32. Following code ensures the same for the output as well.\n TODO(@icemelon): Support recursive tuple",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      223,
      224,
      225
    ],
    "matched_text": "    // Prepare the call_node->checked_type(). For the call node inputs, we ensure that the shape is"
  },
  {
    "satd_id": 6647656,
    "satd_repo": 70746484,
    "satd_sha": "f0079a5713ecb0adee8f82e38b0055438225d345",
    "satd_text": " The following code are not intended to be used in the codebase.\n Instead, they generate clear compiler errors that ask developers\n to use the specific division function.\n The second template argument is necessary to make sure the\n code compiles lazily by the compiler during invocation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr_operator.h",
    "lines": [
      768,
      769,
      770,
      771,
      772
    ],
    "matched_text": "// The following code are not intended to be used in the codebase."
  },
  {
    "satd_id": 6647658,
    "satd_repo": 70746484,
    "satd_sha": "f0079a5713ecb0adee8f82e38b0055438225d345",
    "satd_text": " TODO(tvm-team): use floordiv, which could give better bound.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/bound_deducer.cc",
    "lines": [
      153
    ],
    "matched_text": "    // TODO(tvm-team): use floordiv, which could give better bound."
  },
  {
    "satd_id": 6647659,
    "satd_repo": 70746484,
    "satd_sha": "f0079a5713ecb0adee8f82e38b0055438225d345",
    "satd_text": " TODO(tqchen): change to floormod/div",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/lang/buffer.cc",
    "lines": [
      34
    ],
    "matched_text": "// TODO(tqchen): change to floormod/div"
  },
  {
    "satd_id": 6647660,
    "satd_repo": 70746484,
    "satd_sha": "f0079a5713ecb0adee8f82e38b0055438225d345",
    "satd_text": " TODO(tqchen): switch to floordiv",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/lang/expr_operator.cc",
    "lines": [
      209
    ],
    "matched_text": "// TODO(tqchen): switch to floordiv"
  },
  {
    "satd_id": 6647675,
    "satd_repo": 70746484,
    "satd_sha": "b410df8c5b1c5840a724df2313290d0f42014887",
    "satd_text": " Recursively call simplification when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/ir_visitor_with_analyzer.h",
    "lines": [
      65
    ],
    "matched_text": "    // Recursively call simplification when necessary."
  },
  {
    "satd_id": 6647685,
    "satd_repo": 70746484,
    "satd_sha": "d183096408062dca71b0a1acb26b31df7ffc99db",
    "satd_text": " NOTE: the use of floormod(c2, c3) was intentional to simplify the const.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      352
    ],
    "matched_text": "    // NOTE: the use of floormod(c2, c3) was intentional to simplify the const."
  },
  {
    "satd_id": 6647715,
    "satd_repo": 70746484,
    "satd_sha": "ed9fdfb0926f56990df4bb9768774b9d32a43b39",
    "satd_text": "\n * Abstract class to find and combine parallel ops and the elementwise ops that follow.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/combine_parallel_op.h",
    "lines": [
      125,
      126,
      127
    ],
    "matched_text": "/*"
  },
  {
    "satd_id": 6647762,
    "satd_repo": 70746484,
    "satd_sha": "16d4da4d61427b292fbc2f8de8c14472b9f36e31",
    "satd_text": " TODO(hgt312): set fast math flag",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      750
    ],
    "matched_text": "    // TODO(hgt312): set fast math flag"
  },
  {
    "satd_id": 6647782,
    "satd_repo": 70746484,
    "satd_sha": "d7a09150a4e015d6d89be054f06da6d3343ecdab",
    "satd_text": " it is fine to discard the let binding\n because the value will always be inlined in the simplifier.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      1712,
      1713
    ],
    "matched_text": "    // it is fine to discard the let binding"
  },
  {
    "satd_id": 6647783,
    "satd_repo": 70746484,
    "satd_sha": "d7a09150a4e015d6d89be054f06da6d3343ecdab",
    "satd_text": " it is fine to discard the let binding\n because the call to simplify will always inline the var.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/stmt_simplify.cc",
    "lines": [
      57,
      58
    ],
    "matched_text": "      // it is fine to discard the let binding"
  },
  {
    "satd_id": 6647804,
    "satd_repo": 70746484,
    "satd_sha": "bec08fecf5db8f1b2f36dd8b944a5084a2b72798",
    "satd_text": " Index error happens when no entities left after filtering, which was designed\n to prune tuning space for better search efficiency.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      182,
      183
    ],
    "matched_text": "        # Index error happens when no entities left after filtering, which was designed"
  },
  {
    "satd_id": 6647826,
    "satd_repo": 70746484,
    "satd_sha": "924391665f12a5a847a8af4848af9b5fa40e6562",
    "satd_text": " Recursively call simplification when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      1090
    ],
    "matched_text": "  // Recursively call simplification when necessary."
  },
  {
    "satd_id": 6647826,
    "satd_repo": 70746484,
    "satd_sha": "924391665f12a5a847a8af4848af9b5fa40e6562",
    "satd_text": " Recursively call simplification when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/ir_mutator_with_analyzer.cc",
    "lines": [
      201
    ],
    "matched_text": "  // Recursively call simplification when necessary."
  },
  {
    "satd_id": 6647838,
    "satd_repo": 70746484,
    "satd_sha": "1fe17d1427f37acfbb464fccde258b7afe516276",
    "satd_text": " An index of deferred tokens, allowing us to efficiently detect duplicated\n deferred_initializer blocks.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_stream.h",
    "lines": [
      179,
      180
    ],
    "matched_text": "  // An index of deferred tokens, allowing us to efficiently detect duplicated"
  },
  {
    "satd_id": 6647850,
    "satd_repo": 70746484,
    "satd_sha": "c846d17c65ffd0d0cd9f9c3be321af0ad1da13f3",
    "satd_text": " pylint: disable=unused-argument\n split N (batch dimension)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d_transpose_nchw.py",
    "lines": [
      134,
      135
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6647855,
    "satd_repo": 70746484,
    "satd_sha": "c846d17c65ffd0d0cd9f9c3be321af0ad1da13f3",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d_transpose.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6647895,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " cleanup vulkan related caches.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan.cc",
    "lines": [
      722
    ],
    "matched_text": "    // cleanup vulkan related caches."
  },
  {
    "satd_id": 6647895,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " cleanup vulkan related caches.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_module.cc",
    "lines": [
      70
    ],
    "matched_text": "    // cleanup vulkan related caches."
  },
  {
    "satd_id": 6647919,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " Query phyiscal device property\n find a memory that is host visible, no need to be consistent",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan.cc",
    "lines": [
      572,
      573
    ],
    "matched_text": "    // Query phyiscal device property"
  },
  {
    "satd_id": 6647919,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " Query phyiscal device property\n find a memory that is host visible, no need to be consistent",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_device_api.cc",
    "lines": [
      564,
      565
    ],
    "matched_text": "  // Query phyiscal device property"
  },
  {
    "satd_id": 6647920,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " Otherwise, the more expensive deferred path.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan.cc",
    "lines": [
      1060
    ],
    "matched_text": "  // Otherwise, the more expensive deferred path."
  },
  {
    "satd_id": 6647925,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " TODO(tulloch): should we instead make the staging buffer a property of the\n Stream? This would allow us to elide synchronizations here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan.cc",
    "lines": [
      295,
      296
    ],
    "matched_text": "      // TODO(tulloch): should we instead make the staging buffer a property of the"
  },
  {
    "satd_id": 6647932,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " TODO(tulloch): add CMAKE options.\n suppress unused variable warning.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan.cc",
    "lines": [
      426,
      427
    ],
    "matched_text": "      // TODO(tulloch): add CMAKE options."
  },
  {
    "satd_id": 6647948,
    "satd_repo": 70746484,
    "satd_sha": "2536465c2e274273344c5e67337fd3b4c252ec2f",
    "satd_text": " It is unnecessary to invoke our initializer if we have a matching token.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_stream.h",
    "lines": [
      109
    ],
    "matched_text": "    // It is unnecessary to invoke our initializer if we have a matching token."
  },
  {
    "satd_id": 6647962,
    "satd_repo": 70746484,
    "satd_sha": "bb82e09f9c38e65a62f416e4b4600375fb50a839",
    "satd_text": " For LLVM < 8.0, it shows \"'cascadelake' is not a recognized processor for this target\n (ignoring processor)\" error with the following setting. After LLVM 8.0 is enabled in the\n test, we should use cascadelake setting.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/contrib/test_gemm_acc32_vnni.py",
    "lines": [
      40,
      41,
      42
    ],
    "matched_text": "    # For LLVM < 8.0, it shows \"'cascadelake' is not a recognized processor for this target"
  },
  {
    "satd_id": 6647965,
    "satd_repo": 70746484,
    "satd_sha": "eb220d923521e81f65b603dbe6bf88321635a4d7",
    "satd_text": " If config is not set, we can reuse the default config for NCHW.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_int8.py",
    "lines": [
      38
    ],
    "matched_text": "    # If config is not set, we can reuse the default config for NCHW."
  },
  {
    "satd_id": 6647981,
    "satd_repo": 70746484,
    "satd_sha": "1de52bb0109af3e7051a573c2b8fa2f039c3d05d",
    "satd_text": " first 16-bit of surrogate pair, get the next one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "3rdparty/picojson/picojson.h",
    "lines": [
      779
    ],
    "matched_text": "    // first 16-bit of surrogate pair, get the next one"
  },
  {
    "satd_id": 6647983,
    "satd_repo": 70746484,
    "satd_sha": "1de52bb0109af3e7051a573c2b8fa2f039c3d05d",
    "satd_text": " a second 16-bit of a surrogate pair appeared",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "3rdparty/picojson/picojson.h",
    "lines": [
      776
    ],
    "matched_text": "      // a second 16-bit of a surrogate pair appeared"
  },
  {
    "satd_id": 6648003,
    "satd_repo": 70746484,
    "satd_sha": "1de52bb0109af3e7051a573c2b8fa2f039c3d05d",
    "satd_text": " Assign the pooled entries. A unified memory pool is used to simplify\n memory assignment for each node entry. The allocated memory on each device\n is mapped to this pool.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/standalone/utvm_graph_runtime.cc",
    "lines": [
      310,
      311,
      312
    ],
    "matched_text": "  // Assign the pooled entries. A unified memory pool is used to simplify"
  },
  {
    "satd_id": 6648020,
    "satd_repo": 70746484,
    "satd_sha": "1de52bb0109af3e7051a573c2b8fa2f039c3d05d",
    "satd_text": " TODO(tulloch): these are essentially unused after construction.\n The graph nodes",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/standalone/utvm_graph_runtime.h",
    "lines": [
      142,
      143
    ],
    "matched_text": "  // TODO(tulloch): these are essentially unused after construction."
  },
  {
    "satd_id": 6648069,
    "satd_repo": 70746484,
    "satd_sha": "4e2d707f2d2160a30375267269c4f5da9a810cfa",
    "satd_text": " TODO(@jroesch): we should remove this helper when we port over prelude",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/prelude.py",
    "lines": [
      479
    ],
    "matched_text": "        # TODO(@jroesch): we should remove this helper when we port over prelude"
  },
  {
    "satd_id": 6648093,
    "satd_repo": 70746484,
    "satd_sha": "50c4546f59879753114a423ef6622c8d49c1a739",
    "satd_text": "!\n     * \\brief clear class variable.\n     ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/sim_tlpp.h",
    "lines": [
      75,
      76,
      77
    ],
    "matched_text": "    /*!"
  },
  {
    "satd_id": 6648164,
    "satd_repo": 70746484,
    "satd_sha": "ca0292d8c55634af5ca9cf956fa2d22740ced2e0",
    "satd_text": " TODO(weberlo): update this test once extern is implemented",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_ir_parser.py",
    "lines": [
      858
    ],
    "matched_text": "    # TODO(weberlo): update this test once extern is implemented"
  },
  {
    "satd_id": 6648186,
    "satd_repo": 70746484,
    "satd_sha": "e873a73abd1175592d47dbd60b48b3e5382679aa",
    "satd_text": " TODO: enable when the low building performance (several minutes) fixed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/benchmarking/benchmark_vm.py",
    "lines": [
      117
    ],
    "matched_text": "# TODO: enable when the low building performance (several minutes) fixed."
  },
  {
    "satd_id": 6648216,
    "satd_repo": 70746484,
    "satd_sha": "23c22812b8e2a46133cfbc89e4910e24dc0b976a",
    "satd_text": " test_conv2d_transpose(device=\"arm_cpu\")",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tests/python/integration/test_benchmark_topi_conv2d_transpose.py",
    "lines": [
      230
    ],
    "matched_text": "    # test_conv2d_transpose(device=\"arm_cpu\")"
  },
  {
    "satd_id": 6648225,
    "satd_repo": 70746484,
    "satd_sha": "23c22812b8e2a46133cfbc89e4910e24dc0b976a",
    "satd_text": " FIXME: we need a custom clip operator to circumvent a pattern detection limitation",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/integration/test_benchmark_topi_conv2d.py",
    "lines": [
      61
    ],
    "matched_text": "# FIXME: we need a custom clip operator to circumvent a pattern detection limitation"
  },
  {
    "satd_id": 6648225,
    "satd_repo": 70746484,
    "satd_sha": "23c22812b8e2a46133cfbc89e4910e24dc0b976a",
    "satd_text": " FIXME: we need a custom clip operator to circumvent a pattern detection limitation",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/integration/test_benchmark_topi_conv2d_transpose.py",
    "lines": [
      53
    ],
    "matched_text": "# FIXME: we need a custom clip operator to circumvent a pattern detection limitation"
  },
  {
    "satd_id": 6648244,
    "satd_repo": 70746484,
    "satd_sha": "a6bb84a834f9240c75db23239fe51a4d9b7cfb64",
    "satd_text": " FIXME (anijain2305) - The lowering can be further optimized. Instead of inserting requantize in\n the start, we can insert requantize at the end if both input tensors have same qnn params. In\n that case, we can first add the tensors, subtract the zero point, and requantize at the end.\n This can be done in future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/add.cc",
    "lines": [
      64,
      65,
      66,
      67
    ],
    "matched_text": "  // FIXME (anijain2305) - The lowering can be further optimized. Instead of inserting requantize in"
  },
  {
    "satd_id": 6648272,
    "satd_repo": 70746484,
    "satd_sha": "734df8d59b8a9c58cfd87eaca49e635c2ef39e81",
    "satd_text": " TODO: walk_list_remove_pid ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "3rdparty/cma/cma.c",
    "lines": [
      541
    ],
    "matched_text": "  /* TODO: walk_list_remove_pid */"
  },
  {
    "satd_id": 6648294,
    "satd_repo": 70746484,
    "satd_sha": "734df8d59b8a9c58cfd87eaca49e635c2ef39e81",
    "satd_text": " inline function for readability ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "3rdparty/cma/cma.c",
    "lines": [
      273
    ],
    "matched_text": "/* inline function for readability */"
  },
  {
    "satd_id": 6648377,
    "satd_repo": 70746484,
    "satd_sha": "0d4870cc70a6898ec596f51fa6ddd72b1cfc5cab",
    "satd_text": " term 3 and term 4 become zero.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/convolution.cc",
    "lines": [
      331
    ],
    "matched_text": "    // term 3 and term 4 become zero."
  },
  {
    "satd_id": 6648387,
    "satd_repo": 70746484,
    "satd_sha": "0d4870cc70a6898ec596f51fa6ddd72b1cfc5cab",
    "satd_text": " term 2 and term 4 become zero.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/convolution.cc",
    "lines": [
      334
    ],
    "matched_text": "    // term 2 and term 4 become zero."
  },
  {
    "satd_id": 6648421,
    "satd_repo": 70746484,
    "satd_sha": "60de5be18e6cc08c507ed18fac3dcdba2221de75",
    "satd_text": " TODO(weberlo): Refactor between read and write.\n Check if we need to chunk this write request.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/openocd_low_level_device.cc",
    "lines": [
      60,
      61
    ],
    "matched_text": "    // TODO(weberlo): Refactor between read and write."
  },
  {
    "satd_id": 6648468,
    "satd_repo": 70746484,
    "satd_sha": "60de5be18e6cc08c507ed18fac3dcdba2221de75",
    "satd_text": " TODO(weberlo): Figure out why 32 is the minimum constant that works.\n\n The current hypothesis is that the last symbols in the \".bss\" and\n \".sbss\" sections may have size zero, since the symbols in these\n sections are uninitialized and there's no address that follows that\n would enforce a particular size.\n\n If this is the case, then 32 just happens to be a safe amount of\n padding for most cases, but symbols can be arbitrarily large, so this\n isn't bulletproof.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/binutil.py",
    "lines": [
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92
    ],
    "matched_text": "        # TODO(weberlo): Figure out why 32 is the minimum constant that works."
  },
  {
    "satd_id": 6648469,
    "satd_repo": 70746484,
    "satd_sha": "60de5be18e6cc08c507ed18fac3dcdba2221de75",
    "satd_text": " TODO(weberlo): Should we just give the device the *entire* memory layout\n decided by the session?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/low_level_device.h",
    "lines": [
      70,
      71
    ],
    "matched_text": "  // TODO(weberlo): Should we just give the device the *entire* memory layout"
  },
  {
    "satd_id": 6648473,
    "satd_repo": 70746484,
    "satd_sha": "60de5be18e6cc08c507ed18fac3dcdba2221de75",
    "satd_text": " TODO(weberlo): We need a better way of configuring devices.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      92
    ],
    "matched_text": "    // TODO(weberlo): We need a better way of configuring devices."
  },
  {
    "satd_id": 6648474,
    "satd_repo": 70746484,
    "satd_sha": "60de5be18e6cc08c507ed18fac3dcdba2221de75",
    "satd_text": " TODO(weberlo): How can we test the OpenOCD device?  The CI would need to have OpenOCD\n and Spike installed.",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_runtime_micro.py",
    "lines": [
      83,
      84
    ],
    "matched_text": "# TODO(weberlo): How can we test the OpenOCD device?  The CI would need to have OpenOCD"
  },
  {
    "satd_id": 6648482,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": "pylint: disable=invalid-name, unused-argument, len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      17
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument, len-as-condition"
  },
  {
    "satd_id": 6648484,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " pylint: disable=invalid-name,unused-argument, len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument, len-as-condition"
  },
  {
    "satd_id": 6648496,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): Allow recursive tuple\n Creates shape function from functor.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6648502,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): Allow recursive tuple",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      115
    ],
    "matched_text": "          // TODO(@icemelon): Allow recursive tuple"
  },
  {
    "satd_id": 6648502,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): Allow recursive tuple",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      503
    ],
    "matched_text": "      // TODO(@icemelon): Allow recursive tuple"
  },
  {
    "satd_id": 6648504,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): Support recursive tuple",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/compile_engine.cc",
    "lines": [
      340
    ],
    "matched_text": "        // TODO(@icemelon): Support recursive tuple"
  },
  {
    "satd_id": 6648516,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@jroesch): this doesn't support mutual letrec",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      283
    ],
    "matched_text": "  // TODO(@jroesch): this doesn't support mutual letrec"
  },
  {
    "satd_id": 6648519,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): allow recursive tuple",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      384
    ],
    "matched_text": "        // TODO(@icemelon): allow recursive tuple"
  },
  {
    "satd_id": 6648524,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon9): Need to copy data here for heterogeneous exec",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      476
    ],
    "matched_text": "          // TODO(@icemelon9): Need to copy data here for heterogeneous exec"
  },
  {
    "satd_id": 6648526,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@wweic): FuseOps pass currently don't handle Let\n For now, we put FuseOps before ToANormalForm to enable it",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      847,
      848
    ],
    "matched_text": "                             // TODO(@wweic): FuseOps pass currently don't handle Let"
  },
  {
    "satd_id": 6648528,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " Alloc return tensors given the shape regs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      497
    ],
    "matched_text": "    // Alloc return tensors given the shape regs"
  },
  {
    "satd_id": 6648532,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " shape_of op has to be run on the host target\n TODO(@icemelon9): handle heterogeneous target, such as cuda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      405,
      406
    ],
    "matched_text": "    // shape_of op has to be run on the host target"
  },
  {
    "satd_id": 6648535,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon): Change arange to kOpaque because FuseOps doesn't consider dynamic shape",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/tensor/transform.cc",
    "lines": [
      1125
    ],
    "matched_text": "// TODO(@icemelon): Change arange to kOpaque because FuseOps doesn't consider dynamic shape"
  },
  {
    "satd_id": 6648539,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " The following currently fail because topi compute treats Any as 1\n will requires auto_broadcast buffer to solve the problem\n TODO(@zhiics): Fix this\n verify_any_broadcast((relay.Any(),), (3, 2), (2,), (3, 2), relay.add, np.add)\n verify_any_broadcast((relay.Any(), 2), (3, 2), (3, 2), (3, 2), relay.add, np.add)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      56,
      57,
      58,
      59,
      60
    ],
    "matched_text": "    # The following currently fail because topi compute treats Any as 1"
  },
  {
    "satd_id": 6648540,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@wweic): because vm doesn't support heterogeneous exec, we can only test\n shape function on CPU.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_any.py",
    "lines": [
      33,
      34
    ],
    "matched_text": "# TODO(@wweic): because vm doesn't support heterogeneous exec, we can only test"
  },
  {
    "satd_id": 6648542,
    "satd_repo": 70746484,
    "satd_sha": "eef35a57d95c650e490b168f1f585d9ec00412ee",
    "satd_text": " TODO(@icemelon9): Need to revisit this part",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/include/topi/detail/broadcast.h",
    "lines": [
      55
    ],
    "matched_text": "    // TODO(@icemelon9): Need to revisit this part"
  },
  {
    "satd_id": 6648568,
    "satd_repo": 70746484,
    "satd_sha": "d08c74caf6d0ec0919810ca442861a462e5b81cf",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/bitserial_conv2d.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument"
  },
  {
    "satd_id": 6648570,
    "satd_repo": 70746484,
    "satd_sha": "d08c74caf6d0ec0919810ca442861a462e5b81cf",
    "satd_text": " pylint: disable=unused-argument, redefined-builtin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/bitserial_conv2d.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=unused-argument, redefined-builtin"
  },
  {
    "satd_id": 6648598,
    "satd_repo": 70746484,
    "satd_sha": "ec7790e355f00bf5b0764d223087dc0f63176122",
    "satd_text": " FIXME (anijain2305) - The lowering can be further optimized. Instead of inserting requantize in\n the start, we can insert requantize at the end if and only if all the input tensors have same\n qnn params. This can be done in future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/concatenate.cc",
    "lines": [
      77,
      78,
      79
    ],
    "matched_text": "  // FIXME (anijain2305) - The lowering can be further optimized. Instead of inserting requantize in"
  },
  {
    "satd_id": 6648682,
    "satd_repo": 70746484,
    "satd_sha": "95f12e313734e0469653eea4d364f04fd3839353",
    "satd_text": "!\n   * \\brief Get a PackedFunc from module.\n   *\n   *  The PackedFunc may not be fully initialized,\n   *  there might still be first time running overhead when\n   *  executing the function on certain devices.\n   *  For benchmarking, use prepare to eliminate\n   *\n   * \\param name the name of the function.\n   * \\param sptr_to_self The shared_ptr that points to this module node.\n   *\n   * \\return PackedFunc(nullptr) when it is not available.\n   *\n   * \\note The function will always remain valid.\n   *   If the function needs resource from the module(e.g. late linking),\n   *   it should capture sptr_to_self.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6648688,
    "satd_repo": 70746484,
    "satd_sha": "cb22d50ae41e04323a65292cf25c060d3c9fca92",
    "satd_text": " TODO: we need to support more colorspace, such as rgb.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/frontend/coreml.py",
    "lines": [
      36
    ],
    "matched_text": "    # TODO: we need to support more colorspace, such as rgb."
  },
  {
    "satd_id": 6648712,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": " - introduced by residual connection in MobileNetV2\n     ...\n     %81 = add(%80, meta[relay.Constant])\n     %82 = annotation.cast_hint(%81, 'int8')\n     %83 = annotation.stop_fusion(%82)\n     %84 = add(%79, %83)\n     ...\n     %96 = nn.conv2d(%94, %meta[relay.Constant])\n     %96 = add(%95, %meta[relay.Constant])\n     %97 = add(%96, %84)  <- need to insert annotations for %96\n     ...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition.py",
    "lines": [
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121
    ],
    "matched_text": "        # - introduced by residual connection in MobileNetV2"
  },
  {
    "satd_id": 6648713,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": "TODO(wuwei/ziheng) cuda specific rules",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition.py",
    "lines": [
      137
    ],
    "matched_text": "        #TODO(wuwei/ziheng) cuda specific rules"
  },
  {
    "satd_id": 6648716,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": " TODO(ziheng) enhance `register_partition_function` to dispatch\n for target automatically",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/quantize/_partition.py",
    "lines": [
      131,
      132
    ],
    "matched_text": "# TODO(ziheng) enhance `register_partition_function` to dispatch"
  },
  {
    "satd_id": 6648717,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": " - introduced by residual connection in ResNet\n     ...\n     %13 = nn.conv2d(%12, %meta[relay.Constant])\n     %14 = add(%13, %meta[relay.Constant])\n     %15 = annotation.cast_hint(%15, 'int8')\n     %16 = annotation.stop_fusion(%16)\n     %17 = add(%5, %16)\n     %18 = nn.relu(%17)\n     ...\n     %24 = nn.conv2d(%23, %meta[relay.Constant])\n     %25 = add(%24, %meta[relay.Constant])\n     %26 = add(%18, %25)  <- need to insert annotations for %25\n     ...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_partition.py",
    "lines": [
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104
    ],
    "matched_text": "        # - introduced by residual connection in ResNet"
  },
  {
    "satd_id": 6648722,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": " TODO(tvm-teams): since partition has added cast_hint in different\n branches, try to remove this in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/quantize/annotate.cc",
    "lines": [
      79,
      80
    ],
    "matched_text": "  // TODO(tvm-teams): since partition has added cast_hint in different"
  },
  {
    "satd_id": 6648730,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": "TODO(for user): replace the line with the path to imagenet validation dataset",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/nightly/quantization/test_quantization_accuracy.py",
    "lines": [
      133
    ],
    "matched_text": "    #TODO(for user): replace the line with the path to imagenet validation dataset"
  },
  {
    "satd_id": 6648733,
    "satd_repo": 70746484,
    "satd_sha": "7eb1f353de5a628d3e7ceb3b012dc3d58afac2e4",
    "satd_text": " TODO: need to fix accuracy\n Config('mobilenetv2_1.0', nbit_input=8, dtype_input='int8', nbit_output=16, dtype_output='int16', global_scale=4.0),",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/nightly/quantization/test_quantization_accuracy.py",
    "lines": [
      145,
      146
    ],
    "matched_text": "        # TODO: need to fix accuracy"
  },
  {
    "satd_id": 6648761,
    "satd_repo": 70746484,
    "satd_sha": "8bd9d4d5edf0a17ef0726166710024c3147def68",
    "satd_text": " Finally reshape to proper output.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      548
    ],
    "matched_text": "            # Finally reshape to proper output."
  },
  {
    "satd_id": 6648761,
    "satd_repo": 70746484,
    "satd_sha": "8bd9d4d5edf0a17ef0726166710024c3147def68",
    "satd_text": " Finally reshape to proper output.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      587
    ],
    "matched_text": "            # Finally reshape to proper output."
  },
  {
    "satd_id": 6648774,
    "satd_repo": 70746484,
    "satd_sha": "52fde8f773a9e13b905c014ed34abf9efc10fbc3",
    "satd_text": " not implemented, this is only for testing.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      180
    ],
    "matched_text": "# not implemented, this is only for testing."
  },
  {
    "satd_id": 6648804,
    "satd_repo": 70746484,
    "satd_sha": "a78adbd53a7ef608cc3821ac0c0424dba3fc687a",
    "satd_text": " Convert the double significand to int significand, i.e., convert into a\n integer where the decimal point is between bit 31 and 30. This is done by\n multiplying the double value with 2^31 and then casting to int.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/qnn/op/requantize.cc",
    "lines": [
      70,
      71,
      72
    ],
    "matched_text": "  // Convert the double significand to int significand, i.e., convert into a"
  },
  {
    "satd_id": 6648850,
    "satd_repo": 70746484,
    "satd_sha": "d14ca52eb70c1ec6d8b592ac09371b6268a9d191",
    "satd_text": " Remove self-loops to avoid duplicate passing of a node's feature to itself",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/build_gcn.py",
    "lines": [
      123
    ],
    "matched_text": "    # Remove self-loops to avoid duplicate passing of a node's feature to itself"
  },
  {
    "satd_id": 6648858,
    "satd_repo": 70746484,
    "satd_sha": "6026e04cb8aa2152249eb4045a0011220507cb32",
    "satd_text": " # Run unit tests in functional/fast simulator\n echo \"Running integration test in tsim...\"\n python3 -m nose -v vta/tests/python/integration",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/scripts/task_python_vta.sh",
    "lines": [
      48,
      49,
      50
    ],
    "matched_text": "# # Run unit tests in functional/fast simulator"
  },
  {
    "satd_id": 6648886,
    "satd_repo": 70746484,
    "satd_sha": "3b287c4d4e6d83e6fd30db47ffa3d5481a332a63",
    "satd_text": " TODO: Add BSR transpose support",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/nn/sparse.py",
    "lines": [
      142
    ],
    "matched_text": "    # TODO: Add BSR transpose support"
  },
  {
    "satd_id": 6648894,
    "satd_repo": 70746484,
    "satd_sha": "c8654e2a2fd5dd58a4acd317a520d2ac83250fea",
    "satd_text": " Please implement one of the following function or there will be infinite loop.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      262
    ],
    "matched_text": "  // Please implement one of the following function or there will be infinite loop."
  },
  {
    "satd_id": 6648895,
    "satd_repo": 70746484,
    "satd_sha": "c8654e2a2fd5dd58a4acd317a520d2ac83250fea",
    "satd_text": "! \\brief A meet-semilattice with finite descending chain.\n * It means that we can meet two element to get an element,\n * and for every element, there is only a finite amount of meet before getting back the same element.\n *\n * Every time we recurse, we do a meet and require that progress must be made.\n * This ensures we do not recurse infinitely in the Partial Evaluator.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      244,
      245,
      246,
      247,
      248,
      249,
      250
    ],
    "matched_text": "/*! \\brief A meet-semilattice with finite descending chain."
  },
  {
    "satd_id": 6648917,
    "satd_repo": 70746484,
    "satd_sha": "33ab3c602874d128d600f9cfa5c23da37a9f1ab2",
    "satd_text": " expression being quantized\n unused argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/quantize/calibrate.cc",
    "lines": [
      59,
      60
    ],
    "matched_text": "      const Expr& quantize_input = new_call->args[0];  // expression being quantized"
  },
  {
    "satd_id": 6648925,
    "satd_repo": 70746484,
    "satd_sha": "5357f49b0ed02e33faa590aa104760ee370a00ec",
    "satd_text": " TODO(wweic): For heterogeneous execution, get device information from byte",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vm/vm.cc",
    "lines": [
      644
    ],
    "matched_text": "  // TODO(wweic): For heterogeneous execution, get device information from byte"
  },
  {
    "satd_id": 6649001,
    "satd_repo": 70746484,
    "satd_sha": "904551213131ab0aca6a68e4592625e49e08c730",
    "satd_text": " The number of dimensions is not needed for constructing an\n `AllocTensor` instruction as it equals to the length of the `shape`\n vector. However, we save it to conveniently deserialize the instruction\n because we will know how many fields are needed by the `shape` argument.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/serializer.cc",
    "lines": [
      247,
      248,
      249,
      250
    ],
    "matched_text": "      // The number of dimensions is not needed for constructing an"
  },
  {
    "satd_id": 6649069,
    "satd_repo": 70746484,
    "satd_sha": "83591aa5a139108976baf3febc7263c6f069ce9c",
    "satd_text": " TODO: The following parameters have not been propagated into\n current Chisel-based implement of VTA hardware for DE10-Nano.\n A future change should be made to propagate these parameters,\n in order to avoid duplicated definition.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/pkg_config.py",
    "lines": [
      115,
      116,
      117,
      118
    ],
    "matched_text": "            # TODO: The following parameters have not been propagated into"
  },
  {
    "satd_id": 6649078,
    "satd_repo": 70746484,
    "satd_sha": "16fefd899a373d4ee7219667903f091eda6b43cb",
    "satd_text": " pylint: disable=invalid-name,arguments-differ,no-else-return,unused-argument,missing-docstring",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/transform.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name,arguments-differ,no-else-return,unused-argument,missing-docstring"
  },
  {
    "satd_id": 6649102,
    "satd_repo": 70746484,
    "satd_sha": "f55609b4a19ed7166d9b4dbbee4acd48af3697ac",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/hw_spec.h",
    "lines": [
      206
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6649102,
    "satd_repo": 70746484,
    "satd_sha": "f55609b4a19ed7166d9b4dbbee4acd48af3697ac",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/hw_spec.h",
    "lines": [
      210
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6649102,
    "satd_repo": 70746484,
    "satd_sha": "f55609b4a19ed7166d9b4dbbee4acd48af3697ac",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/hw_spec.h",
    "lines": [
      232
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6649102,
    "satd_repo": 70746484,
    "satd_sha": "f55609b4a19ed7166d9b4dbbee4acd48af3697ac",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/hw_spec.h",
    "lines": [
      236
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6649150,
    "satd_repo": 70746484,
    "satd_sha": "786c49f36da2368829667c51758fe4b9017dddbd",
    "satd_text": " TODO missing tests: rank",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      2221
    ],
    "matched_text": "    # TODO missing tests: rank"
  },
  {
    "satd_id": 6649157,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": " pylint: enable=bad-whitespace,line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      130
    ],
    "matched_text": "    ] # pylint: enable=bad-whitespace,line-too-long"
  },
  {
    "satd_id": 6649161,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": "01 {E=4.63E-08 on conv2d  [1]}",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      98
    ],
    "matched_text": "        #01 {E=4.63E-08 on conv2d  [1]}"
  },
  {
    "satd_id": 6649162,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": "02 {E=7.65E-08 on F( 2,3) [1]}",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      100
    ],
    "matched_text": "        #02 {E=7.65E-08 on F( 2,3) [1]}"
  },
  {
    "satd_id": 6649165,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": " pylint: disable=bad-whitespace,line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      94
    ],
    "matched_text": "    # pylint: disable=bad-whitespace,line-too-long"
  },
  {
    "satd_id": 6649174,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": "07 {E=3.71E-06 on F( 7,3) [1]}",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      110
    ],
    "matched_text": "        #07 {E=3.71E-06 on F( 7,3) [1]}"
  },
  {
    "satd_id": 6649176,
    "satd_repo": 70746484,
    "satd_sha": "97e333cac8313075e7f7067d2d078782e793e0cc",
    "satd_text": "08 {E=7.35E-06 on F( 8,3) [1]}",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/winograd_util.py",
    "lines": [
      112
    ],
    "matched_text": "        #08 {E=7.35E-06 on F( 8,3) [1]}"
  },
  {
    "satd_id": 6649180,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): There should be a better way to configure this for different archs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/binutil.py",
    "lines": [
      114
    ],
    "matched_text": "    # TODO(weberlo): There should be a better way to configure this for different archs."
  },
  {
    "satd_id": 6649183,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Generate the script in a more procedural manner.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/contrib/binutil.py",
    "lines": [
      117
    ],
    "matched_text": "    # TODO(weberlo): Generate the script in a more procedural manner."
  },
  {
    "satd_id": 6649184,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Refactor this method and `*relocate_binary` so they are\n both aware of [\".bss\", \".sbss\", \".sdata\"] being relocated to \".bss\".",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/binutil.py",
    "lines": [
      59,
      60
    ],
    "matched_text": "    # TODO(weberlo): Refactor this method and `*relocate_binary` so they are"
  },
  {
    "satd_id": 6649185,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " Skip the first two header lines in the `size` output.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/binutil.py",
    "lines": [
      69
    ],
    "matched_text": "    # Skip the first two header lines in the `size` output."
  },
  {
    "satd_id": 6649188,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Add 32-bit support.\n It's primarily the compilation pipeline that isn't compatible.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/micro/base.py",
    "lines": [
      81,
      82
    ],
    "matched_text": "        # TODO(weberlo): Add 32-bit support."
  },
  {
    "satd_id": 6649190,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " Only add this option if the host is a 64-bit Linux.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/micro/base.py",
    "lines": [
      185
    ],
    "matched_text": "        # Only add this option if the host is a 64-bit Linux."
  },
  {
    "satd_id": 6649227,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Set permissions per section (e.g., read-write perms for\n the heap, execute perms for text, etc.).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/host_low_level_device.cc",
    "lines": [
      46,
      47
    ],
    "matched_text": "    // TODO(weberlo): Set permissions per section (e.g., read-write perms for"
  },
  {
    "satd_id": 6649247,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): should this be here?",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_common.h",
    "lines": [
      243
    ],
    "matched_text": "// TODO(weberlo): should this be here?"
  },
  {
    "satd_id": 6649339,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): make device type enum",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      96
    ],
    "matched_text": "  // TODO(weberlo): make device type enum"
  },
  {
    "satd_id": 6649348,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Implement `double` and `int64` case.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/micro_session.cc",
    "lines": [
      182
    ],
    "matched_text": "      // TODO(weberlo): Implement `double` and `int64` case."
  },
  {
    "satd_id": 6649413,
    "satd_repo": 70746484,
    "satd_sha": "ef909df1ee2d6b16f5404c1cc409bb95c7342ac7",
    "satd_text": " TODO(weberlo): Handle endianness.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/micro/target_data_layout_encoder.h",
    "lines": [
      34
    ],
    "matched_text": "// TODO(weberlo): Handle endianness."
  },
  {
    "satd_id": 6649490,
    "satd_repo": 70746484,
    "satd_sha": "9b1c2e088b952ab88fceca913658b6adb01e81d2",
    "satd_text": " TODO(tulloch) use parameterised tests when available.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/cpp/threading_backend_test.cc",
    "lines": [
      46
    ],
    "matched_text": "  // TODO(tulloch) use parameterised tests when available."
  },
  {
    "satd_id": 6649493,
    "satd_repo": 70746484,
    "satd_sha": "9b1c2e088b952ab88fceca913658b6adb01e81d2",
    "satd_text": " Initialize the spin count (from envvar TVM_THREAD_POOL_SPIN_COUNT) on\n the global first use of the ThreadPool.\n TODO(tulloch): should we make this configurable via standard APIs?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/thread_pool.cc",
    "lines": [
      351,
      352,
      353
    ],
    "matched_text": "    // Initialize the spin count (from envvar TVM_THREAD_POOL_SPIN_COUNT) on"
  },
  {
    "satd_id": 6649509,
    "satd_repo": 70746484,
    "satd_sha": "9d64d321435d9149058b151644b51425d183a9e2",
    "satd_text": " Iterate over caches; allocate buffer in FPGA-readable memory",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/runtime.cc",
    "lines": [
      453
    ],
    "matched_text": "    // Iterate over caches; allocate buffer in FPGA-readable memory"
  },
  {
    "satd_id": 6649556,
    "satd_repo": 70746484,
    "satd_sha": "2973f8a63f9039b0898ae77556cab0f590f518b6",
    "satd_text": " todo(@M.K.) this is unsafe. fix.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.h",
    "lines": [
      123
    ],
    "matched_text": "    // todo(@M.K.) this is unsafe. fix."
  },
  {
    "satd_id": 6649577,
    "satd_repo": 70746484,
    "satd_sha": "54f903a526d59e6701f5dc9a553f834ef45bc2ba",
    "satd_text": " fused never spans multiple rows, make a tight bounding box\n there may be other cases when bounding box could be tightened",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/message_passing.cc",
    "lines": [
      279,
      280
    ],
    "matched_text": "      // fused never spans multiple rows, make a tight bounding box"
  },
  {
    "satd_id": 6649584,
    "satd_repo": 70746484,
    "satd_sha": "b6dc78260f113c42ec5773b60db538ee97ac164e",
    "satd_text": " TODO(icemelon9): Add closure object",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/backend/vmobj.py",
    "lines": [
      93
    ],
    "matched_text": "# TODO(icemelon9): Add closure object"
  },
  {
    "satd_id": 6649585,
    "satd_repo": 70746484,
    "satd_sha": "b6dc78260f113c42ec5773b60db538ee97ac164e",
    "satd_text": " TODO(@icemelon9): Add ClosureObject",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/backend/vmobj.py",
    "lines": [
      25
    ],
    "matched_text": "# TODO(@icemelon9): Add ClosureObject"
  },
  {
    "satd_id": 6649600,
    "satd_repo": 70746484,
    "satd_sha": "b6dc78260f113c42ec5773b60db538ee97ac164e",
    "satd_text": " TODO(@icemelon9): check number of targets and build config, add more optimization pass",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      758
    ],
    "matched_text": "    // TODO(@icemelon9): check number of targets and build config, add more optimization pass"
  },
  {
    "satd_id": 6649601,
    "satd_repo": 70746484,
    "satd_sha": "b6dc78260f113c42ec5773b60db538ee97ac164e",
    "satd_text": " TODO(@icemelon9): support heterogeneous targets",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      785
    ],
    "matched_text": "    // TODO(@icemelon9): support heterogeneous targets"
  },
  {
    "satd_id": 6649617,
    "satd_repo": 70746484,
    "satd_sha": "9fad94cc21419227ea78f1cf15163ef37d82a39e",
    "satd_text": " We assume that the value of the argument cannot be out of bounds (otherwise it is\n undefined behaviour), so we can intersect the estimated set of the argument with the\n range expected by the tensor. However, intersection may result in overly complex\n expressions, so we perform a more relaxed form of intersection.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/compute_op.cc",
    "lines": [
      224,
      225,
      226,
      227
    ],
    "matched_text": "          // We assume that the value of the argument cannot be out of bounds (otherwise it is"
  },
  {
    "satd_id": 6649618,
    "satd_repo": 70746484,
    "satd_sha": "9fad94cc21419227ea78f1cf15163ef37d82a39e",
    "satd_text": " These are hard to simplify, moreover we don't simplify them",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_schedule_bound_inference.py",
    "lines": [
      322
    ],
    "matched_text": "    # These are hard to simplify, moreover we don't simplify them"
  },
  {
    "satd_id": 6649635,
    "satd_repo": 70746484,
    "satd_sha": "75892d2be8914121b73f891ca0dc0e9cf264edc6",
    "satd_text": " Simplify the offset constant if necessary.\n floormod(x - 5, 3) => floormod(x + 1, 3)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      992,
      993
    ],
    "matched_text": "      // Simplify the offset constant if necessary."
  },
  {
    "satd_id": 6649650,
    "satd_repo": 70746484,
    "satd_sha": "75892d2be8914121b73f891ca0dc0e9cf264edc6",
    "satd_text": " we gained a new upper factor that is smaller\n than the original one\n Perhaps there are more chances in simplifying the index\n Do a recursive call to simplify the mod with the new factor.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      854,
      855,
      856,
      857
    ],
    "matched_text": "      // we gained a new upper factor that is smaller"
  },
  {
    "satd_id": 6649680,
    "satd_repo": 70746484,
    "satd_sha": "75892d2be8914121b73f891ca0dc0e9cf264edc6",
    "satd_text": " cannot simplify mixed case, unless we canonicalize into one mode.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_canonical_simplify.py",
    "lines": [
      87
    ],
    "matched_text": "    # cannot simplify mixed case, unless we canonicalize into one mode."
  },
  {
    "satd_id": 6649726,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": " for code reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/container.h",
    "lines": [
      515
    ],
    "matched_text": "  // for code reuse"
  },
  {
    "satd_id": 6649767,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": "! \\brief helper macro to generate string concat ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/ir_functor.h",
    "lines": [
      151
    ],
    "matched_text": "/*! \\brief helper macro to generate string concat */"
  },
  {
    "satd_id": 6649772,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": "!\n* \\brief Macro to set IRFunctor dispatch in a global static field using an IRFunctorStaticRegistry.\n* Usage is exactly the same as TVM_STATIC_IR_FUNCTOR. Libraries should use this instead of\n* TVM_STATIC_IR_FUNCTOR.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/ir_functor.h",
    "lines": [
      272,
      273,
      274,
      275
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6649827,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": " TODO(tqchen):\n Think of re-organize and consolidate with object.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/node/node.cc",
    "lines": [
      29,
      30
    ],
    "matched_text": "// TODO(tqchen):"
  },
  {
    "satd_id": 6649829,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": " this is slow, usually caller always hold the result in a static variable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/node/node.cc",
    "lines": [
      55
    ],
    "matched_text": "// this is slow, usually caller always hold the result in a static variable."
  },
  {
    "satd_id": 6649857,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": "! \\brief The indentation level. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr.h",
    "lines": [
      478
    ],
    "matched_text": "  /*! \\brief The indentation level. */"
  },
  {
    "satd_id": 6649898,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": "! \\brief Unroll annotation. ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/ir.h",
    "lines": [
      1076
    ],
    "matched_text": "  /*! \\brief Unroll annotation. */"
  },
  {
    "satd_id": 6649910,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": "!\n * \\brief Evaluates an expression.\n *  This is mostly used for putting a Call node into Stmt.\n *\n *  If value do not have side-effect, this node can be safely removed.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      1047,
      1048,
      1049,
      1050,
      1051,
      1052
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6649939,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": " TODO(tvm-team): consider consolidate with AttrStmt.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      791
    ],
    "matched_text": "// TODO(tvm-team): consider consolidate with AttrStmt."
  },
  {
    "satd_id": 6649949,
    "satd_repo": 70746484,
    "satd_sha": "0218557c233b9c8e064e70da0717f2950eb91a68",
    "satd_text": " Call node, represent a function call or a multi-dimensional array load.\n\n TODO(tvm-team):\n Refactor call with more explicit property registrations.\n rather than calling a string symbol.\n We should move most information into function itself and remove name.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      460,
      461,
      462,
      463,
      464,
      465
    ],
    "matched_text": "// Call node, represent a function call or a multi-dimensional array load."
  },
  {
    "satd_id": 6650027,
    "satd_repo": 70746484,
    "satd_sha": "3fb84e2b44e148db000b77a4549f92232812b029",
    "satd_text": " TODO(@jroesch): we need to come back to this",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/type_relations.cc",
    "lines": [
      91
    ],
    "matched_text": "      // TODO(@jroesch): we need to come back to this"
  },
  {
    "satd_id": 6650054,
    "satd_repo": 70746484,
    "satd_sha": "db841c24ddc95e05ca021f2ddd4c94c258dcc0b9",
    "satd_text": " To properly account for scoping and ensure that the entire node produces an expression,\n we translate the let binding as a function that we call with the value we intend to bind.\n Yes, this is somewhat ugly.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/py_converter.py",
    "lines": [
      407,
      408,
      409
    ],
    "matched_text": "        # To properly account for scoping and ensure that the entire node produces an expression,"
  },
  {
    "satd_id": 6650058,
    "satd_repo": 70746484,
    "satd_sha": "db841c24ddc95e05ca021f2ddd4c94c258dcc0b9",
    "satd_text": " special case: if the value is a function literal, we must ensure it can be\n recursive by naming it after the var",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/py_converter.py",
    "lines": [
      425,
      426
    ],
    "matched_text": "        # special case: if the value is a function literal, we must ensure it can be"
  },
  {
    "satd_id": 6650074,
    "satd_repo": 70746484,
    "satd_sha": "db841c24ddc95e05ca021f2ddd4c94c258dcc0b9",
    "satd_text": " ensure we can generate code for batch_norm, since it requires simplify_inference\n adapted from test_batchnorm in nnvm's test_top_level1",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_py_converter.py",
    "lines": [
      531,
      532
    ],
    "matched_text": "# ensure we can generate code for batch_norm, since it requires simplify_inference"
  },
  {
    "satd_id": 6650164,
    "satd_repo": 70746484,
    "satd_sha": "f9788871d3e2cfde3c21997d104da03ea2d950ce",
    "satd_text": " TODO cfg is not used for now",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_transpose.py",
    "lines": [
      27
    ],
    "matched_text": "    # TODO cfg is not used for now"
  },
  {
    "satd_id": 6650186,
    "satd_repo": 70746484,
    "satd_sha": "d1eb1229f6da900b8bd0a8bdafc839106cf243f9",
    "satd_text": " TODO(@M.K.): make alphaequal work on free term\n CHECK(AlphaEqual(cont_type, Arrow(new_ret_type, answer_type)));",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/to_cps.cc",
    "lines": [
      342,
      343
    ],
    "matched_text": "  // TODO(@M.K.): make alphaequal work on free term"
  },
  {
    "satd_id": 6650187,
    "satd_repo": 70746484,
    "satd_sha": "d1eb1229f6da900b8bd0a8bdafc839106cf243f9",
    "satd_text": "\n * The meta continuation.\n * There is 3 rules on the metacontinuation:\n * 0: It can only use the argument once.\n *    The argument is code, and using it twice will duplicate code.\n *    Bound the argument via let instead.\n * 1: If the size of the metacontinuation is unbounded, it can only be called once.\n *    It contain code, so calling it twice duplicate code.\n *    Reify the continuation and bound it instead.\n *    See the function 'reify' and the if case for more detail.\n * 2: The argument must be effect free.\n *    It might reorder or drop the argument.\n *    Again, bound the argument via let instead.\n *    See the call case for more detail.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/to_cps.cc",
    "lines": [
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112
    ],
    "matched_text": "/*"
  },
  {
    "satd_id": 6650199,
    "satd_repo": 70746484,
    "satd_sha": "d1eb1229f6da900b8bd0a8bdafc839106cf243f9",
    "satd_text": "!\n * \\brief Turn an expression into continuation passing style(CPS).\n *\n * CPS mean that every function will, instead of returning the result directly,\n * be passed down an extra function (called the continuation) as argument,\n * and pass the result to the continuation instead.\n *\n * Thus, every function call has to be passed an extra argument\n * that represent the rest of the computation (Hence the name of continuation).\n *\n * Similarly, all other compute will be wrapped and call the continuation as well.\n *\n * \\return the pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650200,
    "satd_repo": 70746484,
    "satd_sha": "d1eb1229f6da900b8bd0a8bdafc839106cf243f9",
    "satd_text": "!\n * \\brief Turn an expression into continuation passing style(CPS).\n *\n * CPS mean that every function will, instead of returning the result directly,\n * be passed down an extra function (called the continuation) as argument,\n * and pass the result to the continuation instead.\n *\n * Thus, every function call has to be passed an extra argument\n * that represent the rest of the computation (Hence the name of continuation).\n *\n * Similarly, all other compute will be wrapped and call the continuation as well.\n *\n * \\param f the function.\n * \\param mod the module.\n *\n * \\return the converted Function.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      616,
      617,
      618,
      619,
      620,
      621,
      622,
      623,
      624,
      625,
      626,
      627,
      628,
      629,
      630,
      631,
      632
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650217,
    "satd_repo": 70746484,
    "satd_sha": "e3d6074a5b204940a7dcb0f50dbf679c7dc072f3",
    "satd_text": "!\n * \\brief Infer the type of a function as if it is mapped to var in the mod.\n *\n * \\param f the function.\n * \\param mod The module used for referencing global functions.\n * \\param var The global variable corresponding to the function.\n *\n * \\return A type checked Function with its checked_type field populated.\n * \\note this function mutates mod and is not thread-safe.\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/relay/analysis.h",
    "lines": [
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650217,
    "satd_repo": 70746484,
    "satd_sha": "e3d6074a5b204940a7dcb0f50dbf679c7dc072f3",
    "satd_text": "!\n * \\brief Infer the type of a function as if it is mapped to var in the mod.\n *\n * \\param f the function.\n * \\param mod The module used for referencing global functions.\n * \\param var The global variable corresponding to the function.\n *\n * \\return A type checked Function with its checked_type field populated.\n * \\note this function mutates mod and is not thread-safe.\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      541,
      542,
      543,
      544,
      545,
      546,
      547,
      548,
      549,
      550
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650222,
    "satd_repo": 70746484,
    "satd_sha": "4273e461f2a3bb4ea6f82e90ac025d2bd04712de",
    "satd_text": " NOTE: this is a bit sutble hack.\n\n condition:\n - x * operand <= result\n - operand > 0\n - x >= 0\n\n Then it is fine to deduce that x <= result / operand.\n - if result > 0,  this division round down\n - if result < 0, (result / operand) rounds up and may violate the constraint\n   however, given that x is always non-negative,\n   it is fine to have this relaxed bound, given that the user of deduce bound\n   will respect the bound of x\n\n TODO(tvm-team): think about a better API to incorporate constraint of x.\n                 e.g. specify an interval of x and return a bound\n                 that is in the interval and satisfies the condition.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/bound_deducer.cc",
    "lines": [
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178
    ],
    "matched_text": "        // NOTE: this is a bit sutble hack."
  },
  {
    "satd_id": 6650232,
    "satd_repo": 70746484,
    "satd_sha": "79e071c94c0cebd881336a00d792e346ccbe3b25",
    "satd_text": "!\n   * \\brief Simplify expr.\n   *\n   * \\param expr The expression to be simplified.\n   * \\return The result.\n   *\n   * \\note Analyzer will call into sub-analyzers to get the result.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arithmetic.h",
    "lines": [
      528,
      529,
      530,
      531,
      532,
      533,
      534,
      535
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6650238,
    "satd_repo": 70746484,
    "satd_sha": "e6da0f0b5a1528417e02d8865fcbd0cf735e8eee",
    "satd_text": " eliminate useless stores",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/stmt_simplify.cc",
    "lines": [
      109
    ],
    "matched_text": "  // eliminate useless stores"
  },
  {
    "satd_id": 6650246,
    "satd_repo": 70746484,
    "satd_sha": "75c29c6a1e16683c2660e362c769c311d54a22d6",
    "satd_text": " Bind bound information of variables to make analyzer more effective\n TODO(tqchen): consider a pass to inline the bound info into the expr\n so analysis can be context independent.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/lower_warp_memory.cc",
    "lines": [
      298,
      299,
      300
    ],
    "matched_text": "// Bind bound information of variables to make analyzer more effective"
  },
  {
    "satd_id": 6650259,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " todo: check anf.body has no more stop_name beside that one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/graphpack.py",
    "lines": [
      258
    ],
    "matched_text": "                # todo: check anf.body has no more stop_name beside that one"
  },
  {
    "satd_id": 6650285,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " apply tiling for SRAM reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/vta_dense.py",
    "lines": [
      134
    ],
    "matched_text": "    # apply tiling for SRAM reuse"
  },
  {
    "satd_id": 6650351,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " FIXME: we need a custom clip operator to circumvent a pattern detection limitation",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/integration/test_benchmark_topi_conv2d.py",
    "lines": [
      58
    ],
    "matched_text": "# FIXME: we need a custom clip operator to circumvent a pattern detection limitation"
  },
  {
    "satd_id": 6650351,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " FIXME: we need a custom clip operator to circumvent a pattern detection limitation",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/integration/test_benchmark_topi_dense.py",
    "lines": [
      37
    ],
    "matched_text": "# FIXME: we need a custom clip operator to circumvent a pattern detection limitation"
  },
  {
    "satd_id": 6650367,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      242
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6650375,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Comment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      361,
      362
    ],
    "matched_text": "    # We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6650380,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below.\n It takes about 2 hours on a 16T CPU, and 6 Pynq boards.\n\n .. code-block:: bash\n\n    Extract tasks...\n    [Warning] Invalid shape during AutoTVM task creation\n    Extracted 10 conv2d tasks:\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (32, 16, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (32, 16, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (16, 8, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (16, 8, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (8, 4, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (8, 4, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (4, 4, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (4, 4, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (8, 8, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (8, 8, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (8, 4, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (8, 4, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (16, 16, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (16, 16, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (16, 8, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (16, 8, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 32, 7, 7, 1, 16), 'int8'), ('TENSOR', (32, 32, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 32, 7, 7, 1, 16, 'int8'), (32, 32, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n        Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (32, 16, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (32, 16, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Tuning...\n    [Task  1/10]  Current/Best:    0.72/  23.24 GFLOPS | Progress: (480/1000) | 640.31 s Done.\n    [Task  2/10]  Current/Best:    0.00/  27.69 GFLOPS | Progress: (576/1000) | 810.09 s Done.\n    [Task  3/10]  Current/Best:    0.00/  22.97 GFLOPS | Progress: (1000/1000) | 1125.37 s Done.\n    [Task  4/10]  Current/Best:    0.00/  31.26 GFLOPS | Progress: (1000/1000) | 1025.52 s Done.\n    [Task  5/10]  Current/Best:    0.00/  15.15 GFLOPS | Progress: (1000/1000) | 1236.58 s Done.\n    [Task  6/10]  Current/Best:    0.00/  22.74 GFLOPS | Progress: (1000/1000) | 906.60 s Done.\n    [Task  7/10]  Current/Best:    0.00/  15.27 GFLOPS | Progress: (1000/1000) | 1056.25 s Done.\n    [Task  8/10]  Current/Best:    0.00/   2.18 GFLOPS | Progress: (1000/1000) | 2275.29 s Done.\n    [Task  9/10]  Current/Best:    2.23/   3.99 GFLOPS | Progress: (1000/1000) | 2527.25 s Done.\n    [Task 10/10]  Current/Best:    1.56/   6.32 GFLOPS | Progress: (480/1000) | 1304.84 s Done.\n    Compile...\n    Upload...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 621.79 ms (0.14 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6650387,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467,
      468
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6650394,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " Reconfigure the JIT runtime and FPGA.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/scripts/tune_resnet.py",
    "lines": [
      219
    ],
    "matched_text": "        # Reconfigure the JIT runtime and FPGA."
  },
  {
    "satd_id": 6650394,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " Reconfigure the JIT runtime and FPGA.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/autotvm/tune_relay_vta.py",
    "lines": [
      336
    ],
    "matched_text": "        # Reconfigure the JIT runtime and FPGA."
  },
  {
    "satd_id": 6650394,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " Reconfigure the JIT runtime and FPGA.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/frontend/deploy_resnet_on_vta.py",
    "lines": [
      109
    ],
    "matched_text": "    # Reconfigure the JIT runtime and FPGA."
  },
  {
    "satd_id": 6650449,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " TODO(moreau89) find a more elegant way to build for VTAs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/relay_integration.py",
    "lines": [
      34
    ],
    "matched_text": "# TODO(moreau89) find a more elegant way to build for VTAs"
  },
  {
    "satd_id": 6650455,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " TODO(tmoreau89,ziheng) need to include an option to turn off dense quant\n @register_annotate_function(\"nn.dense\")",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_annotate.py",
    "lines": [
      194,
      195
    ],
    "matched_text": "# TODO(tmoreau89,ziheng) need to include an option to turn off dense quant"
  },
  {
    "satd_id": 6650456,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": "pylint: disable=unused-argument,inconsistent-return-statements",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_annotate.py",
    "lines": [
      17
    ],
    "matched_text": "#pylint: disable=unused-argument,inconsistent-return-statements"
  },
  {
    "satd_id": 6650458,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " TODO(tmoreau89, ZihengJiang) the skip parameters are\n hacky - we should explore a more future-proof way to\n skip operators based on pattern matching",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      127,
      128,
      129
    ],
    "matched_text": "# TODO(tmoreau89, ZihengJiang) the skip parameters are"
  },
  {
    "satd_id": 6650465,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/build_module.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650465,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/graphpack.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650465,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/nnvm_bitpack.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650465,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/op.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument, ungrouped-imports"
  },
  {
    "satd_id": 6650465,
    "satd_repo": 70746484,
    "satd_sha": "3818b2a250543afad6d028d42dcd88033d4a7669",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/top/vta_dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650531,
    "satd_repo": 70746484,
    "satd_sha": "f2406eaeb26263c8a5cfa40a498e42fe90677a12",
    "satd_text": " remove all functions to not have pattern match to pass vm compilation\n TODO(wweic): remove the hack and implement pattern match",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      205,
      206
    ],
    "matched_text": "    # remove all functions to not have pattern match to pass vm compilation"
  },
  {
    "satd_id": 6650531,
    "satd_repo": 70746484,
    "satd_sha": "f2406eaeb26263c8a5cfa40a498e42fe90677a12",
    "satd_text": " remove all functions to not have pattern match to pass vm compilation\n TODO(wweic): remove the hack and implement pattern match",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      259,
      260
    ],
    "matched_text": "    # remove all functions to not have pattern match to pass vm compilation"
  },
  {
    "satd_id": 6650537,
    "satd_repo": 70746484,
    "satd_sha": "e9634eadddb177b56209aae1509599b478900d98",
    "satd_text": " TODO(jdavies-huawei): what name should be used here?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensor_compute_op.cc",
    "lines": [
      199
    ],
    "matched_text": "  // TODO(jdavies-huawei): what name should be used here?"
  },
  {
    "satd_id": 6650547,
    "satd_repo": 70746484,
    "satd_sha": "563978264b654b0bdfd516393792d044522e9706",
    "satd_text": " TODO(@jroesch): use shape_of once it has been fixed)\n We should convert scalar integers to int32, to normalize.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6650548,
    "satd_repo": 70746484,
    "satd_sha": "563978264b654b0bdfd516393792d044522e9706",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_squeezenet():\n     # Torch's ONNX export does not support the max pooling used by Squezenet\n     check_torch_conversion(torchvision.models.squeezenet1_0, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1100,
      1101,
      1102,
      1103
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650551,
    "satd_repo": 70746484,
    "satd_sha": "563978264b654b0bdfd516393792d044522e9706",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_shufflenetv2():\n     check_torch_conversion(torchvision.models.shufflenetv2, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1115,
      1116,
      1117
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650554,
    "satd_repo": 70746484,
    "satd_sha": "563978264b654b0bdfd516393792d044522e9706",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_googlenet():\n     check_torch_conversion(torchvision.models.googlenet, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1111,
      1112,
      1113
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650555,
    "satd_repo": 70746484,
    "satd_sha": "1119c40b3668d5fc916bb53314f767aae1e9c0c0",
    "satd_text": " Try to infer shape by precompute prune if possible.\n TODO: good to check inputs to be in params.\n       to be enhanced when relay support list_input_names API of NNVM",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      412,
      413,
      414
    ],
    "matched_text": "            # Try to infer shape by precompute prune if possible."
  },
  {
    "satd_id": 6650556,
    "satd_repo": 70746484,
    "satd_sha": "df6957a5ea49806b3073bbb81e339ae379cbbb1c",
    "satd_text": " TODO(@jroesch): use shape_of once it has been fixed\n We should convert scalar integers to int32, to normalize.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6650557,
    "satd_repo": 70746484,
    "satd_sha": "df6957a5ea49806b3073bbb81e339ae379cbbb1c",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_squeezenet():\n     # Torch's ONNX export does not support the max pooling used by Squezenet\n     check_torch_conversion(torchvision.models.squeezenet1_0, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1099,
      1100,
      1101,
      1102
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650560,
    "satd_repo": 70746484,
    "satd_sha": "df6957a5ea49806b3073bbb81e339ae379cbbb1c",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_shufflenetv2():\n     check_torch_conversion(torchvision.models.shufflenetv2, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1114,
      1115,
      1116
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650563,
    "satd_repo": 70746484,
    "satd_sha": "df6957a5ea49806b3073bbb81e339ae379cbbb1c",
    "satd_text": " TODO(@jroesch): Update Torch + ONNX to support this import.\n def test_googlenet():\n     check_torch_conversion(torchvision.models.googlenet, (1,3,224,224))",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/onnx/test_forward.py",
    "lines": [
      1110,
      1111,
      1112
    ],
    "matched_text": "# TODO(@jroesch): Update Torch + ONNX to support this import."
  },
  {
    "satd_id": 6650569,
    "satd_repo": 70746484,
    "satd_sha": "04e816241fdc8c38674277d3fd6dbb086f72fc3e",
    "satd_text": "!\n * Copyright (c) 2019 by Contributors\n * \\file canonicalize_cast.cc\n * \\brief Canonicalize cast expressions to make operator fusion more efficient.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/canonicalize_cast.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650571,
    "satd_repo": 70746484,
    "satd_sha": "04e816241fdc8c38674277d3fd6dbb086f72fc3e",
    "satd_text": "!\n * \\brief Canonicalize cast expressions to make operator fusion more efficient.\n *\n * \\return The pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      537,
      538,
      539,
      540,
      541
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650572,
    "satd_repo": 70746484,
    "satd_sha": "fa351045e6a0fd2f4ab57506e4899e525b3c7cef",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/darknet.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650572,
    "satd_repo": 70746484,
    "satd_sha": "fa351045e6a0fd2f4ab57506e4899e525b3c7cef",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/keras.py",
    "lines": [
      569
    ],
    "matched_text": "def _default_skip(inexpr, keras_layer, _): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650572,
    "satd_repo": 70746484,
    "satd_sha": "fa351045e6a0fd2f4ab57506e4899e525b3c7cef",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      211
    ],
    "matched_text": "def _mx_BlockGrad(inputs, attrs): #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650572,
    "satd_repo": 70746484,
    "satd_sha": "fa351045e6a0fd2f4ab57506e4899e525b3c7cef",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      997
    ],
    "matched_text": "    #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6650581,
    "satd_repo": 70746484,
    "satd_sha": "df88c411f5569f6a6ca1950b0ab870aadb1cb25f",
    "satd_text": "! Termination checking is done as follows:\n   *  We have finitely many FunctionIds.\n   *  Each FunctionId maps to a class of semantically equivalent function (ignoring type),\n   *  as both TypeSubst and DeDup create semantically equivalent function.\n   *  We partially map each FunctionId to a std::vector<Time>,\n   *  denoting the minimal TimeFrame of each argument of the function.\n   *  Every time we try to inline a Function,\n   *  we make sure it either does not have a vector<Time>, which means this is the initial call,\n   *  or some argument has a lesser time, which means some earlier argument is passed in.\n   *  In any case, we remap the mapping to a minimal vector<Time> across all previous invocations\n   *  when we PE inside the Function body.\n   *  Termination is guaranteed because the creation time of at least one argument will decrease every call.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      943,
      944,
      945,
      946,
      947,
      948,
      949,
      950,
      951,
      952,
      953,
      954,
      955
    ],
    "matched_text": "  /*! Termination checking is done as follows:"
  },
  {
    "satd_id": 6650584,
    "satd_repo": 70746484,
    "satd_sha": "df88c411f5569f6a6ca1950b0ab870aadb1cb25f",
    "satd_text": " TODO(@M.K.): we seems to reduce landin knot into letrec.\n restore letrec support across whole relay.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      701,
      702
    ],
    "matched_text": "    // TODO(@M.K.): we seems to reduce landin knot into letrec."
  },
  {
    "satd_id": 6650585,
    "satd_repo": 70746484,
    "satd_sha": "df88c411f5569f6a6ca1950b0ab870aadb1cb25f",
    "satd_text": " TODO(@M.K.): refactor using tuple pattern (not yet implemented)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_pass_partial_eval.py",
    "lines": [
      204
    ],
    "matched_text": "    # TODO(@M.K.): refactor using tuple pattern (not yet implemented)"
  },
  {
    "satd_id": 6650643,
    "satd_repo": 70746484,
    "satd_sha": "153417a5e0bc7a99a79332f59e0c253a3f74dedc",
    "satd_text": " Quickly adapt to IntSet interface\n TODO(tqchen): revisit IntSet interface as well.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/int_set.cc",
    "lines": [
      475,
      476
    ],
    "matched_text": "// Quickly adapt to IntSet interface"
  },
  {
    "satd_id": 6650648,
    "satd_repo": 70746484,
    "satd_sha": "153417a5e0bc7a99a79332f59e0c253a3f74dedc",
    "satd_text": " Simplified version of int set evaluator that operates on IntervalSet\n We might use better set analysis in the future to replace the intervalset.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/int_set.cc",
    "lines": [
      292,
      293
    ],
    "matched_text": "// Simplified version of int set evaluator that operates on IntervalSet"
  },
  {
    "satd_id": 6650649,
    "satd_repo": 70746484,
    "satd_sha": "153417a5e0bc7a99a79332f59e0c253a3f74dedc",
    "satd_text": " We need to add more bound constraints throughout the code.\n The logic below assumes a is non-negative, which usually\n is the case of our application.\n TODO(tqchen): add bound constraints for a.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/int_set.cc",
    "lines": [
      240,
      241,
      242,
      243
    ],
    "matched_text": "    // We need to add more bound constraints throughout the code."
  },
  {
    "satd_id": 6650671,
    "satd_repo": 70746484,
    "satd_sha": "a698ad7f4ccb0c8096d0d9a445be084c49f5ea99",
    "satd_text": " pattern matches\n pattern conflicts\n ambiguous: candidate needs more constructors specified",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/match_exhaustion.cc",
    "lines": [
      43,
      44,
      45
    ],
    "matched_text": "  kMatch = 0,        // pattern matches"
  },
  {
    "satd_id": 6650712,
    "satd_repo": 70746484,
    "satd_sha": "713fc73bda7df5100f915f29b745076f90bdbed8",
    "satd_text": " TODO(wweic): Support Load GlobalVar into a register",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      282
    ],
    "matched_text": "    // TODO(wweic): Support Load GlobalVar into a register"
  },
  {
    "satd_id": 6650713,
    "satd_repo": 70746484,
    "satd_sha": "713fc73bda7df5100f915f29b745076f90bdbed8",
    "satd_text": " remove all functions to not have pattern match to pass vm compilation\n TODO(wweic): remove the hack and implement pattern match",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      205,
      206
    ],
    "matched_text": "    # remove all functions to not have pattern match to pass vm compilation"
  },
  {
    "satd_id": 6650723,
    "satd_repo": 70746484,
    "satd_sha": "d4ca627a5a5df88f477bd6cc89ee2e3e06931c29",
    "satd_text": " Test cases for legacy code, will be deprecated in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/scripts/task_python_legacy.sh",
    "lines": [
      19
    ],
    "matched_text": "# Test cases for legacy code, will be deprecated in the future."
  },
  {
    "satd_id": 6650821,
    "satd_repo": 70746484,
    "satd_sha": "70041c4888015060388cfc35648b24cab70e28cc",
    "satd_text": " Eliminate dead code for each function after inlining.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/inline_primitives.cc",
    "lines": [
      142
    ],
    "matched_text": "  // Eliminate dead code for each function after inlining."
  },
  {
    "satd_id": 6650860,
    "satd_repo": 70746484,
    "satd_sha": "770ac84e74a5d0cb174c1a5402f0752a5a8fbecb",
    "satd_text": " TODO non-empty outer requires BatchMatMul (BatchMatMulV2 for some cases?) support",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      592
    ],
    "matched_text": "    # TODO non-empty outer requires BatchMatMul (BatchMatMulV2 for some cases?) support"
  },
  {
    "satd_id": 6650861,
    "satd_repo": 70746484,
    "satd_sha": "770ac84e74a5d0cb174c1a5402f0752a5a8fbecb",
    "satd_text": " TODO missing tests: rank, range",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1805
    ],
    "matched_text": "    # TODO missing tests: rank, range"
  },
  {
    "satd_id": 6650866,
    "satd_repo": 70746484,
    "satd_sha": "165aa0dbbd3eca74155c01ce7b80695842af3005",
    "satd_text": " The monomial coefficients of the numerator polynomial (odd).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/include/topi/elemwise.h",
    "lines": [
      70
    ],
    "matched_text": "  // The monomial coefficients of the numerator polynomial (odd)."
  },
  {
    "satd_id": 6650898,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": " Let expression and varaible a should be dead-code eliminated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/cpp/relay_transform_sequential.cc",
    "lines": [
      54
    ],
    "matched_text": "  // Let expression and varaible a should be dead-code eliminated."
  },
  {
    "satd_id": 6650913,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": "!\n * \\brief Canonicalize some operators to the simplified operators. For example,\n * bias_add can be canonicalized to expand_dims and broadcast_add.\n *\n * \\return The pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      518,
      519,
      520,
      521,
      522,
      523
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6650915,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": "!\n                                Function(Function, Module, PassContext)>& pass_func,\n/*!\n * \\brief Simplify certain operators during inference. For example, batch norm\n * will be unpacked into a number of simplified operators.\n *\n * \\return The Pass.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6650934,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": " TODO(zhiics) Maybe we can use PackedFunc here so that parameters can be\n handled because we need to register the pass for Python invocation anyway.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      42,
      43
    ],
    "matched_text": "// TODO(zhiics) Maybe we can use PackedFunc here so that parameters can be"
  },
  {
    "satd_id": 6650936,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": " Execute the required passes in a DFS way.\n TODO(zhiics) We may need to pass validation to detect the cyclic\n dependency.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      347,
      348,
      349
    ],
    "matched_text": "  // Execute the required passes in a DFS way."
  },
  {
    "satd_id": 6650936,
    "satd_repo": 70746484,
    "satd_sha": "bb48a45bcfc7d8a40dadca0ab7f589f59fdec374",
    "satd_text": " Execute the required passes in a DFS way.\n TODO(zhiics) We may need to pass validation to detect the cyclic\n dependency.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      381,
      382,
      383
    ],
    "matched_text": "  // Execute the required passes in a DFS way."
  },
  {
    "satd_id": 6650948,
    "satd_repo": 70746484,
    "satd_sha": "c8a0f524d92937dd14bc400a95dee9efb1acb2b0",
    "satd_text": " For multiple cfgs which produces the same in/out layouts,\n only the most efficient one is preserved.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/graph_tuner/base_graph_tuner.py",
    "lines": [
      218,
      219
    ],
    "matched_text": "                # For multiple cfgs which produces the same in/out layouts,"
  },
  {
    "satd_id": 6650954,
    "satd_repo": 70746484,
    "satd_sha": "c8a0f524d92937dd14bc400a95dee9efb1acb2b0",
    "satd_text": " If out degree of input node is 1, we can remove the dimension of input node,\n since the states of input node will not be needed any more. Otherwise, input\n node should become a dependency.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/graph_tuner/dynamic_programming_stage.py",
    "lines": [
      158,
      159,
      160
    ],
    "matched_text": "            # If out degree of input node is 1, we can remove the dimension of input node,"
  },
  {
    "satd_id": 6650982,
    "satd_repo": 70746484,
    "satd_sha": "c8a0f524d92937dd14bc400a95dee9efb1acb2b0",
    "satd_text": " NOTE: We name this test file to start with test_graph_tuner\n to make it execute after zero_rank tensor test cases. This\n helps avoid topi arithmetic operator overloading issue:\n https://github.com/dmlc/tvm/issues/3240\n TODO: restore the file name after this issue is resolved.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_graph_tuner_core.py",
    "lines": [
      18,
      19,
      20,
      21,
      22
    ],
    "matched_text": "# NOTE: We name this test file to start with test_graph_tuner"
  },
  {
    "satd_id": 6650982,
    "satd_repo": 70746484,
    "satd_sha": "c8a0f524d92937dd14bc400a95dee9efb1acb2b0",
    "satd_text": " NOTE: We name this test file to start with test_graph_tuner\n to make it execute after zero_rank tensor test cases. This\n helps avoid topi arithmetic operator overloading issue:\n https://github.com/dmlc/tvm/issues/3240\n TODO: restore the file name after this issue is resolved.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_graph_tuner_utils.py",
    "lines": [
      18,
      19,
      20,
      21,
      22
    ],
    "matched_text": "# NOTE: We name this test file to start with test_graph_tuner"
  },
  {
    "satd_id": 6651000,
    "satd_repo": 70746484,
    "satd_sha": "8814adab8ab082c8bc232635dd591c6bcdc9ea84",
    "satd_text": " TryConstFold doesn't work for negative cases because it is also used by legacy\n parts of tvm which still assume euclidean div. In this simplifier we assume that the division\n is truncated, so perform const folding again.\n NOTE: trunc div required",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      428,
      429,
      430,
      431
    ],
    "matched_text": "    // TryConstFold doesn't work for negative cases because it is also used by legacy"
  },
  {
    "satd_id": 6651008,
    "satd_repo": 70746484,
    "satd_sha": "89a88c57470e04f601530156ec37318e7d88ccdf",
    "satd_text": "!\n * \\brief Aggressive constant propagation/constant folding/inlining.\n *\n * It will do as much computation in compile time as possible.\n * It has two benefit: remove runtime overhead, and allow more optimization (typically fusion).\n * As a side effect, code size will explode.\n *\n * \\return the optimized expression.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/transform.h",
    "lines": [
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6651037,
    "satd_repo": 70746484,
    "satd_sha": "d3958e114ec435b7829bdb380d7bbe7410831bad",
    "satd_text": " Current image shape is 608x608\n#####################################################################\n Load a test image\n -----------------",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "nnvm/tutorials/from_darknet.py",
    "lines": [
      97,
      98,
      99,
      100
    ],
    "matched_text": "[neth, netw] = shape['data'][2:] # Current image shape is 608x608"
  },
  {
    "satd_id": 6651037,
    "satd_repo": 70746484,
    "satd_sha": "d3958e114ec435b7829bdb380d7bbe7410831bad",
    "satd_text": " Current image shape is 608x608\n#####################################################################\n Load a test image\n -----------------",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tutorials/frontend/from_darknet.py",
    "lines": [
      100,
      101,
      102,
      103
    ],
    "matched_text": "[neth, netw] = shape['data'][2:] # Current image shape is 608x608"
  },
  {
    "satd_id": 6651057,
    "satd_repo": 70746484,
    "satd_sha": "138ec7be78a436de0f73782f9a827c546ac31691",
    "satd_text": " TODO(zhiics): we currenlty only sequentially execute each pass in\n a Sequential without the consideration of their orders. The phase\n ordering problem needed to be handled in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      469,
      470,
      471
    ],
    "matched_text": "// TODO(zhiics): we currenlty only sequentially execute each pass in"
  },
  {
    "satd_id": 6651058,
    "satd_repo": 70746484,
    "satd_sha": "138ec7be78a436de0f73782f9a827c546ac31691",
    "satd_text": " TODO(zhiics) Check and handle the required passes.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      352
    ],
    "matched_text": "// TODO(zhiics) Check and handle the required passes."
  },
  {
    "satd_id": 6651058,
    "satd_repo": 70746484,
    "satd_sha": "138ec7be78a436de0f73782f9a827c546ac31691",
    "satd_text": " TODO(zhiics) Check and handle the required passes.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      375
    ],
    "matched_text": "// TODO(zhiics) Check and handle the required passes."
  },
  {
    "satd_id": 6651075,
    "satd_repo": 70746484,
    "satd_sha": "415a270def327c4e1beeea75ce7f296e4683a5c0",
    "satd_text": "!\n * \\brief RAII wrapper function to enter and exit a context object\n *        similar to python's with syntax.\n *\n * \\code\n * // context class\n * class MyContext {\n *  private:\n *    friend class With<MyContext>;\n      MyContext(arguments);\n *    void EnterWithScope();\n *    void ExitWithScope();\n * };\n *\n * {\n *   With<MyContext> scope(arguments);\n *   // effect take place.\n * }\n * \\endcode\n *\n * \\tparam ContextType Type of the context object.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/base.h",
    "lines": [
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6651100,
    "satd_repo": 70746484,
    "satd_sha": "3272e6cb98ca1ee95a0359c39055370a2b32ecea",
    "satd_text": " TODO(higumachan): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/onnx.py",
    "lines": [
      232
    ],
    "matched_text": "            # TODO(higumachan): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6651100,
    "satd_repo": 70746484,
    "satd_sha": "3272e6cb98ca1ee95a0359c39055370a2b32ecea",
    "satd_text": " TODO(higumachan): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      289
    ],
    "matched_text": "            # TODO(higumachan): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6651102,
    "satd_repo": 70746484,
    "satd_sha": "3272e6cb98ca1ee95a0359c39055370a2b32ecea",
    "satd_text": " TODO(higumachan): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/onnx.py",
    "lines": [
      232
    ],
    "matched_text": "            # TODO(higumachan): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6651102,
    "satd_repo": 70746484,
    "satd_sha": "3272e6cb98ca1ee95a0359c39055370a2b32ecea",
    "satd_text": " TODO(higumachan): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      289
    ],
    "matched_text": "            # TODO(higumachan): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6651119,
    "satd_repo": 70746484,
    "satd_sha": "f7d7fdcd3881beff0a0ad13c6a82b45aa834fd61",
    "satd_text": " todo: padding filter to accomodate the intrinsic",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      285
    ],
    "matched_text": "    # todo: padding filter to accomodate the intrinsic"
  },
  {
    "satd_id": 6651120,
    "satd_repo": 70746484,
    "satd_sha": "f7d7fdcd3881beff0a0ad13c6a82b45aa834fd61",
    "satd_text": " not saw perf improvement to split oh/ow here",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      352
    ],
    "matched_text": "        # not saw perf improvement to split oh/ow here"
  },
  {
    "satd_id": 6651134,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_cuda.py",
    "lines": [
      140
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651134,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      35
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651134,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      51
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651134,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      79
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651135,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_cuda.py",
    "lines": [
      140
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651135,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      35
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651135,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      51
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651135,
    "satd_repo": 70746484,
    "satd_sha": "24fe04f8ddaf607dc1a1f314b9b0c82dfd0ab923",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      79
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6651151,
    "satd_repo": 70746484,
    "satd_sha": "0f2a3086fc0c95d8fc72ae9356d48edeebd2001d",
    "satd_text": " TODO(zhiics) Move this to the pass manager.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      366
    ],
    "matched_text": "    # TODO(zhiics) Move this to the pass manager."
  },
  {
    "satd_id": 6651171,
    "satd_repo": 70746484,
    "satd_sha": "7d845f0d9853e9bdaff7f803486e01625230dd88",
    "satd_text": " TODO(gus) is there a typedef for the code?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/datatype/registry.h",
    "lines": [
      100
    ],
    "matched_text": "  // TODO(gus) is there a typedef for the code?"
  },
  {
    "satd_id": 6651178,
    "satd_repo": 70746484,
    "satd_sha": "7d845f0d9853e9bdaff7f803486e01625230dd88",
    "satd_text": " Used float32 calculator at http://www.weitz.de/ieee/. Generated\n unconstrained float32s for the operands and copied them in to x and y.\n Then, to simulate float32->bfloat16 conversion implemented by the mybfloat\n library, I cut off all but 7 bits of the mantissa. I then added the\n numbers. To simulate bfloat16 add implemented in mybfloat, I cut off all\n but 7 bits of the result's mantissa. I then copied that value into\n z_expected.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_custom_datatypes_mybfloat16.py",
    "lines": [
      102,
      103,
      104,
      105,
      106,
      107,
      108
    ],
    "matched_text": "    # Used float32 calculator at http://www.weitz.de/ieee/. Generated"
  },
  {
    "satd_id": 6651182,
    "satd_repo": 70746484,
    "satd_sha": "7d845f0d9853e9bdaff7f803486e01625230dd88",
    "satd_text": " For now, we store const scalar values of custom datatypes within doubles; later, during the\n datatypes lowering pass, we will lower the value to its true representation in the format\n specified by the datatype.\n TODO(gus) when do we need to start worrying about doubles not being precise enough?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr_operator.h",
    "lines": [
      555,
      556,
      557,
      558
    ],
    "matched_text": "  // For now, we store const scalar values of custom datatypes within doubles; later, during the"
  },
  {
    "satd_id": 6651190,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(@jroesch): use correct tag",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      246
    ],
    "matched_text": "    // TODO(@jroesch): use correct tag"
  },
  {
    "satd_id": 6651202,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(jroesch): support lowered funcs for multiple targets",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      370
    ],
    "matched_text": "    // TODO(jroesch): support lowered funcs for multiple targets"
  },
  {
    "satd_id": 6651206,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(@jroesch): we need to read target from build config",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/compiler.cc",
    "lines": [
      504
    ],
    "matched_text": "    // TODO(@jroesch): we need to read target from build config"
  },
  {
    "satd_id": 6651233,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " This pass will eliminate primitives which have been lifted by the ANF\n * transform inlining them directly into call sites.\n *\n * This makes VM related code generation easier as the call target is always\n * a primitive function.\n *\n * let prim = fn(...) { ... };\n * prim(...)\n *\n * will become:\n *\n * (fn(...) { ... })(...)\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/inline_primitives.cc",
    "lines": [
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124
    ],
    "matched_text": "/* This pass will eliminate primitives which have been lifted by the ANF"
  },
  {
    "satd_id": 6651237,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(@jroesch): write verifier",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/vm/inline_primitives.cc",
    "lines": [
      110
    ],
    "matched_text": "// TODO(@jroesch): write verifier"
  },
  {
    "satd_id": 6651242,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " When performing this optimization there are two\n cases.\n\n The first case in which we have no free variables\n we can just lift the function into the global\n environment without needing to allocate a closure.\n\n\n The second case requires that we generate a special\n function with makes a distinction between allocating\n a closure, and then the code for the closure.\n\n We represent a closure allocation by lifting the\n closure to a global function which takes its\n captured arguments and then directly returns\n the function representing the closure's code.\n\n When we generate code later on a call to the \"outer\"\n function marked as a closure is used to emit allocation\n code for the closure's environment.\n\n The \"inner\" function is should be used to generate the\n code for the closure.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/lambda_lift.cc",
    "lines": [
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96
    ],
    "matched_text": "    // When performing this optimization there are two"
  },
  {
    "satd_id": 6651252,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(zhiics): This measurement is for temporary usage. Remove it later. We\n need to introduce a better profiling method.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/vm/vm.cc",
    "lines": [
      51,
      52
    ],
    "matched_text": "  // TODO(zhiics): This measurement is for temporary usage. Remove it later. We"
  },
  {
    "satd_id": 6651255,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " The following networks fail\n test_inception_v3()\n test_mlp()\n test_dqn()\n test_dcgan()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/benchmarking/benchmark_vm.py",
    "lines": [
      129,
      130,
      131,
      132,
      133
    ],
    "matched_text": "    # The following networks fail"
  },
  {
    "satd_id": 6651261,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(@jroesch): restore when match is supported\n test_list_constructor()",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      262,
      263
    ],
    "matched_text": "    # TODO(@jroesch): restore when match is supported"
  },
  {
    "satd_id": 6651263,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(wweic): implement pattern match to support this test",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_vm.py",
    "lines": [
      179
    ],
    "matched_text": "    # TODO(wweic): implement pattern match to support this test"
  },
  {
    "satd_id": 6651268,
    "satd_repo": 70746484,
    "satd_sha": "6a4d71ff40915611bd42b62994992b879e6be610",
    "satd_text": " TODO(@jroesch): MK fix me",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/dead_code.cc",
    "lines": [
      127
    ],
    "matched_text": "      // TODO(@jroesch): MK fix me"
  },
  {
    "satd_id": 6651328,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO(@jroesch): I really would like this to be a global variable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      392
    ],
    "matched_text": "  // TODO(@jroesch): I really would like this to be a global variable."
  },
  {
    "satd_id": 6651337,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": "! \\brief A map from globals (as strings) to their index in the function map.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/vm.h",
    "lines": [
      408,
      409
    ],
    "matched_text": "  /*! \\brief A map from globals (as strings) to their index in the function map."
  },
  {
    "satd_id": 6651386,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO: We need to move this optimization code into the optimizer/pass manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/backend/interpreter.py",
    "lines": [
      278
    ],
    "matched_text": "        # TODO: We need to move this optimization code into the optimizer/pass manager"
  },
  {
    "satd_id": 6651386,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO: We need to move this optimization code into the optimizer/pass manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/backend/vm.py",
    "lines": [
      34
    ],
    "matched_text": "    # TODO: We need to move this optimization code into the optimizer/pass manager"
  },
  {
    "satd_id": 6651402,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO(@jroesch): use the passes directly.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/build_module.cc",
    "lines": [
      677
    ],
    "matched_text": "    // TODO(@jroesch): use the passes directly."
  },
  {
    "satd_id": 6651403,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO(@jroesch): this doesn't support mututal letrec",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      281
    ],
    "matched_text": "  // TODO(@jroesch): this doesn't support mututal letrec"
  },
  {
    "satd_id": 6651404,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " Temporary solution, should be handled by implementing a \"FunctionPass\"\n which applies fusion to each function.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fuse_ops.cc",
    "lines": [
      924,
      925
    ],
    "matched_text": "// Temporary solution, should be handled by implementing a \"FunctionPass\""
  },
  {
    "satd_id": 6651406,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO(MK): fix me",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partial_eval.py",
    "lines": [
      51
    ],
    "matched_text": "    # TODO(MK): fix me"
  },
  {
    "satd_id": 6651406,
    "satd_repo": 70746484,
    "satd_sha": "4332b0aae3e05ee3bfe2ecf3c0d164ff47ae30bb",
    "satd_text": " TODO(MK): fix me",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_partial_eval.py",
    "lines": [
      70
    ],
    "matched_text": "    # TODO(MK): fix me"
  },
  {
    "satd_id": 6651508,
    "satd_repo": 70746484,
    "satd_sha": "17b60b9036619d3b58589860cedb6e5e9f051ed8",
    "satd_text": " :code:`tvm.compute`. Imagine for more complicated operations how much details we need to provide.\n Fortunately, we can replace those two lines with simple :code:`topi.sum` much like :code:`numpy.sum`",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/topi/intro_topi.py",
    "lines": [
      53,
      54
    ],
    "matched_text": "# :code:`tvm.compute`. Imagine for more complicated operations how much details we need to provide."
  },
  {
    "satd_id": 6651509,
    "satd_repo": 70746484,
    "satd_sha": "31ba01399e6f9f0b4146afee685f16c5ddc68f91",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/dense.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6651510,
    "satd_repo": 70746484,
    "satd_sha": "88daa2bce90cd60de87355960fd05efbe73eb00f",
    "satd_text": " The following hack term is used to make the padding in batch gemm (\"M\")\n effective, otherwise the padding will be eliminated by bound inference.\n Use `tvm.expr.Mul` instead of `*` to avoid issues in const folding.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/conv2d.py",
    "lines": [
      355,
      356,
      357
    ],
    "matched_text": "                         # The following hack term is used to make the padding in batch gemm (\"M\")"
  },
  {
    "satd_id": 6651511,
    "satd_repo": 70746484,
    "satd_sha": "48c92376fb463114209fb0a6414e278d510ce02e",
    "satd_text": " Simplify the offset constant if necessary.\n (x - 5) % 3 => (x - 2) % 3 if x - 5 >= 0",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      770,
      771
    ],
    "matched_text": "      // Simplify the offset constant if necessary."
  },
  {
    "satd_id": 6651522,
    "satd_repo": 70746484,
    "satd_sha": "48c92376fb463114209fb0a6414e278d510ce02e",
    "satd_text": " can only simplify if condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_canonical_simplify.py",
    "lines": [
      175
    ],
    "matched_text": "    # can only simplify if condition"
  },
  {
    "satd_id": 6651523,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster in tuning, it is recommended to use cython",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_conv2d_cuda.py",
    "lines": [
      37
    ],
    "matched_text": "# To make TVM run faster in tuning, it is recommended to use cython"
  },
  {
    "satd_id": 6651523,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster in tuning, it is recommended to use cython",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_simple_template.py",
    "lines": [
      41
    ],
    "matched_text": "# To make TVM run faster in tuning, it is recommended to use cython"
  },
  {
    "satd_id": 6651525,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster during tuning, it is recommended to use cython",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      48
    ],
    "matched_text": "# To make TVM run faster during tuning, it is recommended to use cython"
  },
  {
    "satd_id": 6651525,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster during tuning, it is recommended to use cython",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      48
    ],
    "matched_text": "# To make TVM run faster during tuning, it is recommended to use cython"
  },
  {
    "satd_id": 6651525,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster during tuning, it is recommended to use cython",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      48
    ],
    "matched_text": "# To make TVM run faster during tuning, it is recommended to use cython"
  },
  {
    "satd_id": 6651527,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " Replace \"llvm\" with the correct target of your CPU.\n physical CPU cores on your machine.\n To get better kernel execution performance on x86 CPU,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6651528,
    "satd_repo": 70746484,
    "satd_sha": "741fdb9e8ec952c0467f8b3b3cf0a476543acd3e",
    "satd_text": " To make TVM run faster in tuning, it is recommended to use cython\n as FFI of TVM. In the root directory of TVM, execute\n In this section, we will rewrite a deterministic TVM schedule code to a\n By default, we use all CPU cores to compile program. Then measure them sequentially.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6651566,
    "satd_repo": 70746484,
    "satd_sha": "d39a4ea000d6d2a1879c0a6a7aa819de4e16eb27",
    "satd_text": " only test graph runtime because debug runtime is too slow",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/mxnet/test_forward.py",
    "lines": [
      565
    ],
    "matched_text": "            # only test graph runtime because debug runtime is too slow"
  },
  {
    "satd_id": 6651576,
    "satd_repo": 70746484,
    "satd_sha": "dd55682dcd6a6b17d11f228a64708532bb1ad111",
    "satd_text": " TODO(jroesch): NodePtr design doesn't really work here due to the passing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/object.h",
    "lines": [
      288
    ],
    "matched_text": "  // TODO(jroesch): NodePtr design doesn't really work here due to the passing."
  },
  {
    "satd_id": 6651641,
    "satd_repo": 70746484,
    "satd_sha": "a706ad16f83d810f4a6268cf604cece79c2c4791",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_algorithm.py",
    "lines": [
      18
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6651691,
    "satd_repo": 70746484,
    "satd_sha": "1146b81619d2a9c3ce56f37a9da7301d84d55560",
    "satd_text": " construct mirror as memory reduction strategy if needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/pass/gradient.cc",
    "lines": [
      146
    ],
    "matched_text": "  // construct mirror as memory reduction strategy if needed"
  },
  {
    "satd_id": 6651711,
    "satd_repo": 70746484,
    "satd_sha": "8f56949b340ea33cd3bdc2a6bb83904961d0a39b",
    "satd_text": " TODO(leyuan, merrymercy, Huyuwei): fold depthwise topi into conv2d.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      164
    ],
    "matched_text": "                    # TODO(leyuan, merrymercy, Huyuwei): fold depthwise topi into conv2d."
  },
  {
    "satd_id": 6651712,
    "satd_repo": 70746484,
    "satd_sha": "8f56949b340ea33cd3bdc2a6bb83904961d0a39b",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      17
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6651724,
    "satd_repo": 70746484,
    "satd_sha": "7e68d63f75dfa961c50cfeb7a55f78db9dcc90f0",
    "satd_text": "\n * Tries to recursively partition the range of the variable (given by var) of\n * the for loop (given by node and stmt) into a\n * number of disjoint ranges such that in some ranges one or more predicates\n * in the loopnest are provably true or false in each range. For example, given the\n * following loop to partition:\n * for (i = 0; i < 4; i++)\n *    for (j = 0; j < 10; j++)\n *        if (likely(i*10 + j < 36))\n *            A[10*i+j] = B[10*i+j]\n *\n * We first partition range of i, i.e., [0,3] into subranges [0,2] and [3,3] because the\n * likely condition is always true for the first subrange but not always true for the\n * second subrange. Therefore, we'll have\n * for (i = 0; i < 3; i++)\n *    for (j = 0; j < 10; j++)\n *        if (likely(1))\n *           A[10*i+j] = B[10*i+j]\n * for (i = 0; i < 1; i++)\n *    for (j = 0; j < 10; j++)\n *        if (likely((i+3)*10 + j < 36))\n *            A[10*(i+3)+j] = B[10*(i+3)+j]\n * Which is simplified as:\n * for (i = 0; i < 3; i++)\n *    for (j = 0; j < 10; j++)\n *        A[10*i+j] = B[10*i+j]\n * for (j = 0; j < 10; j++) // loopnest 1\n *    if (likely(j < 6))\n *            A[30+j] = B[30+j]\n * Now, we recursively partition j in loopnest 1 into subranges [0,5] and [6,9] where the\n * condition is true for the first subrange and now always true for the second subrange.\n * for (j = 0; j < 6; j++)\n *    if (likely(1))\n *         A[30+j] = B[30+j]\n * for (j = 0; j < 4; j++) // loop 2\n *    if (likely(j < 0))\n *        A[36+j] = B[36+j]\n * Finally we recursively partition loop 2 above into subrange [0,3] where the\n * condition is false and empty interval where the condition is not false,\n * therefore we generate\n * for (j = 0; j < 4; j++)\n *    if (likely(0))\n *        A[36+j] = B[36+j]\n * which will eventually be simplified to empty code. And because only one loop was generated\n * from loop 2 we stop recursing.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/loop_partition.cc",
    "lines": [
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467,
      468,
      469,
      470,
      471
    ],
    "matched_text": "/*"
  },
  {
    "satd_id": 6651727,
    "satd_repo": 70746484,
    "satd_sha": "7e68d63f75dfa961c50cfeb7a55f78db9dcc90f0",
    "satd_text": " TODO(derisavi): the following if statement needs to be removed as soon as\n TVM uses commit a768f2f0 of HalideIR repo",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/loop_partition.cc",
    "lines": [
      394,
      395
    ],
    "matched_text": "      // TODO(derisavi): the following if statement needs to be removed as soon as"
  },
  {
    "satd_id": 6651749,
    "satd_repo": 70746484,
    "satd_sha": "cc09497ee1a105000164c9b54e8e66347cb93ccd",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      50
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6651749,
    "satd_repo": 70746484,
    "satd_sha": "cc09497ee1a105000164c9b54e8e66347cb93ccd",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      86
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6651805,
    "satd_repo": 70746484,
    "satd_sha": "0f8686e8199dcc357856f7f709af4a49dc6c4bd3",
    "satd_text": "#####################################################################\n Sample Output\n ---------------------------------------------\n The following is the result of 'cpu', 'opencl' and 'vulkan' using Adreno 530 on Snapdragon 820\n\n Although we can run on a GPU, it is slower than CPU.\n To speed up, we need to write and optimize the schedule according to the GPU architecture.\n\n .. code-block:: bash\n\n    # cpu\n    TVM prediction top-1: tiger cat\n    Evaluate inference time cost...\n    Mean inference time (std dev): 37.92 ms (19.67 ms)\n\n    # opencl\n    TVM prediction top-1: tiger cat\n    Evaluate inference time cost...\n    Mean inference time (std dev): 419.83 ms (7.49 ms)\n\n    # vulkan\n    TVM prediction top-1: tiger cat\n    Evaluate inference time cost...\n    Mean inference time (std dev): 465.80 ms (4.52 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/deploy_model_on_android.py",
    "lines": [
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6651857,
    "satd_repo": 70746484,
    "satd_sha": "8b71a28289c637033f0cba60b0fc9ee26aca1793",
    "satd_text": "!\n * \\brief Convert type to string\n *\n * \\param typ\n * \\return std::string string format of type\n ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/backend/utils.h",
    "lines": [
      53,
      54,
      55,
      56,
      57,
      58
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6651882,
    "satd_repo": 70746484,
    "satd_sha": "bb87f044099ba61ba4782d17dd9127b869936373",
    "satd_text": " todo(M.K.): should use ptr equality but it is broken",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      558
    ],
    "matched_text": "      // todo(M.K.): should use ptr equality but it is broken"
  },
  {
    "satd_id": 6651882,
    "satd_repo": 70746484,
    "satd_sha": "bb87f044099ba61ba4782d17dd9127b869936373",
    "satd_text": " todo(M.K.): should use ptr equality but it is broken",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      683
    ],
    "matched_text": "        // todo(M.K.): should use ptr equality but it is broken"
  },
  {
    "satd_id": 6651892,
    "satd_repo": 70746484,
    "satd_sha": "bb87f044099ba61ba4782d17dd9127b869936373",
    "satd_text": "!\n * Copyright (c) 2018 by Contributors\n *\n * \\file partial_eval.cc\n *\n * \\brief Perform known computation in compile time.\n *\n * The partial evaluator try to do computation at compile time,\n * so it can generate code that do less work.\n * Additionally, it might open more chance for further optimization,\n * since the high level, structural part of the code (closure, reference, control flow)\n * might get partially evaluated away, and the subsequent optimization (for example, kernel fusion)\n * can reason across those structural code as it got removed.\n * In the extreme case, partial evaluation can even turn the whole program\n * into pure first order computation with no control flow.\n * In such a case, we can compile the whole computation onto SIMD Instruction/GPU/FPGA,\n * and get huge speedup.\n *\n * It works by making the following modifications to the standard relay interpreter:\n *\n * 0: The values become partially static value.\n * Since we cannot know the value of every term at compile time,\n * Term might get partially evaluated to 'Unknown Value'.\n * Every partially static value is, hence,\n * a static fragment that might not be there (partially static),\n * and a dynamic fragment that is semantically equivalent to the original term,\n * so the unknown part will be computed at runtime, using the dynamic fragment.\n *\n * 1: The interpreter holds a LetList, which preserves A Normal Form for the generated code.\n * More specifically, we require that all dynamic is an atom.\n * This avoids code duplication (which is both inefficient and incorrect), as atom has constant size\n * and allow us to not handle capture-avoidance substitution (as atom has no binder).\n *\n * 2: The map of References to partially static values is reified, as described below.\n * Instead of Reference having mutable field, Reference only has an unique identifier.\n * There will be a mutable mapping of id to partially static value, called the store.\n * This allow us to rollback the store:\n * when a path may or may not be executed (as in a conditional), we copy the store,\n * recurse with the copy, and reinstate the original when the call returns\n * so that the effects of the computation are not preserved.\n * We do this in if else, pattern matching, and in function,\n * as, when we see a function, we partially evaluate it with all the argument as dynamic,\n * to generate efficient dynamic for that function.\n *\n * 3: The generated code reuses bindings (although they are not shadowed),\n * so we have to deduplicate them.\n *\n * 4: In the generated code, multiple VarNode might have same Id.\n * While it is permitted, most pass use NodeHash for Var,\n * and having multiple VarNode for same Id break them.\n * Thus we remap them to a single Id for now.\n *\n * Also, It will also generate lots of dead code,\n * so it is a good idea to feed it through the dead code eliminator after partial evaluation.\n *\n * The partial evaluator makes several assumptions, so there is room for improvement:\n *\n * 0: The partial evaluator treats global variables as opaque.\n * Doing PartialEval on a module level will solve this.\n *\n * 1: The partial evaluator assume all functions as terminating.\n * We need to has a max_expand parameter that shrink on every compile time evaluation,\n * to make sure PE does not infinite loop.\n * Additionally, we might add a termination analysis pass that lift this requirement\n * for function that analysis found terminating.\n *\n * 2: Every time an unknown effect happened, we clear the whole store.\n * It is too conservative: if a local reference is created (and do not get passed outside),\n * An unknown global function call/global reference write can not modify it.\n * We can pair PE with escape analysis/alias analysis.\n *\n * 3: We assume all unknown code has effect. Doing effect analysis can make the store more precise.\n *\n * 4: When doing pattern matching, we can simplify the match even for dynamic case.\n * Right now it is all or nothing: either a complete match, or the original dynamic code.\n * Instead, we can get a match tree, pair it with the data and evaluate it to a normal form.\n * We then can reify the result.\n *\n * 5: Every time a function is called, it's code will get expanded and partially evaluated.\n * We can do a binding time analysis to cache the result and avoid re-partial evaluation.\n *\n * These assumptions do not affect the correctness of the algorithm, however.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/partial_eval.cc",
    "lines": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6651899,
    "satd_repo": 70746484,
    "satd_sha": "bb87f044099ba61ba4782d17dd9127b869936373",
    "satd_text": "! \\brief Aggressive constant propagation/constant folding/inlining.\n * It will do as much computation in compile time as possible.\n * It has two benefit: remove runtime overhead, and allow more optimization (typically fusion).\n * As a side effect, code size will explode.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/pass.h",
    "lines": [
      573,
      574,
      575,
      576,
      577
    ],
    "matched_text": "/*! \\brief Aggressive constant propagation/constant folding/inlining."
  },
  {
    "satd_id": 6652577,
    "satd_repo": 70746484,
    "satd_sha": "cffb4fba03ea582417e2630bd163bca773756af6",
    "satd_text": " There are plenty of useful schedule primitives in tvm. You can also find\n some tutorials that describe them in more details, such as\n\n\n template is very general. Actually this template can be easily modified",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6652621,
    "satd_repo": 70746484,
    "satd_sha": "162eab44dda632adeb81f7d22953d1267094bd77",
    "satd_text": " FIXME: Skip CRNN test since it causes segfault in libdarknet2.0.so\n    _test_forward_crnn()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "nnvm/tests/python/frontend/darknet/test_forward.py",
    "lines": [
      505,
      506
    ],
    "matched_text": "# FIXME: Skip CRNN test since it causes segfault in libdarknet2.0.so"
  },
  {
    "satd_id": 6652622,
    "satd_repo": 70746484,
    "satd_sha": "11b09cc5144928bbe43b16a31e24f779be80c258",
    "satd_text": " This sync is necessary because there might be incomplete read of\n previous iteration on the same buffer.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/lower_thread_allreduce.cc",
    "lines": [
      178,
      179
    ],
    "matched_text": "    // This sync is necessary because there might be incomplete read of"
  },
  {
    "satd_id": 6652625,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " if extra <= cval, it means the extra can be eliminated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      659
    ],
    "matched_text": "          // if extra <= cval, it means the extra can be eliminated."
  },
  {
    "satd_id": 6652633,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " already been simplified by const reduction axis removal",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      847
    ],
    "matched_text": "  // already been simplified by const reduction axis removal"
  },
  {
    "satd_id": 6652640,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " Simplify reduce expression.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      767
    ],
    "matched_text": "// Simplify reduce expression."
  },
  {
    "satd_id": 6652644,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " Simplify the combiner used in reduce.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      464
    ],
    "matched_text": "  // Simplify the combiner used in reduce."
  },
  {
    "satd_id": 6652649,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " combiner simplification.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      859
    ],
    "matched_text": "  // combiner simplification."
  },
  {
    "satd_id": 6652654,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " First simplify the results",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      805
    ],
    "matched_text": "  // First simplify the results"
  },
  {
    "satd_id": 6652654,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " First simplify the results",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      770
    ],
    "matched_text": "  // First simplify the results"
  },
  {
    "satd_id": 6652661,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " We simplify the result and identity, but not the source",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      853
    ],
    "matched_text": "      // We simplify the result and identity, but not the source"
  },
  {
    "satd_id": 6652661,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " We simplify the result and identity, but not the source",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      820
    ],
    "matched_text": "      // We simplify the result and identity, but not the source"
  },
  {
    "satd_id": 6652662,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " Note that here we assume that the identity element is indeed identity. Without this\n assumption we would have to perform a single iteration of the loop, i.e. use\n `(*op->combiner.get())(op->combineop->identity_element, op->source)[op->value_index]`\n instead of `op->source[op->value_index]`. The former may be more difficult to simplify.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      850,
      851,
      852,
      853
    ],
    "matched_text": "    // Note that here we assume that the identity element is indeed identity. Without this"
  },
  {
    "satd_id": 6652673,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " Recursively call simplification when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      844
    ],
    "matched_text": "  // Recursively call simplification when necessary."
  },
  {
    "satd_id": 6652681,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": "!\n   * \\brief Simplify the args by merging SplitExprs\n   * \\param args The original list of arguments.\n   * \\return simplified version.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      225,
      226,
      227,
      228,
      229
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6652698,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " tie.\n TODO(tvm-team) We might consider index as the last comparison point,\n after we make deep comparator more derministic.\n Specifically, we can consider comparing names of vars and break ties with address.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical_simplify.cc",
    "lines": [
      309,
      310,
      311,
      312
    ],
    "matched_text": "      // tie."
  },
  {
    "satd_id": 6652705,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": "!\n * \\brief Rewrite-based simplifier.\n *\n * This class can be inheritated for other simplifiers.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.h",
    "lines": [
      21,
      22,
      23,
      24,
      25
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6652708,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " namespace arith\n namespace tvm\n TVM_ARITHMETIC_REWRITE_SIMPLIFY_H_",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.h",
    "lines": [
      108,
      109,
      110
    ],
    "matched_text": "}  // namespace arith"
  },
  {
    "satd_id": 6652712,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " Simplify top level reduce.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/stmt_simplify.cc",
    "lines": [
      145
    ],
    "matched_text": "  // Simplify top level reduce."
  },
  {
    "satd_id": 6652715,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": "!\n *  Copyright (c) 2019 by Contributors\n * \\file stmt_simplify.cc\n * \\brief Statement simplifier based on analyzer\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/stmt_simplify.cc",
    "lines": [
      1,
      2,
      3,
      4,
      5
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6652716,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " statement simplifier",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/stmt_simplify.cc",
    "lines": [
      16
    ],
    "matched_text": "// statement simplifier"
  },
  {
    "satd_id": 6652718,
    "satd_repo": 70746484,
    "satd_sha": "7afbca5691fdb599cd90b043d5a5036e55cae2d6",
    "satd_text": " simplify then fold",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_canonical_simplify.py",
    "lines": [
      39
    ],
    "matched_text": "    # simplify then fold"
  },
  {
    "satd_id": 6652795,
    "satd_repo": 70746484,
    "satd_sha": "a02916b5ae8d88fb9a1d6adb477c1916d98f4275",
    "satd_text": " pylint: disable=invalid-name, unused-variable, no-else-return, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, no-else-return, unused-argument"
  },
  {
    "satd_id": 6652803,
    "satd_repo": 70746484,
    "satd_sha": "2df3364b0594d15053e23cee038305a6b52f144e",
    "satd_text": " TODO(@jroesch): this doesn't support mutual letrec.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      273
    ],
    "matched_text": "  // TODO(@jroesch): this doesn't support mutual letrec."
  },
  {
    "satd_id": 6652809,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " TODO(M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.cc",
    "lines": [
      92
    ],
    "matched_text": "  // TODO(M.K.): add escape."
  },
  {
    "satd_id": 6652809,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " TODO(M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      707
    ],
    "matched_text": "    // TODO(M.K.): add escape."
  },
  {
    "satd_id": 6652823,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " Indent a doc stream.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      57
    ],
    "matched_text": "  // Indent a doc stream."
  },
  {
    "satd_id": 6652831,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " TODO(tqchen, M.K.) support generic function\n Possibly through meta data",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/pretty_printer.cc",
    "lines": [
      371,
      372
    ],
    "matched_text": "      // TODO(tqchen, M.K.) support generic function"
  },
  {
    "satd_id": 6652842,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": "! \\brief additional comment function ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/pretty_printer.cc",
    "lines": [
      600
    ],
    "matched_text": "  /*! \\brief additional comment function */"
  },
  {
    "satd_id": 6652842,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": "! \\brief additional comment function ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      800
    ],
    "matched_text": "  /*! \\brief additional comment function */"
  },
  {
    "satd_id": 6652844,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " indent a new body\n TODO(jmp): indent should be an instance variable of the printer",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/pretty_printer.cc",
    "lines": [
      143,
      144
    ],
    "matched_text": "  // indent a new body"
  },
  {
    "satd_id": 6652861,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": "! \\brief counter of temporary variable ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/pretty_printer.cc",
    "lines": [
      612
    ],
    "matched_text": "  /*! \\brief counter of temporary variable */"
  },
  {
    "satd_id": 6652861,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": "! \\brief counter of temporary variable ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      812
    ],
    "matched_text": "  /*! \\brief counter of temporary variable */"
  },
  {
    "satd_id": 6652866,
    "satd_repo": 70746484,
    "satd_sha": "db5bfa3c6176d97db3c8fc3dc85cde3f023fe0d7",
    "satd_text": " TODO(jmp): Lots of code duplication here because PrintBody and PrintScope don't accept Docs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/pretty_printer.cc",
    "lines": [
      443
    ],
    "matched_text": "    // TODO(jmp): Lots of code duplication here because PrintBody and PrintScope don't accept Docs."
  },
  {
    "satd_id": 6652896,
    "satd_repo": 70746484,
    "satd_sha": "f63631fc731d69cf8ada19e3c1130d4d47d90262",
    "satd_text": " if not in correct format, do not do any rewrite.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/c_runtime_api.cc",
    "lines": [
      188
    ],
    "matched_text": "  // if not in correct format, do not do any rewrite."
  },
  {
    "satd_id": 6652902,
    "satd_repo": 70746484,
    "satd_sha": "f63631fc731d69cf8ada19e3c1130d4d47d90262",
    "satd_text": " detect check message, rewrite to remote extra :",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/c_runtime_api.cc",
    "lines": [
      179
    ],
    "matched_text": "    // detect check message, rewrite to remote extra :"
  },
  {
    "satd_id": 6652913,
    "satd_repo": 70746484,
    "satd_sha": "5a8ab8fe1e05a9b01f509e8391a0e0d7263c3e9c",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/injective.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6652914,
    "satd_repo": 70746484,
    "satd_sha": "fa709832f170eaf490cdf705bde8dd57511f1d95",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      19
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6652914,
    "satd_repo": 70746484,
    "satd_sha": "fa709832f170eaf490cdf705bde8dd57511f1d95",
    "satd_text": " Only need to test compiling here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_codegen_opencl.py",
    "lines": [
      35
    ],
    "matched_text": "        # Only need to test compiling here"
  },
  {
    "satd_id": 6652921,
    "satd_repo": 70746484,
    "satd_sha": "baf7a729ec400ff4c26f8fc609e0ae5d1f42f77a",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/rcnn/roi_pool.py",
    "lines": [
      71
    ],
    "matched_text": "        # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6652967,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": " Perform Module -> Module optimizations at the Function level.\n TODO(zhiics) Check and handle the required passes.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      297,
      298
    ],
    "matched_text": "// Perform Module -> Module optimizations at the Function level."
  },
  {
    "satd_id": 6652974,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": " Module -> Module optimizations.\n TODO(zhiics) 1. Check and handle the required passes.\n              2. Probably use CoW for all places that use module instead of\n              returning the updated one.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      270,
      271,
      272,
      273
    ],
    "matched_text": "// Module -> Module optimizations."
  },
  {
    "satd_id": 6652976,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": " TODO(zhiics) Implement it.\n 1. Consider the required passes for each pass.\n 2. Only resolve the enabled passes.\n 3. Build a dependency graph. Probably we need to update the pass list.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      358,
      359,
      360,
      361
    ],
    "matched_text": "  // TODO(zhiics) Implement it."
  },
  {
    "satd_id": 6652979,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": " TODO(zhiics) Create an enum attribute for FunctionNode\n enum Attribute {kPrimitive, kSkipOptimization}",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      326,
      327
    ],
    "matched_text": "// TODO(zhiics) Create an enum attribute for FunctionNode"
  },
  {
    "satd_id": 6652983,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": " TODO(jroesch, zhiics): we currenlty only sequentially execute each pass in\n a SequentialPass without the consideration of their orders. The phase\n ordering problem needed to be handled in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      344,
      345,
      346
    ],
    "matched_text": "// TODO(jroesch, zhiics): we currenlty only sequentially execute each pass in"
  },
  {
    "satd_id": 6652986,
    "satd_repo": 70746484,
    "satd_sha": "abe6f770464af78ce45bc1f17b4fb759c501c71b",
    "satd_text": "! \\brief The pass function sketches the real optimization. For example,\n   * we may need to perform dead code elimination on the module level. We could\n   * implement the algorithm in the `pass_func` and let it run on a module. It\n   * will then remove the dead code including the unused functions in the module.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/pass_manager.cc",
    "lines": [
      28,
      29,
      30,
      31,
      32
    ],
    "matched_text": "  /*! \\brief The pass function sketches the real optimization. For example,"
  },
  {
    "satd_id": 6653059,
    "satd_repo": 70746484,
    "satd_sha": "19194e97de23e217175712f4014650c8fde23955",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      169
    ],
    "matched_text": "def _mx_BlockGrad(inputs, attrs): #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6653078,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": " NOTE for developers:\n\n We mainly focus on index expression simplification.\n Besides the RewriteSimplifier, some cases can be better\n handled by CanonicalSimplifier.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      43,
      44,
      45,
      46,
      47
    ],
    "matched_text": "// NOTE for developers:"
  },
  {
    "satd_id": 6653079,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": "!\n *  Copyright (c) 2019 by Contributors\n * \\file rewrite_simplify.cc\n * \\brief Rewrite-rule based simplification.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      1,
      2,
      3,
      4,
      5
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6653081,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": " TODO(tqchen) refer back to super-analyzer.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      94
    ],
    "matched_text": "    // TODO(tqchen) refer back to super-analyzer."
  },
  {
    "satd_id": 6653090,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": " macro for rewrite + recursively rewrite ResExpr",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/rewrite_simplify.cc",
    "lines": [
      24
    ],
    "matched_text": "// macro for rewrite + recursively rewrite ResExpr"
  },
  {
    "satd_id": 6653121,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": "!\n * \\brief Rewrite-rule based simplifier.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arithmetic.h",
    "lines": [
      195,
      196,
      197
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6653124,
    "satd_repo": 70746484,
    "satd_sha": "ec95675c1757c1b18204fa9c5c39110b805555f2",
    "satd_text": " skip rewrite simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/analyzer.cc",
    "lines": [
      28
    ],
    "matched_text": "  // skip rewrite simplify"
  },
  {
    "satd_id": 6653136,
    "satd_repo": 70746484,
    "satd_sha": "695647db94ca9dca1661c5d41275ef4a86489dc4",
    "satd_text": " the NNVM operator is not supported yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "nnvm/python/nnvm/testing/check_computation.py",
    "lines": [
      460
    ],
    "matched_text": "                # the NNVM operator is not supported yet"
  },
  {
    "satd_id": 6653216,
    "satd_repo": 70746484,
    "satd_sha": "1eb1dac4def527d11586577cf79d75026840f944",
    "satd_text": " simple rule for now: pick higher constraints.\n TODO(team-team): Use extended euclidean algorithm.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/modular_set.cc",
    "lines": [
      271,
      272
    ],
    "matched_text": "    // simple rule for now: pick higher constraints."
  },
  {
    "satd_id": 6653221,
    "satd_repo": 70746484,
    "satd_sha": "1eb1dac4def527d11586577cf79d75026840f944",
    "satd_text": "!\n   * \\brief Simplify base so that it is in [0, coeff) when coeff != 0.\n   * \\param base The base value.\n   * \\param coeff The coeff value.\n   * \\return The simplified base.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/modular_set.cc",
    "lines": [
      278,
      279,
      280,
      281,
      282,
      283
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6653243,
    "satd_repo": 70746484,
    "satd_sha": "1eb1dac4def527d11586577cf79d75026840f944",
    "satd_text": "!\n   * \\brief Update the internal state to enter constraint.\n   * \\param constraint A constraint expression.\n   *\n   * \\return an exit function that must be called to cleanup the constraint can be nullptr.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arithmetic.h",
    "lines": [
      105,
      106,
      107,
      108,
      109,
      110
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6653243,
    "satd_repo": 70746484,
    "satd_sha": "1eb1dac4def527d11586577cf79d75026840f944",
    "satd_text": "!\n   * \\brief Update the internal state to enter constraint.\n   * \\param constraint A constraint expression.\n   *\n   * \\return an exit function that must be called to cleanup the constraint can be nullptr.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/arithmetic.h",
    "lines": [
      182,
      183,
      184,
      185,
      186,
      187
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6653265,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653265,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653265,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653265,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653268,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653268,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653268,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653268,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653269,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653269,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/batch_matmul.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653269,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653269,
    "satd_repo": 70746484,
    "satd_sha": "84590063225e71eb12e90cf625aa54c3d790c620",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6653284,
    "satd_repo": 70746484,
    "satd_sha": "d546bb77978ad1750f8d047556de596b9d9a4090",
    "satd_text": " This test asserts that tensorize does not have any effect on\n TensorComputeOp operations",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_schedule_tensorize.py",
    "lines": [
      232,
      233
    ],
    "matched_text": "# This test asserts that tensorize does not have any effect on"
  },
  {
    "satd_id": 6653303,
    "satd_repo": 70746484,
    "satd_sha": "3e5a172d8cee9454558c35adaa88bc1e4ebb3007",
    "satd_text": "#####################################################################\n If we run the example on our x86 server for demonstration, we can simply\n set it as :code:`llvm`. If running it on the Raspberry Pi, we need to\n specify its instruction set. Set :code:`local_demo` to False if you want\n to run this tutorial with a real device.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/relay/deploy_model_on_rasp.py",
    "lines": [
      148,
      149,
      150,
      151,
      152
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653362,
    "satd_repo": 70746484,
    "satd_sha": "177fd641d78117c5ff616b65104dae124be1ca03",
    "satd_text": "#####################################################################\n Note that if you use cuDNN, Relay cannot fuse convolution with layers following it.\n This is because layer fusion happens at the level of TVM internal representation(IR).\n Relay treats external libraries as black box, so there is no way to fuse them with TVM IR.\n\n The pseudo code below shows that cuDNN convolution + bias add + batch norm + ReLU turned into two stages of computation, one for cuDNN call and the other for the rest of operations.\n\n .. code-block:: text\n\n      // attr [y] storage_scope = \"global\"\n      allocate y[float32 * 802816]\n      produce y {\n        // attr [0] extern_scope = 0\n        tvm_call_packed(\"tvm.contrib.cudnn.conv2d.forward\", 1, 0, 1, 1, 1, 1, 1, 1, 1, tvm_stack_make_array(placeholder, tvm_stack_make_shape(1, 3, 224, 224), 0, 4, 0.000000f, 0), tvm_stack_make_array(placeholder, tvm_stack_make_shape(16, 3, 3, 3), 0, 4, 0.000000f, 0), tvm_stack_make_array(y, tvm_stack_make_shape(1, 16, 224, 224), 0, 4, 0.000000f, 0))\n      }\n      produce tensor {\n        // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256\n        // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512\n        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 7) {\n          if (likely(((blockIdx.x*512) < ((802816 - (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072)) - threadIdx.x)))) {\n            tensor[(((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/802816)*802816) + (((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/224) % 224)*224) + ((((blockIdx.x*64) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*32)) % 224))) + ((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/50176) % 16)*50176))] = max(((y[(((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/802816)*802816) + (((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/224) % 224)*224) + ((((blockIdx.x*64) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*32)) % 224))) + ((((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/50176) % 16)*50176))]*placeholder[(((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/50176) % 16)]) + placeholder[(((((blockIdx.x*512) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer*131072))/50176) % 16)]), 0.000000f)\n          }\n        }\n      }",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/relay/using_external_lib.py",
    "lines": [
      493,
      494,
      495,
      496,
      497,
      498,
      499,
      500,
      501,
      502,
      503,
      504,
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514,
      515,
      516
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653367,
    "satd_repo": 70746484,
    "satd_sha": "177fd641d78117c5ff616b65104dae124be1ca03",
    "satd_text": "#####################################################################\n The generated pseudo code should look something like below.\n Note how bias add, batch normalization, and ReLU activation are fused into the convolution kernel.\n TVM generates a single, fused kernel from this representation.\n\n .. code-block:: text\n\n       produce tensor {\n         // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 1\n         // attr [compute] storage_scope = \"local\"\n         allocate compute[float32 * 32]\n         // attr [pad_temp.shared] storage_scope = \"shared\"\n         allocate pad_temp.shared[float32 * 180]\n         // attr [placeholder.shared] storage_scope = \"shared\"\n         allocate placeholder.shared[float32 * 144]\n         // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 28\n         // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 14\n         // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 4\n         // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1\n         // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16\n         produce compute {\n           compute[0] = 0.000000f\n           compute[1] = 0.000000f\n           compute[2] = 0.000000f\n           compute[3] = 0.000000f\n           compute[4] = 0.000000f\n           compute[5] = 0.000000f\n           compute[6] = 0.000000f\n           compute[7] = 0.000000f\n           compute[8] = 0.000000f\n           compute[9] = 0.000000f\n           compute[10] = 0.000000f\n           compute[11] = 0.000000f\n           compute[12] = 0.000000f\n           compute[13] = 0.000000f\n           compute[14] = 0.000000f\n           compute[15] = 0.000000f\n           compute[16] = 0.000000f\n           compute[17] = 0.000000f\n           compute[18] = 0.000000f\n           compute[19] = 0.000000f\n           compute[20] = 0.000000f\n           compute[21] = 0.000000f\n           compute[22] = 0.000000f\n           compute[23] = 0.000000f\n           compute[24] = 0.000000f\n           compute[25] = 0.000000f\n           compute[26] = 0.000000f\n           compute[27] = 0.000000f\n           compute[28] = 0.000000f\n           compute[29] = 0.000000f\n           compute[30] = 0.000000f\n           compute[31] = 0.000000f\n           for (rc.outer, 0, 3) {\n             produce pad_temp.shared {\n               // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 4\n               // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1\n               // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16\n               if (likely(((threadIdx.z*15) < (60 - threadIdx.x)))) {\n                 if (likely((threadIdx.x < 15))) {\n                   pad_temp.shared[(((((threadIdx.z*15) + threadIdx.x)/60)*180) + ((((((threadIdx.z*15) + threadIdx.x)/6) % 10)*18) + ((((threadIdx.z*3) + threadIdx.x)*3) % 18)))] = tvm_if_then_else((((((1 - ((((threadIdx.z*15) + threadIdx.x)/6) % 10)) <= (blockIdx.y*8)) && ((blockIdx.y*8) < (225 - ((((threadIdx.z*15) + threadIdx.x)/6) % 10)))) && ((1 - ((((threadIdx.z*3) + threadIdx.x)*3) % 18)) <= (blockIdx.x*16))) && ((blockIdx.x*16) < (225 - ((((threadIdx.z*3) + threadIdx.x)*3) % 18)))), placeholder[((((((((blockIdx.y*112) + blockIdx.x) + (rc.outer*3136)) + ((((threadIdx.z*15) + threadIdx.x)/60)*9408))*16) + ((((threadIdx.z*3) + threadIdx.x)*3) % 18)) + (((((threadIdx.z*15) + threadIdx.x)/6) % 10)*224)) + -225)], 0.000000f)\n                   pad_temp.shared[(((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/180)*180) + ((((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/18) % 10)*18) + (((((threadIdx.z*3) + threadIdx.x)*3) + 1) % 18)))] = tvm_if_then_else((((((1 - ((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/18) % 10)) <= (blockIdx.y*8)) && ((blockIdx.y*8) < (225 - ((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/18) % 10)))) && ((1 - (((((threadIdx.z*3) + threadIdx.x)*3) + 1) % 18)) <= (blockIdx.x*16))) && ((blockIdx.x*16) < (225 - (((((threadIdx.z*3) + threadIdx.x)*3) + 1) % 18)))), placeholder[((((((((blockIdx.y*112) + blockIdx.x) + (rc.outer*3136)) + ((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/180)*9408))*16) + (((((threadIdx.z*3) + threadIdx.x)*3) + 1) % 18)) + (((((((threadIdx.z*15) + threadIdx.x)*3) + 1)/18) % 10)*224)) + -225)], 0.000000f)\n                   pad_temp.shared[(((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/180)*180) + ((((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/18) % 10)*18) + (((((threadIdx.z*3) + threadIdx.x)*3) + 2) % 18)))] = tvm_if_then_else((((((1 - ((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/18) % 10)) <= (blockIdx.y*8)) && ((blockIdx.y*8) < (225 - ((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/18) % 10)))) && ((1 - (((((threadIdx.z*3) + threadIdx.x)*3) + 2) % 18)) <= (blockIdx.x*16))) && ((blockIdx.x*16) < (225 - (((((threadIdx.z*3) + threadIdx.x)*3) + 2) % 18)))), placeholder[((((((((blockIdx.y*112) + blockIdx.x) + (rc.outer*3136)) + ((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/180)*9408))*16) + (((((threadIdx.z*3) + threadIdx.x)*3) + 2) % 18)) + (((((((threadIdx.z*15) + threadIdx.x)*3) + 2)/18) % 10)*224)) + -225)], 0.000000f)\n                 }\n               }\n             }\n             produce placeholder.shared {\n               // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 4\n               // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1\n               // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16\n               if (likely(((threadIdx.z*4) < (16 - (threadIdx.x/3))))) {\n                 if (likely(((threadIdx.z*12) < (48 - threadIdx.x)))) {\n                   if (likely((threadIdx.x < 12))) {\n                     placeholder.shared[(((((threadIdx.z*4) + (threadIdx.x/3))*3) + (threadIdx.x % 3))*3)] = placeholder[(((((rc.outer + (threadIdx.z*12)) + ((threadIdx.x/3)*3))*3) + (threadIdx.x % 3))*3)]\n                     placeholder.shared[((((((threadIdx.z*4) + (threadIdx.x/3))*3) + (threadIdx.x % 3))*3) + 1)] = placeholder[((((((rc.outer + (threadIdx.z*12)) + ((threadIdx.x/3)*3))*3) + (threadIdx.x % 3))*3) + 1)]\n                     placeholder.shared[((((((threadIdx.z*4) + (threadIdx.x/3))*3) + (threadIdx.x % 3))*3) + 2)] = placeholder[((((((rc.outer + (threadIdx.z*12)) + ((threadIdx.x/3)*3))*3) + (threadIdx.x % 3))*3) + 2)]\n                   }\n                 }\n               }\n             }\n             compute[0] = (compute[0] + (pad_temp.shared[threadIdx.x]*placeholder.shared[(threadIdx.z*36)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[(threadIdx.z*36)]))\n             compute[8] = (compute[8] + (pad_temp.shared[threadIdx.x]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 9)]))\n             compute[16] = (compute[16] + (pad_temp.shared[threadIdx.x]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 18)]))\n             compute[24] = (compute[24] + (pad_temp.shared[threadIdx.x]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 27)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 1)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 1)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 1)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 10)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 1)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 19)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 1)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 28)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 2)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 2)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 2)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 11)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 2)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 20)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 2)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 29)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 3)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 12)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 21)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 18)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 30)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 4)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 13)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 22)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 19)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 31)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 5)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 14)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 23)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 20)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 32)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 162)]*placeholder.shared[((threadIdx.z*36) + 6)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 162)]*placeholder.shared[((threadIdx.z*36) + 15)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 162)]*placeholder.shared[((threadIdx.z*36) + 24)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 36)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 54)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 72)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 90)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 108)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 126)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 144)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 162)]*placeholder.shared[((threadIdx.z*36) + 33)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 163)]*placeholder.shared[((threadIdx.z*36) + 7)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 163)]*placeholder.shared[((threadIdx.z*36) + 16)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 163)]*placeholder.shared[((threadIdx.z*36) + 25)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 37)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 55)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 73)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 109)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 127)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 145)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 163)]*placeholder.shared[((threadIdx.z*36) + 34)]))\n             compute[0] = (compute[0] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[1] = (compute[1] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[2] = (compute[2] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[3] = (compute[3] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[4] = (compute[4] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[5] = (compute[5] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[6] = (compute[6] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[7] = (compute[7] + (pad_temp.shared[(threadIdx.x + 164)]*placeholder.shared[((threadIdx.z*36) + 8)]))\n             compute[8] = (compute[8] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[9] = (compute[9] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[10] = (compute[10] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[11] = (compute[11] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[12] = (compute[12] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[13] = (compute[13] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[14] = (compute[14] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[15] = (compute[15] + (pad_temp.shared[(threadIdx.x + 164)]*placeholder.shared[((threadIdx.z*36) + 17)]))\n             compute[16] = (compute[16] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[17] = (compute[17] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[18] = (compute[18] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[19] = (compute[19] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[20] = (compute[20] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[21] = (compute[21] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[22] = (compute[22] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[23] = (compute[23] + (pad_temp.shared[(threadIdx.x + 164)]*placeholder.shared[((threadIdx.z*36) + 26)]))\n             compute[24] = (compute[24] + (pad_temp.shared[(threadIdx.x + 38)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[25] = (compute[25] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[26] = (compute[26] + (pad_temp.shared[(threadIdx.x + 74)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[27] = (compute[27] + (pad_temp.shared[(threadIdx.x + 92)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[28] = (compute[28] + (pad_temp.shared[(threadIdx.x + 110)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[29] = (compute[29] + (pad_temp.shared[(threadIdx.x + 128)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[30] = (compute[30] + (pad_temp.shared[(threadIdx.x + 146)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n             compute[31] = (compute[31] + (pad_temp.shared[(threadIdx.x + 164)]*placeholder.shared[((threadIdx.z*36) + 35)]))\n           }\n         }\n         tensor[(((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x)] = max(((compute[0]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 224)] = max(((compute[1]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 448)] = max(((compute[2]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 672)] = max(((compute[3]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 896)] = max(((compute[4]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 1120)] = max(((compute[5]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 1344)] = max(((compute[6]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 1568)] = max(((compute[7]*placeholder[(threadIdx.z*4)]) + placeholder[(threadIdx.z*4)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 50176)] = max(((compute[8]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 50400)] = max(((compute[9]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 50624)] = max(((compute[10]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 50848)] = max(((compute[11]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 51072)] = max(((compute[12]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 51296)] = max(((compute[13]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 51520)] = max(((compute[14]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 51744)] = max(((compute[15]*placeholder[((threadIdx.z*4) + 1)]) + placeholder[((threadIdx.z*4) + 1)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 100352)] = max(((compute[16]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 100576)] = max(((compute[17]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 100800)] = max(((compute[18]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 101024)] = max(((compute[19]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 101248)] = max(((compute[20]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 101472)] = max(((compute[21]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 101696)] = max(((compute[22]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 101920)] = max(((compute[23]*placeholder[((threadIdx.z*4) + 2)]) + placeholder[((threadIdx.z*4) + 2)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 150528)] = max(((compute[24]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 150752)] = max(((compute[25]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 150976)] = max(((compute[26]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 151200)] = max(((compute[27]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 151424)] = max(((compute[28]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 151648)] = max(((compute[29]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 151872)] = max(((compute[30]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n         tensor[((((((blockIdx.y*112) + blockIdx.x) + (threadIdx.z*12544))*16) + threadIdx.x) + 152096)] = max(((compute[31]*placeholder[((threadIdx.z*4) + 3)]) + placeholder[((threadIdx.z*4) + 3)]), 0.000000f)\n       }",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/relay/using_external_lib.py",
    "lines": [
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467,
      468,
      469,
      470,
      471
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653368,
    "satd_repo": 70746484,
    "satd_sha": "177fd641d78117c5ff616b65104dae124be1ca03",
    "satd_text": "####################################################################\n Conclusion\n ----------\n This tutorial covered the usage of cuDNN with Relay.\n We also have support for cuBLAS. If cuBLAS is enabled, it will be used inside a fully connected layer (relay.dense).\n To use cuBLAS, set a target string as \"cuda -libs=cublas\".\n You can use both cuDNN and cuBLAS with \"cuda -libs=cudnn,cublas\".\n\n For ROCm backend, we have support for MIOpen and rocBLAS.\n They can be enabled with target \"rocm -libs=miopen,rocblas\".\n\n Being able to use external libraries is great, but we need to keep in mind some cautions.\n\n First, the use of external libraries may restrict your usage of TVM and Relay.\n For example, MIOpen only supports NCHW layout and fp32 data type at the moment, so you cannot use other layouts or data type in TVM.\n\n Second, and more importantly, external libraries restrict the possibility of operator fusion during graph compilation, as shown above.\n TVM and Relay aim to achieve the best performance on a variety of hardwares, with joint operator level and graph level optimization.\n To achieve this goal, we should continue developing better optimizations for TVM and Relay, while using external libraries as a nice way to fall back to existing implementation when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/relay/using_external_lib.py",
    "lines": [
      526,
      527,
      528,
      529,
      530,
      531,
      532,
      533,
      534,
      535,
      536,
      537,
      538,
      539,
      540,
      541,
      542,
      543,
      544
    ],
    "matched_text": "#####################################################################"
  },
  {
    "satd_id": 6653432,
    "satd_repo": 70746484,
    "satd_sha": "ee79703c3c3e7c56e3e075afccd0bbf0ae7722a0",
    "satd_text": " bind variables for original axes\n for major-axis, bind the corresponding size\n for minor-axis, simply bind it as 0, so that we can reuse forward/backward_rule,\n e.g., (C * 16 + c) / 32",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/data_layout.cc",
    "lines": [
      254,
      255,
      256,
      257
    ],
    "matched_text": "  // bind variables for original axes"
  },
  {
    "satd_id": 6653464,
    "satd_repo": 70746484,
    "satd_sha": "b5f46c420e2bf783d294dbfc386e14ddf8768352",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_yolo.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6653482,
    "satd_repo": 70746484,
    "satd_sha": "d9dc65f8500b5faaa5f1973afab5ebb3e8b3bd02",
    "satd_text": " eager simplify if guard.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/make_api.cc",
    "lines": [
      195
    ],
    "matched_text": "    // eager simplify if guard."
  },
  {
    "satd_id": 6653489,
    "satd_repo": 70746484,
    "satd_sha": "0555a03fe8e622c862745a60e075507c1baf96ac",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6653489,
    "satd_repo": 70746484,
    "satd_sha": "0555a03fe8e622c862745a60e075507c1baf96ac",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor_grad.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6653495,
    "satd_repo": 70746484,
    "satd_sha": "aac5837faa7f27665deff387ccc123cd598fdd8c",
    "satd_text": " prexec_fn is not thread safe and may result in deadlock.\n python 3.2 introduced the start_new_session parameter as\n an alternative to the common use case of\n prexec_fn=os.setsid.  Once the minimum version of python\n supported by TVM reaches python 3.2 this code can be\n rewritten in favour of start_new_session.  In the\n interim, stop the pylint diagnostic.\n\n pylint: disable=subprocess-popen-preexec-fn",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/rpc/server.py",
    "lines": [
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342
    ],
    "matched_text": "            # prexec_fn is not thread safe and may result in deadlock."
  },
  {
    "satd_id": 6653501,
    "satd_repo": 70746484,
    "satd_sha": "81334be34d5809e4e0983ccda0cbe1d7659f7cf5",
    "satd_text": " Should be consistent with the type-trait set in the backend",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/extension/python/tvm_ext/__init__.py",
    "lines": [
      57
    ],
    "matched_text": "    # Should be consistent with the type-trait set in the backend"
  },
  {
    "satd_id": 6653520,
    "satd_repo": 70746484,
    "satd_sha": "8b1d07ff7b33d522588e9360227fb2e218a93211",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_rcnn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6653535,
    "satd_repo": 70746484,
    "satd_sha": "255c187b369f96bfaaaa12c0afb01efef98da95f",
    "satd_text": "!\n * \\brief Pattern variable container.\n *\n * PVar is used as a \"hole\" in the pattern that can be matched.\n *\n * \\tparam T the type of the hole.\n *\n * \\note PVar is not thread safe.\n *       Do not use the same PVar in multiple threads.\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/arithmetic/pattern_match.h",
    "lines": [
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6653541,
    "satd_repo": 70746484,
    "satd_sha": "255c187b369f96bfaaaa12c0afb01efef98da95f",
    "satd_text": "!\n *  Copyright (c) 2019 by Contributors\n * \\file tvm/arithmetic/pattern_match.h\n *\n * \\brief Internal tool for expression-template based pattern matching.\n *\n * It helps to simplify pattern matching and rewrites.\n * All the patterns are generated via expression template during compile time,\n * so the result code should be as efficient as manually written pattern match code.\n *\n * The code below shows how to use the pattern matcher.\n *\n * \\code\n *\n *  // max(x + z, y + z) => max(x, y) + z\n *  arith::PVar<Expr> x, y, z;\n *\n *  // The following code tries to match the declared pattern.\n *  // Match will fill the result of match into PVar if successful.\n *  // Note that z occurs twice in the pattern,\n *  // an equality check is performed to ensure each occurance of z\n *  // is equivalent to each other.\n *  if (max(x + z, y + z).Match(expr)) {\n *    // Eval evaluates a pattern with the current matched value.\n *    // The filled value is valid until the next call to Match.\n *    return (max(x, y) + z).Eval();\n *  }\n * \\endcode\n *\n * \\note The pattern matcher is not threadsafe,\n *       do not use the same PVar in multiple threads.\n *\n *       Please be aware that the filled value in a PVar\n *       can be overriden in the next call to Match.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/pattern_match.h",
    "lines": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6653663,
    "satd_repo": 70746484,
    "satd_sha": "2ae3124f4743597fa88e5bbcbd4cabff895b70e7",
    "satd_text": " todo(M.K.): should use ptr equality but it is broken",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      519
    ],
    "matched_text": "      // todo(M.K.): should use ptr equality but it is broken"
  },
  {
    "satd_id": 6653682,
    "satd_repo": 70746484,
    "satd_sha": "2ae3124f4743597fa88e5bbcbd4cabff895b70e7",
    "satd_text": " redundant but shouldn't matter to typechecking",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_type_infer.py",
    "lines": [
      238
    ],
    "matched_text": "                         # redundant but shouldn't matter to typechecking"
  },
  {
    "satd_id": 6653699,
    "satd_repo": 70746484,
    "satd_sha": "d20646c7908a92891d0efc1be61ed4fab67a2acf",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/rcnn/proposal.py",
    "lines": [
      95
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6653710,
    "satd_repo": 70746484,
    "satd_sha": "c53dd1020e24605c5cb6b38d73f7638386bb94fd",
    "satd_text": "! \\brief The current indent of the code dump. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/contrib/hybrid/codegen_hybrid.h",
    "lines": [
      124
    ],
    "matched_text": "  /*! \\brief The current indent of the code dump. */"
  },
  {
    "satd_id": 6653711,
    "satd_repo": 70746484,
    "satd_sha": "c53dd1020e24605c5cb6b38d73f7638386bb94fd",
    "satd_text": "! \\brief The tab size of code indent. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/contrib/hybrid/codegen_hybrid.h",
    "lines": [
      126
    ],
    "matched_text": "  /*! \\brief The tab size of code indent. */"
  },
  {
    "satd_id": 6653719,
    "satd_repo": 70746484,
    "satd_sha": "c53dd1020e24605c5cb6b38d73f7638386bb94fd",
    "satd_text": "! \\brief Print the current indent spaces. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/contrib/hybrid/codegen_hybrid.h",
    "lines": [
      128
    ],
    "matched_text": "  /*! \\brief Print the current indent spaces. */"
  },
  {
    "satd_id": 6653732,
    "satd_repo": 70746484,
    "satd_sha": "c53dd1020e24605c5cb6b38d73f7638386bb94fd",
    "satd_text": " TODO(@were): Make this module more complete.\n 1. Support HalideIR dumping to Hybrid Script\n 2. Support multi-level HalideIR",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/__init__.py",
    "lines": [
      12,
      13,
      14
    ],
    "matched_text": "# TODO(@were): Make this module more complete."
  },
  {
    "satd_id": 6653736,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      226
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653736,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      141
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653736,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      225
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653736,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      100
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653737,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "###################################################################\n\n .. note:: How to set tuning options\n\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   which makes the tuning run longer.\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n\n   If your model has depthwise convolution, you could consider setting\n   :code:`try_spatial_pack_depthwise` be :code:`True`, which perform better than default\n   optimization in general. For example, on ARM CPU A53 2.0GHz, we find it could boost 1.6x\n   performance of depthwise convolution on Mobilenet V1 model.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216
    ],
    "matched_text": "####################################################################"
  },
  {
    "satd_id": 6653740,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      349,
      350
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653740,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653740,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      331,
      332
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653740,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      180,
      181
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653746,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      218,
      219,
      220,
      221,
      222,
      223,
      224
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653746,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      133,
      134,
      135,
      136,
      137,
      138,
      139
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653746,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      217,
      218,
      219,
      220,
      221,
      222,
      223
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653747,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653747,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653747,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653752,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below.\n It takes about 2 hours on a 32T AMD Ryzen Threadripper.\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/12]  Current/Best:   22.37/  52.19 GFLOPS | Progress: (544/1000) | 406.59 s Done.\n    [Task  2/12]  Current/Best:    6.51/  18.77 GFLOPS | Progress: (608/1000) | 325.05 s Done.\n    [Task  3/12]  Current/Best:    4.67/  24.87 GFLOPS | Progress: (480/1000) | 372.31 s Done.\n    [Task  4/12]  Current/Best:   11.35/  46.83 GFLOPS | Progress: (736/1000) | 602.39 s Done.\n    [Task  5/12]  Current/Best:    1.01/  19.80 GFLOPS | Progress: (448/1000) | 262.16 s Done.\n    [Task  6/12]  Current/Best:    2.47/  23.76 GFLOPS | Progress: (672/1000) | 563.85 s Done.\n    [Task  7/12]  Current/Best:   14.57/  33.97 GFLOPS | Progress: (544/1000) | 465.15 s Done.\n    [Task  8/12]  Current/Best:    1.13/  17.65 GFLOPS | Progress: (576/1000) | 365.08 s Done.\n    [Task  9/12]  Current/Best:   14.45/  22.66 GFLOPS | Progress: (928/1000) | 724.25 s Done.\n    [Task 10/12]  Current/Best:    3.22/  15.36 GFLOPS | Progress: (864/1000) | 564.27 s Done.\n    [Task 11/12]  Current/Best:   11.03/  32.23 GFLOPS | Progress: (736/1000) | 635.15 s Done.\n    [Task 12/12]  Current/Best:    8.00/  21.65 GFLOPS | Progress: (1000/1000) | 1111.81 s Done.\n    Compile...\n    Upload...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 162.59 ms (0.06 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653757,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653757,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653769,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      226
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653769,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      141
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653769,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      225
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653769,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      100
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653771,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      349,
      350
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653771,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653771,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      331,
      332
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653771,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      180,
      181
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653778,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      218,
      219,
      220,
      221,
      222,
      223,
      224
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653778,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      133,
      134,
      135,
      136,
      137,
      138,
      139
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653778,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      217,
      218,
      219,
      220,
      221,
      222,
      223
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653780,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653780,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653780,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653783,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Scale up measurement by using multiple devices\n ----------------------------------------------\n\n If you have multiple devices, you can use all of them for measurement.\n TVM uses the RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 GPU cards, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190\n\n Then open another new terminal for the RPC server. We need to start one server\n for each dedicated device. We use a string key to distinguish the types of devices.\n You can pick a name you like.\n (Note: For rocm backend, there are some internal errors with the compiler,\n we need to add `--no-fork` to the argument list.)\n\n .. code-block:: bash\n\n     python -m tvm.exec.rpc_server --tracker=localhost:9190 --key=1080ti\n\n After registering devices, we can confirm it by querying rpc_tracker\n\n .. code-block:: bash\n\n   python -m tvm.exec.query_rpc_tracker --host=localhost --port=9190\n\n For example, if we have four 1080ti, two titanx and one gfx900, the output can be\n\n .. code-block:: bash\n\n    Queue Status\n    ----------------------------------\n    key          total  free  pending\n    ----------------------------------\n    1080ti       4      4     0\n    titanx       2      2     0\n    gfx900       1      1     0\n    ----------------------------------\n\n Finally, we need to change the tuning option to use RPCRunner. Use the code below\n to replace the corresponding part above.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653791,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended. One sample output is listed below.\n It takes about 4 hours to get the following output on a 32T AMD Ryzen Threadripper.\n The tuning target is NVIDIA 1080 Ti.\n (You can see some errors during compilation. If the tuning is not stuck, it is okay.)\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/12]  Current/Best:  541.83/3570.66 GFLOPS | Progress: (960/2000) | 1001.31 s Done.\n    [Task  2/12]  Current/Best:    0.56/ 803.33 GFLOPS | Progress: (704/2000) | 608.08 s Done.\n    [Task  3/12]  Current/Best:  103.69/1141.25 GFLOPS | Progress: (768/2000) | 702.13 s Done.\n    [Task  4/12]  Current/Best: 2905.03/3925.15 GFLOPS | Progress: (864/2000) | 745.94 sterminate called without an active exception\n    [Task  4/12]  Current/Best: 2789.36/3925.15 GFLOPS | Progress: (1056/2000) | 929.40 s Done.\n    [Task  5/12]  Current/Best:   89.06/1076.24 GFLOPS | Progress: (704/2000) | 601.73 s Done.\n    [Task  6/12]  Current/Best:   40.39/2129.02 GFLOPS | Progress: (1088/2000) | 1125.76 s Done.\n    [Task  7/12]  Current/Best: 4090.53/5007.02 GFLOPS | Progress: (800/2000) | 903.90 s Done.\n    [Task  8/12]  Current/Best:    4.78/1272.28 GFLOPS | Progress: (768/2000) | 749.14 s Done.\n    [Task  9/12]  Current/Best: 1391.45/2325.08 GFLOPS | Progress: (992/2000) | 1084.87 s Done.\n    [Task 10/12]  Current/Best: 1995.44/2383.59 GFLOPS | Progress: (864/2000) | 862.60 s Done.\n    [Task 11/12]  Current/Best: 4093.94/4899.80 GFLOPS | Progress: (224/2000) | 240.92 sterminate called without an active exception\n    [Task 11/12]  Current/Best: 3487.98/4909.91 GFLOPS | Progress: (480/2000) | 534.96 sterminate called without an active exception\n    [Task 11/12]  Current/Best: 4636.84/4912.17 GFLOPS | Progress: (1184/2000) | 1381.16 sterminate called without an active exception\n    [Task 11/12]  Current/Best:   50.12/4912.17 GFLOPS | Progress: (1344/2000) | 1602.81 s Done.\n    [Task 12/12]  Current/Best: 3581.31/4286.30 GFLOPS | Progress: (736/2000) | 943.52 s Done.\n    Compile...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 1.07 ms (0.05 ms)\n\n As a reference baseline, the time cost of MXNet + TensorRT on resnet-18 is 1.30ms. So we are a little faster.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653798,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below. It takes about 3 hours on a 32T AMD Ryzen Threadripper.\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/17]  Current/Best:   25.30/  39.12 GFLOPS | Progress: (992/1000) | 751.22 s Done.\n    [Task  2/17]  Current/Best:   40.70/  45.50 GFLOPS | Progress: (736/1000) | 545.46 s Done.\n    [Task  3/17]  Current/Best:   38.83/  42.35 GFLOPS | Progress: (992/1000) | 1549.85 s Done.\n    [Task  4/17]  Current/Best:   23.31/  31.02 GFLOPS | Progress: (640/1000) | 1059.31 s Done.\n    [Task  5/17]  Current/Best:    0.06/   2.34 GFLOPS | Progress: (544/1000) | 305.45 s Done.\n    [Task  6/17]  Current/Best:   10.97/  17.20 GFLOPS | Progress: (992/1000) | 1050.00 s Done.\n    [Task  7/17]  Current/Best:    8.98/  10.94 GFLOPS | Progress: (928/1000) | 421.36 s Done.\n    [Task  8/17]  Current/Best:    4.48/  14.86 GFLOPS | Progress: (704/1000) | 582.60 s Done.\n    [Task  9/17]  Current/Best:   10.30/  25.99 GFLOPS | Progress: (864/1000) | 899.85 s Done.\n    [Task 10/17]  Current/Best:   11.73/  12.52 GFLOPS | Progress: (608/1000) | 304.85 s Done.\n    [Task 11/17]  Current/Best:   15.26/  18.68 GFLOPS | Progress: (800/1000) | 747.52 s Done.\n    [Task 12/17]  Current/Best:   17.48/  26.71 GFLOPS | Progress: (1000/1000) | 1166.40 s Done.\n    [Task 13/17]  Current/Best:    0.96/  11.43 GFLOPS | Progress: (960/1000) | 611.65 s Done.\n    [Task 14/17]  Current/Best:   17.88/  20.22 GFLOPS | Progress: (672/1000) | 670.29 s Done.\n    [Task 15/17]  Current/Best:   11.62/  13.98 GFLOPS | Progress: (736/1000) | 449.25 s Done.\n    [Task 16/17]  Current/Best:   19.90/  23.83 GFLOPS | Progress: (608/1000) | 708.64 s Done.\n    [Task 17/17]  Current/Best:   17.98/  22.75 GFLOPS | Progress: (736/1000) | 1122.60 s Done.\n    Compile...\n    Upload...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 128.05 ms (7.74 ms)\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653799,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      226
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653799,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      141
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653799,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      225
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653799,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      100
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653802,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      349,
      350
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653802,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653802,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      331,
      332
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653802,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      180,
      181
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653805,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "###################################################################\n\n .. note:: How to set tuning options\n\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   which makes the tuning run longer.\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211
    ],
    "matched_text": "####################################################################"
  },
  {
    "satd_id": 6653805,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "###################################################################\n\n .. note:: How to set tuning options\n\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   which makes the tuning run longer.\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214
    ],
    "matched_text": "####################################################################"
  },
  {
    "satd_id": 6653808,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      218,
      219,
      220,
      221,
      222,
      223,
      224
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653808,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      133,
      134,
      135,
      136,
      137,
      138,
      139
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653808,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      217,
      218,
      219,
      220,
      221,
      222,
      223
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6653809,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653809,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653809,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653818,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653818,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653828,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      226
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653828,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      141
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653828,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      225
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653828,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      100
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6653831,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below.\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/12]  Current/Best:  598.05/2497.63 GFLOPS | Progress: (252/252) | 1357.95 s Done.\n    [Task  2/12]  Current/Best:  522.63/2279.24 GFLOPS | Progress: (784/784) | 3989.60 s Done.\n    [Task  3/12]  Current/Best:  447.33/1927.69 GFLOPS | Progress: (784/784) | 3869.14 s Done.\n    [Task  4/12]  Current/Best:  481.11/1912.34 GFLOPS | Progress: (672/672) | 3274.25 s Done.\n    [Task  5/12]  Current/Best:  414.09/1598.45 GFLOPS | Progress: (672/672) | 2720.78 s Done.\n    [Task  6/12]  Current/Best:  508.96/2273.20 GFLOPS | Progress: (768/768) | 3718.75 s Done.\n    [Task  7/12]  Current/Best:  469.14/1955.79 GFLOPS | Progress: (576/576) | 2665.67 s Done.\n    [Task  8/12]  Current/Best:  230.91/1658.97 GFLOPS | Progress: (576/576) | 2435.01 s Done.\n    [Task  9/12]  Current/Best:  487.75/2295.19 GFLOPS | Progress: (648/648) | 3009.95 s Done.\n    [Task 10/12]  Current/Best:  182.33/1734.45 GFLOPS | Progress: (360/360) | 1755.06 s Done.\n    [Task 11/12]  Current/Best:  372.18/1745.15 GFLOPS | Progress: (360/360) | 1684.50 s Done.\n    [Task 12/12]  Current/Best:  215.34/2271.11 GFLOPS | Progress: (400/400) | 2128.74 s Done.\n    Compile...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 3.16 ms (0.03 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653833,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_arm.py",
    "lines": [
      349,
      350
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653833,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_cuda.py",
    "lines": [
      238,
      239
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653833,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_mobile_gpu.py",
    "lines": [
      331,
      332
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653833,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      180,
      181
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6653839,
    "satd_repo": 70746484,
    "satd_sha": "129eb645008d9f990d8bc86e5da74783e5c21121",
    "satd_text": "################################################################\n Configure tensor tuning settings and create tasks\n -------------------------------------------------\n To get better kernel execution performance on x86 cpu,\n we need to change data layout of convolution kernel from\n \"NCHW\" to \"NCHWc\". To deal with this situation, we define\n conv2d_NCHWc operator in topi. We will tune this operator\n instead of plain conv2d.\n\n We will use local mode for tuning configuration. RPC tracker\n mode can be setup similarly to the approach in\n :ref:`tune_relay_arm` tutorial.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_relay_x86.py",
    "lines": [
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6653893,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": "ToDo: Some of the tensorflow operators internaly maintain\nexecution layers and its output name will the layer number along with\ngraph node name.eg: Node name:- 'Model/RNN/cell_0/RnnCell', but the\noutput name will be 'Model/RNN/cell_0/RnnCell:0'. In this case,\nthe digit has to be ignored.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      1279,
      1280,
      1281,
      1282,
      1283
    ],
    "matched_text": "                #ToDo: Some of the tensorflow operators internaly maintain"
  },
  {
    "satd_id": 6653894,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument, too-many-lines, len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument, too-many-lines, len-as-condition"
  },
  {
    "satd_id": 6653910,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6653910,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tensorflow.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument, too-many-lines, len-as-condition"
  },
  {
    "satd_id": 6653910,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6653910,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6653959,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " Human readable text for labels",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/from_tensorflow.py",
    "lines": [
      45
    ],
    "matched_text": "# Human readable text for labels"
  },
  {
    "satd_id": 6653959,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": " Human readable text for labels",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/nnvm/from_tensorflow.py",
    "lines": [
      54
    ],
    "matched_text": "# Human readable text for labels"
  },
  {
    "satd_id": 6653966,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": "#####################################################################\n Tutorials\n ---------\n Please refer docs/frontend/tensorflow.md for more details for various models\n from tensorflow.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/frontend/from_tensorflow.py",
    "lines": [
      32,
      33,
      34,
      35,
      36
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653977,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": "#####################################################################\n Process the output\n ------------------\n Process the model output to human readable text for InceptionV1.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/frontend/from_tensorflow.py",
    "lines": [
      143,
      144,
      145,
      146
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6653977,
    "satd_repo": 70746484,
    "satd_sha": "2f859d712dc11d712c513674fc6c5d35349cf1e9",
    "satd_text": "#####################################################################\n Process the output\n ------------------\n Process the model output to human readable text for InceptionV1.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/nnvm/from_tensorflow.py",
    "lines": [
      152,
      153,
      154,
      155
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6654045,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " FIXME",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/frontend/tests/callback/src/bin/string.rs",
    "lines": [
      9
    ],
    "matched_text": "// FIXME"
  },
  {
    "satd_id": 6654045,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " FIXME",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/runtime/src/graph.rs",
    "lines": [
      299
    ],
    "matched_text": "                // FIXME: for no-copy, need setup_op_execs to not capture tensor ptr"
  },
  {
    "satd_id": 6654045,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " FIXME",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/src/runtime/graph.rs",
    "lines": [
      297
    ],
    "matched_text": "        // FIXME: for no-copy, need setup_op_execs to not capture tensor ptr"
  },
  {
    "satd_id": 6654064,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " TODO: consider `new_with_params` to avoid ever allocating",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/runtime/src/graph.rs",
    "lines": [
      294
    ],
    "matched_text": "            // TODO: consider `new_with_params` to avoid ever allocating"
  },
  {
    "satd_id": 6654064,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " TODO: consider `new_with_params` to avoid ever allocating",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/src/runtime/graph.rs",
    "lines": [
      292
    ],
    "matched_text": "      // TODO: consider `new_with_params` to avoid ever allocating"
  },
  {
    "satd_id": 6654072,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " wasm doesn't support threads yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "rust/runtime/src/threading.rs",
    "lines": [
      220
    ],
    "matched_text": "    0 // wasm doesn't support threads yet"
  },
  {
    "satd_id": 6654072,
    "satd_repo": 70746484,
    "satd_sha": "e2970b226e39ba196b5ced5fe98c604c0620f939",
    "satd_text": " wasm doesn't support threads yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "rust/src/runtime/threading.rs",
    "lines": [
      221
    ],
    "matched_text": "  0 // wasm doesn't support threads yet"
  },
  {
    "satd_id": 6654086,
    "satd_repo": 70746484,
    "satd_sha": "b3b3d28a1870f2748a494ae531ae0f9afd70ef05",
    "satd_text": " pylint: disable=import-self, invalid-name, line-too-long, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe2.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, line-too-long, unused-argument"
  },
  {
    "satd_id": 6654093,
    "satd_repo": 70746484,
    "satd_sha": "b3b3d28a1870f2748a494ae531ae0f9afd70ef05",
    "satd_text": " Add a sanitizing step to convert all byte strings in args to strings",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe2.py",
    "lines": [
      530
    ],
    "matched_text": "            # Add a sanitizing step to convert all byte strings in args to strings"
  },
  {
    "satd_id": 6654100,
    "satd_repo": 70746484,
    "satd_sha": "b3b3d28a1870f2748a494ae531ae0f9afd70ef05",
    "satd_text": " TODO(zhreshold): remove hard coded infershape",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/caffe2.py",
    "lines": [
      155
    ],
    "matched_text": "            # TODO(zhreshold): remove hard coded infershape"
  },
  {
    "satd_id": 6654109,
    "satd_repo": 70746484,
    "satd_sha": "b3b3d28a1870f2748a494ae531ae0f9afd70ef05",
    "satd_text": " coding: utf-8\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/caffe2/model_zoo/squeezenet.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6654142,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_annotate.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654142,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654142,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654148,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_annotate.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654148,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654148,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654151,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_annotate.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654151,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/_quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654151,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/quantize/quantize.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654172,
    "satd_repo": 70746484,
    "satd_sha": "741b6bbe2973e45a537a1c8770220b53487c8fd4",
    "satd_text": " store low bit output back for VTA",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/quantize.cc",
    "lines": [
      93
    ],
    "matched_text": "    // store low bit output back for VTA"
  },
  {
    "satd_id": 6654207,
    "satd_repo": 70746484,
    "satd_sha": "881a78b3d6fc092e2c1477ecf37868382b501684",
    "satd_text": " pylint: disable=invalid-name, import-self, unused-argument, unused-variable, inconsistent-return-statements",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/coreml.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, import-self, unused-argument, unused-variable, inconsistent-return-statements"
  },
  {
    "satd_id": 6654238,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": " First we pick an error reporting strategy for each error.\n TODO(@jroesch): Spanned errors are currently not supported.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/error.cc",
    "lines": [
      25,
      26
    ],
    "matched_text": "  // First we pick an error reporting strategy for each error."
  },
  {
    "satd_id": 6654246,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": " Finally we report the error, currently we do so to LOG(FATAL),\n it may be good to instead report it to std::cout.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/error.cc",
    "lines": [
      110,
      111
    ],
    "matched_text": "  // Finally we report the error, currently we do so to LOG(FATAL),"
  },
  {
    "satd_id": 6654254,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": "! \\brief An abstraction around how errors are stored and reported.\n * Designed to be opaque to users, so we can support a robust and simpler\n * error reporting mode, as well as a more complex mode.\n *\n * The first mode is the most accurate: we report a Relay error at a specific\n * Span, and then render the error message directly against a textual representation\n * of the program, highlighting the exact lines in which it occurs. This mode is not\n * implemented in this PR and will not work.\n *\n * The second mode is a general-purpose mode, which attempts to annotate the program's\n * textual format with errors.\n *\n * The final mode represents the old mode, if we report an error that has no span or\n * expression, we will default to throwing an exception with a textual representation\n * of the error and no indication of where it occured in the original program.\n *\n * The latter mode is not ideal, and the goal of the new error reporting machinery is\n * to avoid ever reporting errors in this style.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/error.h",
    "lines": [
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71
    ],
    "matched_text": "/*! \\brief An abstraction around how errors are stored and reported."
  },
  {
    "satd_id": 6654263,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": " TODO(@jroesch): it would be nice if we would report resolution\n errors directly on the program.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      490,
      491
    ],
    "matched_text": "    // TODO(@jroesch): it would be nice if we would report resolution"
  },
  {
    "satd_id": 6654266,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": " NB(@jroesch): By adding the expression to the module we will\n type check it anyway; afterwards we can just recover type\n from the type-checked function to avoid doing unnecessary work.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      603,
      604,
      605
    ],
    "matched_text": "    // NB(@jroesch): By adding the expression to the module we will"
  },
  {
    "satd_id": 6654271,
    "satd_repo": 70746484,
    "satd_sha": "02631f67780a9175ac202e5564e25bc6d93393c2",
    "satd_text": " NB(@jroesch): we should probably pass location into the unifier to do better\n error reporting as well.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_solver.cc",
    "lines": [
      364,
      365
    ],
    "matched_text": "  // NB(@jroesch): we should probably pass location into the unifier to do better"
  },
  {
    "satd_id": 6654294,
    "satd_repo": 70746484,
    "satd_sha": "12aca82e7e49a8df260318c654d02994d062bb6f",
    "satd_text": " make sure we dont infinite loop.\n it is too large so we wont check for the exact program.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_to_anf.py",
    "lines": [
      70,
      71
    ],
    "matched_text": "# make sure we dont infinite loop."
  },
  {
    "satd_id": 6654305,
    "satd_repo": 70746484,
    "satd_sha": "10df78a5ecd9bb43e8884e9e15929ec9e7202c31",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6654317,
    "satd_repo": 70746484,
    "satd_sha": "10df78a5ecd9bb43e8884e9e15929ec9e7202c31",
    "satd_text": " TFLite is OC KH KW IC, we require OC IC KH kW",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/tflite.py",
    "lines": [
      414
    ],
    "matched_text": "            # TFLite is OC KH KW IC, we require OC IC KH kW"
  },
  {
    "satd_id": 6654327,
    "satd_repo": 70746484,
    "satd_sha": "10df78a5ecd9bb43e8884e9e15929ec9e7202c31",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/tflite/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6654352,
    "satd_repo": 70746484,
    "satd_sha": "d274e4b3d33e8038296dfddbb4d9d1de8e0735aa",
    "satd_text": " TODO: how to set spans for definitions?\n @spanify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/_parser.py",
    "lines": [
      376,
      377
    ],
    "matched_text": "    # TODO: how to set spans for definitions?"
  },
  {
    "satd_id": 6654357,
    "satd_repo": 70746484,
    "satd_sha": "d274e4b3d33e8038296dfddbb4d9d1de8e0735aa",
    "satd_text": " TODO: support a larger class of values than just Relay exprs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/_parser.py",
    "lines": [
      331
    ],
    "matched_text": "    # TODO: support a larger class of values than just Relay exprs"
  },
  {
    "satd_id": 6654380,
    "satd_repo": 70746484,
    "satd_sha": "6783d373760ad114209e2fcce167174907a97ae7",
    "satd_text": " Substitutes every type var in t with a corresponding incomplete type.\n This is a temporary measure to ensure type vars behave until\n generalization is properly implemented.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      128,
      129,
      130
    ],
    "matched_text": "  // Substitutes every type var in t with a corresponding incomplete type."
  },
  {
    "satd_id": 6654381,
    "satd_repo": 70746484,
    "satd_sha": "6783d373760ad114209e2fcce167174907a97ae7",
    "satd_text": " used to ensure we don't have free type vars hanging around\n (a temporary measure until we have proper generalization implemented)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      103,
      104
    ],
    "matched_text": "  // used to ensure we don't have free type vars hanging around"
  },
  {
    "satd_id": 6654424,
    "satd_repo": 70746484,
    "satd_sha": "e0a20ad4a5b6f007f7182f12958e061c873a6396",
    "satd_text": " Substitutes every type var in t with a corresponding incomplete type.\n This is a temporary measure to ensure type vars behave until\n generalization is properly implemented.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      128,
      129,
      130
    ],
    "matched_text": "  // Substitutes every type var in t with a corresponding incomplete type."
  },
  {
    "satd_id": 6654425,
    "satd_repo": 70746484,
    "satd_sha": "e0a20ad4a5b6f007f7182f12958e061c873a6396",
    "satd_text": " used to ensure we don't have free type vars hanging around\n (a temporary measure until we have proper generalization implemented)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      103,
      104
    ],
    "matched_text": "  // used to ensure we don't have free type vars hanging around"
  },
  {
    "satd_id": 6654455,
    "satd_repo": 70746484,
    "satd_sha": "ac54577f0b7c9e0d4caf56667c3eecfb55a317c5",
    "satd_text": " TODO(@were): Eliminate loop rebase in script parser and move the burden here\n Gather rebased variables",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/hybrid_op.cc",
    "lines": [
      434,
      435
    ],
    "matched_text": "  // TODO(@were): Eliminate loop rebase in script parser and move the burden here"
  },
  {
    "satd_id": 6654456,
    "satd_repo": 70746484,
    "satd_sha": "ac54577f0b7c9e0d4caf56667c3eecfb55a317c5",
    "satd_text": " TODO(@were): Handle imperfect loops",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/hybrid_op.cc",
    "lines": [
      266
    ],
    "matched_text": "    // TODO(@were): Handle imperfect loops"
  },
  {
    "satd_id": 6654458,
    "satd_repo": 70746484,
    "satd_sha": "ac54577f0b7c9e0d4caf56667c3eecfb55a317c5",
    "satd_text": " TODO(@were): Add attribute inject here and remove it from hybrid parser.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/hybrid_op.cc",
    "lines": [
      121
    ],
    "matched_text": "  // TODO(@were): Add attribute inject here and remove it from hybrid parser."
  },
  {
    "satd_id": 6654468,
    "satd_repo": 70746484,
    "satd_sha": "b692289e367a30fb2facb7125d30dd43c912eaa7",
    "satd_text": " TODO(M.K.): stricter checking",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/gradient.cc",
    "lines": [
      53
    ],
    "matched_text": "  // TODO(M.K.): stricter checking"
  },
  {
    "satd_id": 6654471,
    "satd_repo": 70746484,
    "satd_sha": "b692289e367a30fb2facb7125d30dd43c912eaa7",
    "satd_text": " must be a variable to avoid duplication",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/gradient.cc",
    "lines": [
      89
    ],
    "matched_text": "  mutable Expr reverse;  // must be a variable to avoid duplication"
  },
  {
    "satd_id": 6654488,
    "satd_repo": 70746484,
    "satd_sha": "a9bd5593a35ce4717f00cc71c2377f745284df5a",
    "satd_text": " For small batch sizes, don't pack weight into cache-friendly layout\n because of overhead in packing and limited reuse from batch dimension\n TODO(icemelon9): use a more systematic way to determine which schedule to use",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/nn.py",
    "lines": [
      46,
      47,
      48
    ],
    "matched_text": "    # For small batch sizes, don't pack weight into cache-friendly layout"
  },
  {
    "satd_id": 6654489,
    "satd_repo": 70746484,
    "satd_sha": "a9bd5593a35ce4717f00cc71c2377f745284df5a",
    "satd_text": " pylint: disable=invalid-name,too-many-locals,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,too-many-locals,unused-variable"
  },
  {
    "satd_id": 6654511,
    "satd_repo": 70746484,
    "satd_sha": "09236bf6481ba3deaf7cb434c4930604580fac82",
    "satd_text": "!\n * Copyright (c) 2018 by Contributors\n *\n * \\file deivce_annotation.cc\n * \\brief Passes to rewrite annotated program and retrieve the device allocation\n * of expression.\n *\n * The following passes are performed:\n *  1. Validate the unnecessary and redundant annotation.\n *  2. Rewrite the annotated program and insert data copy operators.\n *  3. Collect the device allocation of each expression.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/device_annotation.cc",
    "lines": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6654514,
    "satd_repo": 70746484,
    "satd_sha": "09236bf6481ba3deaf7cb434c4930604580fac82",
    "satd_text": " TODO(zhiics) Skip annotation of tuple node for now.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/device_annotation.cc",
    "lines": [
      367
    ],
    "matched_text": "      // TODO(zhiics) Skip annotation of tuple node for now."
  },
  {
    "satd_id": 6654519,
    "satd_repo": 70746484,
    "satd_sha": "09236bf6481ba3deaf7cb434c4930604580fac82",
    "satd_text": " TODO(zhiics) Skip annotation of function node for now.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/device_annotation.cc",
    "lines": [
      346
    ],
    "matched_text": "      // TODO(zhiics) Skip annotation of function node for now."
  },
  {
    "satd_id": 6654533,
    "satd_repo": 70746484,
    "satd_sha": "30a5a6007de3d3ab2a4f7fb6ed637021a42f1322",
    "satd_text": " pylint: disable=invalid-name, import-self, len-as-condition, unused-argument, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, import-self, len-as-condition, unused-argument, too-many-lines"
  },
  {
    "satd_id": 6654538,
    "satd_repo": 70746484,
    "satd_sha": "30a5a6007de3d3ab2a4f7fb6ed637021a42f1322",
    "satd_text": " TODO(zhreshold): support dropout mask?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      1048
    ],
    "matched_text": "            # TODO(zhreshold): support dropout mask?"
  },
  {
    "satd_id": 6654541,
    "satd_repo": 70746484,
    "satd_sha": "30a5a6007de3d3ab2a4f7fb6ed637021a42f1322",
    "satd_text": " TODO(zhreshold): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      107
    ],
    "matched_text": "            # TODO(zhreshold): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6654555,
    "satd_repo": 70746484,
    "satd_sha": "30a5a6007de3d3ab2a4f7fb6ed637021a42f1322",
    "satd_text": " TODO(zhreshold): remove hard coded infershape",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      87
    ],
    "matched_text": "            # TODO(zhreshold): remove hard coded infershape"
  },
  {
    "satd_id": 6654565,
    "satd_repo": 70746484,
    "satd_sha": "30a5a6007de3d3ab2a4f7fb6ed637021a42f1322",
    "satd_text": " TODO(zhreshold): 'spatial' is not properly handled here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/onnx.py",
    "lines": [
      139
    ],
    "matched_text": "        # TODO(zhreshold): 'spatial' is not properly handled here."
  },
  {
    "satd_id": 6654596,
    "satd_repo": 70746484,
    "satd_sha": "547a0913f69c29deb89b38098880d76fbc563f49",
    "satd_text": " Note that here we assume that the identity element is indeed identity. Without this\n assumption we would have to perform a single iteration of the loop, i.e. use\n `(*r->combiner.get())(r->combiner->identity_element, r->source)[r->value_index]`\n instead of `r->source[r->value_index]`. The former may be more difficult to simplify.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      879,
      880,
      881,
      882
    ],
    "matched_text": "    // Note that here we assume that the identity element is indeed identity. Without this"
  },
  {
    "satd_id": 6654597,
    "satd_repo": 70746484,
    "satd_sha": "547a0913f69c29deb89b38098880d76fbc563f49",
    "satd_text": " Simplify the combiner of the reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      900
    ],
    "matched_text": "    // Simplify the combiner of the reduction"
  },
  {
    "satd_id": 6654601,
    "satd_repo": 70746484,
    "satd_sha": "547a0913f69c29deb89b38098880d76fbc563f49",
    "satd_text": "!\n * \\brief Simplify just the combiner of the given reduce node.\n *\n *  This function applies Simplify to the components of the top reduction's\n *  combiner, but not to the source or condition of the reduction.\n *  It also removes all components which are not used to\n *  compute the resulting value (the value_index-th value).\n *\n *  If \\p expr is not a reduction node, it is left unchanged.\n *\n * \\param expr The expression to be simplifed.\n * \\return Simplified expression.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      784,
      785,
      786,
      787,
      788,
      789,
      790,
      791,
      792,
      793,
      794,
      795,
      796
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6654603,
    "satd_repo": 70746484,
    "satd_sha": "547a0913f69c29deb89b38098880d76fbc563f49",
    "satd_text": " We simplify the result and identity, but not the source",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      851
    ],
    "matched_text": "      // We simplify the result and identity, but not the source"
  },
  {
    "satd_id": 6654605,
    "satd_repo": 70746484,
    "satd_sha": "547a0913f69c29deb89b38098880d76fbc563f49",
    "satd_text": " First simplify the results",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      803
    ],
    "matched_text": "  // First simplify the results"
  },
  {
    "satd_id": 6654670,
    "satd_repo": 70746484,
    "satd_sha": "a7d39d7b022c2282a7b9c99647b20d05ec7fb5df",
    "satd_text": " Since Keras allows creating multiple layers from the same name instance,\n we append node index to the expr name to make it unique.\n The one exception is InputLayer. Changing input variable names after conversion\n would confuse users, so we should keep them as far as possible. Fortunately,\n they are named uniquely to input_1, input_2, input_3... by default.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/keras.py",
    "lines": [
      678,
      679,
      680,
      681,
      682
    ],
    "matched_text": "                # Since Keras allows creating multiple layers from the same name instance,"
  },
  {
    "satd_id": 6654683,
    "satd_repo": 70746484,
    "satd_sha": "a7d39d7b022c2282a7b9c99647b20d05ec7fb5df",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/keras.py",
    "lines": [
      531
    ],
    "matched_text": "def _default_skip(inexpr, keras_layer, _): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654706,
    "satd_repo": 70746484,
    "satd_sha": "a5eb4451b50703e28f6d77de2615b41b6f82fba2",
    "satd_text": " (17+48*x)/16 is not simplifiable for arbitrary x because when 17+48*x<0\n (17+48*x)/16 != 1+3*x",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_simplify.py",
    "lines": [
      35,
      36
    ],
    "matched_text": "    # (17+48*x)/16 is not simplifiable for arbitrary x because when 17+48*x<0"
  },
  {
    "satd_id": 6654707,
    "satd_repo": 70746484,
    "satd_sha": "a5eb4451b50703e28f6d77de2615b41b6f82fba2",
    "satd_text": " Trying expressions that are not simplifiable for any values of the variables",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_simplify.py",
    "lines": [
      43
    ],
    "matched_text": "    # Trying expressions that are not simplifiable for any values of the variables"
  },
  {
    "satd_id": 6654708,
    "satd_repo": 70746484,
    "satd_sha": "a5eb4451b50703e28f6d77de2615b41b6f82fba2",
    "satd_text": " However, when x >= 0, then 17+48*x >= 0 and (17+48*x)/16 can be simplified",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_arith_simplify.py",
    "lines": [
      40
    ],
    "matched_text": "    # However, when x >= 0, then 17+48*x >= 0 and (17+48*x)/16 can be simplified"
  },
  {
    "satd_id": 6654731,
    "satd_repo": 70746484,
    "satd_sha": "993fe12f2b8b45b01bc757d685686924c5e577fa",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/vision/_multibox.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6654736,
    "satd_repo": 70746484,
    "satd_sha": "a0062582c59c6c84aac43475bcecf96a0ca00401",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/nnvm_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6654736,
    "satd_repo": 70746484,
    "satd_sha": "a0062582c59c6c84aac43475bcecf96a0ca00401",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/relay_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6654736,
    "satd_repo": 70746484,
    "satd_sha": "a0062582c59c6c84aac43475bcecf96a0ca00401",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/topi_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name,unused-argument"
  },
  {
    "satd_id": 6654758,
    "satd_repo": 70746484,
    "satd_sha": "97ca4031f3ec0563baa3a974b2f39d651592fdea",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/frontend/mxnet/model_zoo/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6654770,
    "satd_repo": 70746484,
    "satd_sha": "97ca4031f3ec0563baa3a974b2f39d651592fdea",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/frontend/mxnet/model_zoo/resnet.py",
    "lines": [
      136
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6654805,
    "satd_repo": 70746484,
    "satd_sha": "cdd7f37fefb417caba51ee5ad0c4c849b777f744",
    "satd_text": " pylint: disable=invalid-name, unused-argument, missing-docstring, no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument, missing-docstring, no-else-return"
  },
  {
    "satd_id": 6654810,
    "satd_repo": 70746484,
    "satd_sha": "4bbf96e43c35dd4c8c10661ed1716333e62cefc5",
    "satd_text": " TODO:\n test_inplace()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/unittest/test_hybrid_script.py",
    "lines": [
      524,
      525
    ],
    "matched_text": "    # TODO:"
  },
  {
    "satd_id": 6654889,
    "satd_repo": 70746484,
    "satd_sha": "1cb602f168f6a6c9503c3ae22cdf3e2b633311f1",
    "satd_text": " TODO: Could some test cases for other targets",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "golang/src/array_test.go",
    "lines": [
      100
    ],
    "matched_text": "    // TODO: Could some test cases for other targets"
  },
  {
    "satd_id": 6654944,
    "satd_repo": 70746484,
    "satd_sha": "1cb602f168f6a6c9503c3ae22cdf3e2b633311f1",
    "satd_text": " FuncListGlobalNames is used to query global callable packed function names from TVM.\n\n returns slice of string holding function names and error if any.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "golang/src/function.go",
    "lines": [
      67,
      68,
      69
    ],
    "matched_text": "// FuncListGlobalNames is used to query global callable packed function names from TVM."
  },
  {
    "satd_id": 6655145,
    "satd_repo": 70746484,
    "satd_sha": "58398d38620fc984a3f8143f68b2b5de4b8dcb1e",
    "satd_text": " pylint: disable=no-else-return, unidiomatic-typecheck, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/to_relay.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=no-else-return, unidiomatic-typecheck, invalid-name, unused-argument"
  },
  {
    "satd_id": 6655153,
    "satd_repo": 70746484,
    "satd_sha": "58398d38620fc984a3f8143f68b2b5de4b8dcb1e",
    "satd_text": " TODO(@jroesch) export broadcast to?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/to_relay.py",
    "lines": [
      246
    ],
    "matched_text": "    # TODO(@jroesch) export broadcast to?"
  },
  {
    "satd_id": 6655162,
    "satd_repo": 70746484,
    "satd_sha": "58398d38620fc984a3f8143f68b2b5de4b8dcb1e",
    "satd_text": " TODO(@jroesch): need to modify compile engine to fix return_state=True",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/frontend/test_keras.py",
    "lines": [
      257
    ],
    "matched_text": "    # TODO(@jroesch): need to modify compile engine to fix return_state=True"
  },
  {
    "satd_id": 6655183,
    "satd_repo": 70746484,
    "satd_sha": "52e55baa47c08ceec52c67b8cd21b26b092860e2",
    "satd_text": " TODO(@jmp): Crashes if %x isn't annnotated.\n @nottest",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_parser.py",
    "lines": [
      271,
      272
    ],
    "matched_text": "# TODO(@jmp): Crashes if %x isn't annnotated."
  },
  {
    "satd_id": 6655200,
    "satd_repo": 70746484,
    "satd_sha": "d3bc59d20b7344cbfd4178deab678f79dd92220e",
    "satd_text": " TODO(@jmp): Use https://stackoverflow.com/q/13889941\n to figure out how to get ANTLR4 to be more unhappy about syntax errors",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/_parser.py",
    "lines": [
      79,
      80
    ],
    "matched_text": "# TODO(@jmp): Use https://stackoverflow.com/q/13889941"
  },
  {
    "satd_id": 6655225,
    "satd_repo": 70746484,
    "satd_sha": "d3bc59d20b7344cbfd4178deab678f79dd92220e",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/__init__.py",
    "lines": [
      61
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655225,
    "satd_repo": 70746484,
    "satd_sha": "d3bc59d20b7344cbfd4178deab678f79dd92220e",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/_parser.py",
    "lines": [
      346
    ],
    "matched_text": "    # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655245,
    "satd_repo": 70746484,
    "satd_sha": "d3bc59d20b7344cbfd4178deab678f79dd92220e",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/parser.py",
    "lines": [
      7
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6655260,
    "satd_repo": 70746484,
    "satd_sha": "2f1d709f9c073e2b0f0b0822fd4db1d53c389fa0",
    "satd_text": " Try to simplify index and bound.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/bound_checker.cc",
    "lines": [
      157
    ],
    "matched_text": "      // Try to simplify index and bound."
  },
  {
    "satd_id": 6655338,
    "satd_repo": 70746484,
    "satd_sha": "2a5656bf80cbed4fba64dd6cfdd035bd931fdfd9",
    "satd_text": " test broadcasting to lhs\n test broadcasting to rhs",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_pass_alter_op_layout.py",
    "lines": [
      267,
      268
    ],
    "matched_text": "        y = relay.nn.bias_add(y, bias) # test broadcasting to lhs"
  },
  {
    "satd_id": 6655338,
    "satd_repo": 70746484,
    "satd_sha": "2a5656bf80cbed4fba64dd6cfdd035bd931fdfd9",
    "satd_text": " test broadcasting to lhs\n test broadcasting to rhs",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "tests/python/relay/test_pass_alter_op_layout.py",
    "lines": [
      290,
      291
    ],
    "matched_text": "        y = relay.add(y, bias)          # test broadcasting to lhs"
  },
  {
    "satd_id": 6655339,
    "satd_repo": 70746484,
    "satd_sha": "2a5656bf80cbed4fba64dd6cfdd035bd931fdfd9",
    "satd_text": " a useless tuple, which will be eliminated",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_pass_alter_op_layout.py",
    "lines": [
      82
    ],
    "matched_text": "        # a useless tuple, which will be eliminated"
  },
  {
    "satd_id": 6655342,
    "satd_repo": 70746484,
    "satd_sha": "2a5656bf80cbed4fba64dd6cfdd035bd931fdfd9",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      2
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6655350,
    "satd_repo": 70746484,
    "satd_sha": "2a5656bf80cbed4fba64dd6cfdd035bd931fdfd9",
    "satd_text": " relay.nn.bias_add\n relay.nn.dense\n relay.leaky_relu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6655407,
    "satd_repo": 70746484,
    "satd_sha": "a259b737f5f7b7816959b3e549d4e1a0e4af1300",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      62
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6655407,
    "satd_repo": 70746484,
    "satd_sha": "a259b737f5f7b7816959b3e549d4e1a0e4af1300",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c_host.cc",
    "lines": [
      30
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6655424,
    "satd_repo": 70746484,
    "satd_sha": "55599b937ba69ef486241e599a6c44ae7c9ceb0b",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/image/_image.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6655427,
    "satd_repo": 70746484,
    "satd_sha": "7af48f1aa2d9420214a161cd2b2fc0fb1affaa79",
    "satd_text": "!\n   * \\brief The name of the variable,\n   *  this only acts as a hint to the user,\n   *  and is not used for equality.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/relay/base.h",
    "lines": [
      178,
      179,
      180,
      181,
      182
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6655448,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " List of missing operators that are present in NNVMv1\n TODO(tvm-tvm): support all operators.\n\n \"broadcast_to\",\n \"gather_nd\",\n \"_contrib_MultiBoxPrior\" : _rename(\"multibox_prior\"),\n \"_contrib_MultiBoxDetection\" : _contrib_multibox_detection,\n \"Crop\"          : _crop_like,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/frontend/mxnet.py",
    "lines": [
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461
    ],
    "matched_text": "    # List of missing operators that are present in NNVMv1"
  },
  {
    "satd_id": 6655473,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/__init__.py",
    "lines": [
      61
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655473,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/squeezenet.py",
    "lines": [
      19
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655473,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/mxnet/model_zoo/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655485,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/frontend/mxnet/model_zoo/resnet.py",
    "lines": [
      136
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6655501,
    "satd_repo": 70746484,
    "satd_sha": "d4f8d20e203877f8060006412e9f821e1abcbc63",
    "satd_text": " TODO(tqchen): renable concat as injective",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      276
    ],
    "matched_text": "# TODO(tqchen): renable concat as injective"
  },
  {
    "satd_id": 6655524,
    "satd_repo": 70746484,
    "satd_sha": "b1cf70a885ab4399312a908ade92109c8805eddc",
    "satd_text": " pylint: disable=invalid-name,missing-docstring,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/inception_v3.py",
    "lines": [
      11
    ],
    "matched_text": "# pylint: disable=invalid-name,missing-docstring,unused-argument"
  },
  {
    "satd_id": 6655528,
    "satd_repo": 70746484,
    "satd_sha": "b1cf70a885ab4399312a908ade92109c8805eddc",
    "satd_text": " coding: utf-8\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/squeezenet.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6655647,
    "satd_repo": 70746484,
    "satd_sha": "6edb3564a19bc2451cef2b61ae4a9affb8b70352",
    "satd_text": " leaky_relu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      199
    ],
    "matched_text": "# leaky_relu"
  },
  {
    "satd_id": 6655648,
    "satd_repo": 70746484,
    "satd_sha": "7761416f00aed73e93bf919036625fc3f7941cbf",
    "satd_text": " clean up remote files",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/measure/measure_methods.py",
    "lines": [
      471
    ],
    "matched_text": "        # clean up remote files"
  },
  {
    "satd_id": 6655650,
    "satd_repo": 70746484,
    "satd_sha": "7a01476a3b27e4535767123d525a34f02f69dcdc",
    "satd_text": "\n   * These two lines of codes replace tensors' reads & writes.\n   * This is the simplest way I (@were) can come up with to glue\n   * hybrid scripts to the structure of TVM op.\n   * NAMING CONFLICT: In hybrid script all the tensors have their own \n   * names specified by the users. However, In TVM op, all the output\n   * tensors' names are the same as the op's name. I cannot change the\n   * name to the op's name in the function body after the op node is\n   * formed, because:\n   *   1. Output tensors all point to the corresponding op node. \n   *   2. Once OpNode is wrapped up by an Operation node, it can\n   *      no longer be changed.\n   * This is a chiken-egg paradox. It is impossible to put the output\n   * tensors into the function body without forming the op node. The\n   * function body is immutable after the node is formed.\n   *\n   * Finally, I decided to resolve this issue \"lazily\". During the\n   * pipeline of compilation, these tensors will be replaced when\n   * forming the function body and passing to next stage of compilation.\n   * ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/hybrid_op.cc",
    "lines": [
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184
    ],
    "matched_text": "  /*"
  },
  {
    "satd_id": 6655667,
    "satd_repo": 70746484,
    "satd_sha": "ade98e149ff05df083e08bafaa75bd3b32cd722a",
    "satd_text": " pylint: disable=import-self, invalid-name, line-too-long, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/caffe2.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, line-too-long, unused-argument"
  },
  {
    "satd_id": 6655674,
    "satd_repo": 70746484,
    "satd_sha": "ade98e149ff05df083e08bafaa75bd3b32cd722a",
    "satd_text": " Add a sanitizing step to convert all byte strings in args to strings",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/caffe2.py",
    "lines": [
      429
    ],
    "matched_text": "            # Add a sanitizing step to convert all byte strings in args to strings"
  },
  {
    "satd_id": 6655689,
    "satd_repo": 70746484,
    "satd_sha": "ade98e149ff05df083e08bafaa75bd3b32cd722a",
    "satd_text": " coding: utf-8\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/caffe2/model_zoo/squeezenet.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6655703,
    "satd_repo": 70746484,
    "satd_sha": "59c70a0e5135de1a55ff2df99f654e13f2a3cef5",
    "satd_text": " Realizer class that realizes the expression\n Note that we can take benefit of its internal memo\n so that calling realize repeatively won't hurt perf.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/forward_rewrite.cc",
    "lines": [
      14,
      15,
      16
    ],
    "matched_text": "// Realizer class that realizes the expression"
  },
  {
    "satd_id": 6655724,
    "satd_repo": 70746484,
    "satd_sha": "629a293abe2a7f8520f3ad8ec944529b22a06970",
    "satd_text": " Pre-condition: can only be fused to parent which is injective or reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fuse_ops.cc",
    "lines": [
      600
    ],
    "matched_text": "        // Pre-condition: can only be fused to parent which is injective or reduction."
  },
  {
    "satd_id": 6655730,
    "satd_repo": 70746484,
    "satd_sha": "b252160451f7a43cf35fdf07efc02b2e2180a0d4",
    "satd_text": " TODO(tvm-team) recursively visit to replace Var",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/type_functor.cc",
    "lines": [
      67
    ],
    "matched_text": "  // TODO(tvm-team) recursively visit to replace Var"
  },
  {
    "satd_id": 6655737,
    "satd_repo": 70746484,
    "satd_sha": "b252160451f7a43cf35fdf07efc02b2e2180a0d4",
    "satd_text": " TODO(tvm-team) consider combine dead-code with constant folder.\n or make a more powerful partial evaluator.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_constant.cc",
    "lines": [
      16,
      17
    ],
    "matched_text": "// TODO(tvm-team) consider combine dead-code with constant folder."
  },
  {
    "satd_id": 6655755,
    "satd_repo": 70746484,
    "satd_sha": "1f2c815671353a4cb7f337eca71ba67d56b4d799",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_transform.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6655778,
    "satd_repo": 70746484,
    "satd_sha": "4369b7f6a881e477799fec4461aba553751cb574",
    "satd_text": "! \\brief additional comment function ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      696
    ],
    "matched_text": "  /*! \\brief additional comment function */"
  },
  {
    "satd_id": 6655834,
    "satd_repo": 70746484,
    "satd_sha": "4369b7f6a881e477799fec4461aba553751cb574",
    "satd_text": "! \\brief The internal arena for temporary space. ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fuse_ops.cc",
    "lines": [
      442
    ],
    "matched_text": "  /*! \\brief The internal arena for temporary space. */"
  },
  {
    "satd_id": 6655886,
    "satd_repo": 70746484,
    "satd_sha": "5712ea6b463e0f9aa4dd9d4def24b782b64806d8",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6655886,
    "satd_repo": 70746484,
    "satd_sha": "5712ea6b463e0f9aa4dd9d4def24b782b64806d8",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6655890,
    "satd_repo": 70746484,
    "satd_sha": "5712ea6b463e0f9aa4dd9d4def24b782b64806d8",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals, unused-argument"
  },
  {
    "satd_id": 6655903,
    "satd_repo": 70746484,
    "satd_sha": "5712ea6b463e0f9aa4dd9d4def24b782b64806d8",
    "satd_text": " TODO: add scale_shift implement for NCHWc and add test here",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_depthwise_conv2d.py",
    "lines": [
      268
    ],
    "matched_text": "            # TODO: add scale_shift implement for NCHWc and add test here"
  },
  {
    "satd_id": 6655937,
    "satd_repo": 70746484,
    "satd_sha": "3ee13fc5f23873a81a135e81c3e330039ba56b75",
    "satd_text": " TODO: specific tag?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docker/install/ubuntu_install_nnpack.sh",
    "lines": [
      6
    ],
    "matched_text": "# TODO: specific tag?"
  },
  {
    "satd_id": 6655948,
    "satd_repo": 70746484,
    "satd_sha": "9f441d817c7e3c5eeeb0078c5c60701a6e7ba33b",
    "satd_text": " TODO(leyuan, merrymercy, Huyuwei): fold depthwise topi into conv2d.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      78
    ],
    "matched_text": "                # TODO(leyuan, merrymercy, Huyuwei): fold depthwise topi into conv2d."
  },
  {
    "satd_id": 6655950,
    "satd_repo": 70746484,
    "satd_sha": "9f441d817c7e3c5eeeb0078c5c60701a6e7ba33b",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/op.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=unused-argument"
  },
  {
    "satd_id": 6655963,
    "satd_repo": 70746484,
    "satd_sha": "de02a20366e6086806447b96c2702a64ab8b2c8f",
    "satd_text": "#####################################################################\n Finally we compare the tensorize version with that :code:`numpy.dot` produces,\n ensure our implementation is correct.\n\n ---------------------------\n So far you have learned the basic idea of tensorize,\n now let's move one step forward to a more complicated case.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6655973,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " Injective operator, can always injectively map output axis to a single input axis.\n All injective operator can still be safely fused to injective and reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/op_attr_types.h",
    "lines": [
      26,
      27
    ],
    "matched_text": "  // Injective operator, can always injectively map output axis to a single input axis."
  },
  {
    "satd_id": 6655987,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO: We need to move this optimization code into the optimizer/pass manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/backend/interpreter.py",
    "lines": [
      160
    ],
    "matched_text": "        # TODO: We need to move this optimization code into the optimizer/pass manager"
  },
  {
    "satd_id": 6655987,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO: We need to move this optimization code into the optimizer/pass manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/interpreter.py",
    "lines": [
      107
    ],
    "matched_text": "        # TODO: We need to move this optimization code into the optimizer/pass manager"
  },
  {
    "satd_id": 6656056,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(@jroesch): Eta-expand and return in this case.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      176
    ],
    "matched_text": "    // TODO(@jroesch): Eta-expand and return in this case."
  },
  {
    "satd_id": 6656056,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(@jroesch): Eta-expand and return in this case.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/interpreter.cc",
    "lines": [
      230
    ],
    "matched_text": "    // TODO(@jroesch): Eta-expand and return in this case."
  },
  {
    "satd_id": 6656060,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TVM's calling convention is that the final argument is the output\n buffer. To preserve the illusion of being a functional language\n we need to allocate space for the output buffer based on the\n return type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      261,
      262,
      263,
      264
    ],
    "matched_text": "    // TVM's calling convention is that the final argument is the output"
  },
  {
    "satd_id": 6656060,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TVM's calling convention is that the final argument is the output\n buffer. To preserve the illusion of being a functional language\n we need to allocate space for the output buffer based on the\n return type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/interpreter.cc",
    "lines": [
      280,
      281,
      282,
      283
    ],
    "matched_text": "    // TVM's calling convention is that the final argument is the output"
  },
  {
    "satd_id": 6656068,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(@jroesch, @MK): Refactor code into helper from DCE.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/backend/interpreter.cc",
    "lines": [
      382
    ],
    "matched_text": "      // TODO(@jroesch, @MK): Refactor code into helper from DCE."
  },
  {
    "satd_id": 6656068,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(@jroesch, @MK): Refactor code into helper from DCE.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/interpreter.cc",
    "lines": [
      375
    ],
    "matched_text": "      // TODO(@jroesch, @MK): Refactor code into helper from DCE."
  },
  {
    "satd_id": 6656073,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(tqchen) add more types once the schedule register is fixed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_backend_interpreter.py",
    "lines": [
      11
    ],
    "matched_text": "    # TODO(tqchen) add more types once the schedule register is fixed."
  },
  {
    "satd_id": 6656097,
    "satd_repo": 70746484,
    "satd_sha": "c91ded32679d9c9eaecbe9dc058ebae79fcc4e9e",
    "satd_text": " TODO(tqchen) add more types once the schedule register is fixed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_backend_interpreter.py",
    "lines": [
      11
    ],
    "matched_text": "    # TODO(tqchen) add more types once the schedule register is fixed."
  },
  {
    "satd_id": 6656134,
    "satd_repo": 70746484,
    "satd_sha": "4e77eeb22f92265c266386a31692fe8092d92070",
    "satd_text": " TODO(@jroesch): this piece of code improperly uses type variables.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_op_level1.py",
    "lines": [
      49
    ],
    "matched_text": "        # TODO(@jroesch): this piece of code improperly uses type variables."
  },
  {
    "satd_id": 6656143,
    "satd_repo": 70746484,
    "satd_sha": "c8245e9a21d18e6bb980a6c603808b6fd732ff93",
    "satd_text": "#####################################################################\n Tutorials\n ---------\n Please refer docs/frontend/tensorflow.md for more details for various models\n from tensorflow.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6656146,
    "satd_repo": 70746484,
    "satd_sha": "0319f99d248e39521abd304690dcbc8d26d075c0",
    "satd_text": " We deliberately leak the Manager instance, to avoid leak sanitizers\n complaining about the entries in Manager::fmap being leaked at program\n exit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/registry.cc",
    "lines": [
      37,
      38,
      39
    ],
    "matched_text": "    // We deliberately leak the Manager instance, to avoid leak sanitizers"
  },
  {
    "satd_id": 6656147,
    "satd_repo": 70746484,
    "satd_sha": "add1f90e4c5c4701c3a55f26b7c5b4ac85283ff6",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/gather_nd_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6656195,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": "! \\brief Evaluate an expression using the interpreter producing a value.\n *\n * The resulting value can be passed to Python, making it easy to use\n * for testing and debugging.\n *\n * The interpreter interprets the program fragments not supported by the\n * TVM runtime, although the interpreter is naively implemented it uses\n * TVM operators for evaluating all operators.\n *\n * Our intent is that this will never be the most efficient implementation of\n * Relay's semantics, but a readable and clear one.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/interpreter.h",
    "lines": [
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41
    ],
    "matched_text": "/*! \\brief Evaluate an expression using the interpreter producing a value."
  },
  {
    "satd_id": 6656222,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " TODO: We need to move this optimization code into the optimizer/pass manager",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/interpreter.py",
    "lines": [
      119
    ],
    "matched_text": "    # TODO: We need to move this optimization code into the optimizer/pass manager"
  },
  {
    "satd_id": 6656223,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6656223,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6656233,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " TODO(@jroesch): Eta-expand and return in this case.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/interpreter.cc",
    "lines": [
      230
    ],
    "matched_text": "    // TODO(@jroesch): Eta-expand and return in this case."
  },
  {
    "satd_id": 6656235,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " TVM's calling convention is that the final argument is the output\n buffer. To preserve the illusion of being a functional language\n we need to allocate space for the output buffer based on the\n return type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/interpreter.cc",
    "lines": [
      280,
      281,
      282,
      283
    ],
    "matched_text": "    // TVM's calling convention is that the final argument is the output"
  },
  {
    "satd_id": 6656236,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " TODO(@jroesch): Is this the right place to place the tensor?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/interpreter.cc",
    "lines": [
      106
    ],
    "matched_text": "    // TODO(@jroesch): Is this the right place to place the tensor?"
  },
  {
    "satd_id": 6656246,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " TODO(@jroesch, @MK): Refactor code into helper from DCE.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/interpreter.cc",
    "lines": [
      375
    ],
    "matched_text": "      // TODO(@jroesch, @MK): Refactor code into helper from DCE."
  },
  {
    "satd_id": 6656267,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/__init__.py",
    "lines": [
      65
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6656268,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/_tensor.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6656268,
    "satd_repo": 70746484,
    "satd_sha": "10ea05e64508309e834f9b983037c96e3231e706",
    "satd_text": "pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/nn/_nn.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6656291,
    "satd_repo": 70746484,
    "satd_sha": "d5103bbcdfba4170f8ba16f4cb373869cade8cca",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n More general layout can be supported under the current framework.\n By using a unified layout transformation.\n We only need to change the Prep and Mutate function.\n\n only handle depthwise or full conv2d.\n TODO(tvm-team) handle grouped conv by reshape + bcast",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      485,
      486,
      487,
      488,
      489,
      490,
      491
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656291,
    "satd_repo": 70746484,
    "satd_sha": "d5103bbcdfba4170f8ba16f4cb373869cade8cca",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n More general layout can be supported under the current framework.\n By using a unified layout transformation.\n We only need to change the Prep and Mutate function.\n\n only handle depthwise or full conv2d.\n TODO(tvm-team) handle grouped conv by reshape + bcast",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      891,
      892,
      893,
      894,
      895,
      896,
      897
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656292,
    "satd_repo": 70746484,
    "satd_sha": "d5103bbcdfba4170f8ba16f4cb373869cade8cca",
    "satd_text": " NOTE we won't recursively call mutating on scale part.\n since there  won't be scale chance within scale part.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      859,
      860
    ],
    "matched_text": "    // NOTE we won't recursively call mutating on scale part."
  },
  {
    "satd_id": 6656293,
    "satd_repo": 70746484,
    "satd_sha": "d5103bbcdfba4170f8ba16f4cb373869cade8cca",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n TODO(tvm-team) support general data layout",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      515,
      516
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656293,
    "satd_repo": 70746484,
    "satd_sha": "d5103bbcdfba4170f8ba16f4cb373869cade8cca",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n TODO(tvm-team) support general data layout",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      926,
      927
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656325,
    "satd_repo": 70746484,
    "satd_sha": "b9e8826f829fd36a1d0796d2d7e543cd12326362",
    "satd_text": " disable dilation test since it is not supported by NCHW[x]c conv for now.\n verify_conv2d_NCHWc(1, 64, 56, 64, 3, 1, 1, dilation=2)",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "topi/tests/python/test_topi_conv2d_NCHWc.py",
    "lines": [
      140,
      141
    ],
    "matched_text": "    # disable dilation test since it is not supported by NCHW[x]c conv for now."
  },
  {
    "satd_id": 6656338,
    "satd_repo": 70746484,
    "satd_sha": "2fb1cc6eb5fa61cc9b99a8e8bcbb99775bec13e5",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6656350,
    "satd_repo": 70746484,
    "satd_sha": "05ea6018e555caaecff59577211bf88598b8f7b3",
    "satd_text": "!\n * \\brief namespace of fold scale axis\n *\n * Use namespace to reduce potential naming conflict.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      17,
      18,
      19,
      20,
      21
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6656367,
    "satd_repo": 70746484,
    "satd_sha": "05ea6018e555caaecff59577211bf88598b8f7b3",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n More general layout can be supported under the current framework.\n By using a unified layout transformation.\n We only need to change the Prep and Mutate function.\n\n only handle depthwise or full conv2d.\n TODO(tvm-team) handle grouped conv by reshape + bcast",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      482,
      483,
      484,
      485,
      486,
      487,
      488
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656368,
    "satd_repo": 70746484,
    "satd_sha": "05ea6018e555caaecff59577211bf88598b8f7b3",
    "satd_text": " For now, we only support simple pattern (no folded weight/data)\n TODO(tvm-team) support general data layout",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      513,
      514
    ],
    "matched_text": "  // For now, we only support simple pattern (no folded weight/data)"
  },
  {
    "satd_id": 6656370,
    "satd_repo": 70746484,
    "satd_sha": "05ea6018e555caaecff59577211bf88598b8f7b3",
    "satd_text": " TODO(tvm-team) allow same axes accumulation\n not as important because it is less common in nn.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      441,
      442
    ],
    "matched_text": "  // TODO(tvm-team) allow same axes accumulation"
  },
  {
    "satd_id": 6656374,
    "satd_repo": 70746484,
    "satd_sha": "05ea6018e555caaecff59577211bf88598b8f7b3",
    "satd_text": " TODO(tvm-team) support general data layout\n by transforming weight",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/fold_scale_axis.cc",
    "lines": [
      469,
      470
    ],
    "matched_text": "  // TODO(tvm-team) support general data layout"
  },
  {
    "satd_id": 6656451,
    "satd_repo": 70746484,
    "satd_sha": "c76fce9fd9e85affea03a8f89f07e3e5bf4ce196",
    "satd_text": " Hack for mobilenet, because there is less connectivity",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/init.py",
    "lines": [
      104
    ],
    "matched_text": "        # Hack for mobilenet, because there is less connectivity"
  },
  {
    "satd_id": 6656453,
    "satd_repo": 70746484,
    "satd_sha": "c76fce9fd9e85affea03a8f89f07e3e5bf4ce196",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet.py",
    "lines": [
      167
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6656454,
    "satd_repo": 70746484,
    "satd_sha": "c76fce9fd9e85affea03a8f89f07e3e5bf4ce196",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/testing/resnet.py",
    "lines": [
      25
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6656476,
    "satd_repo": 70746484,
    "satd_sha": "3a1bb8c7d4ce8ef5a0b15964a08bc583fab17459",
    "satd_text": " TODO make sure we can set span",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      71
    ],
    "matched_text": "    # TODO make sure we can set span"
  },
  {
    "satd_id": 6656493,
    "satd_repo": 70746484,
    "satd_sha": "81db03abb91e510de70f91d6a0f69d1355f0f247",
    "satd_text": " TODO(@jroesch): move to correct namespace?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/alpha_equal.cc",
    "lines": [
      368
    ],
    "matched_text": "// TODO(@jroesch): move to correct namespace?"
  },
  {
    "satd_id": 6656493,
    "satd_repo": 70746484,
    "satd_sha": "81db03abb91e510de70f91d6a0f69d1355f0f247",
    "satd_text": " TODO(@jroesch): move to correct namespace?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/alpha_eq.cc",
    "lines": [
      402
    ],
    "matched_text": "// TODO(@jroesch): move to correct namespace?"
  },
  {
    "satd_id": 6656538,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": " TODO(tqchen, M.K.): support generic call\n possibly through meta-data",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      276,
      277
    ],
    "matched_text": "    // TODO(tqchen, M.K.): support generic call"
  },
  {
    "satd_id": 6656540,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": "! \\brief The current indentation value ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      655
    ],
    "matched_text": "  /*! \\brief The current indentation value */"
  },
  {
    "satd_id": 6656545,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": " NOLINT(*)\n TODO(M.K.): add escape.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      568,
      569
    ],
    "matched_text": "  void PrintString(const std::string& value, std::ostream& os) { // NOLINT(*)"
  },
  {
    "satd_id": 6656568,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": "! \\brief counter of temporary variable ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      661
    ],
    "matched_text": "  /*! \\brief counter of temporary variable */"
  },
  {
    "satd_id": 6656574,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": "!\n   * \\brief Print the indent to the stream.\n   * \\param more_indent More indentation besides the current one.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      611,
      612,
      613,
      614
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6656579,
    "satd_repo": 70746484,
    "satd_sha": "9d44279eb9ab12c535c1b63d725c2202a57e4a15",
    "satd_text": " TODO(tqchen, M.K.) support generic function\n Possibly through meta-data",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/text_printer.cc",
    "lines": [
      473,
      474
    ],
    "matched_text": "    // TODO(tqchen, M.K.) support generic function"
  },
  {
    "satd_id": 6656607,
    "satd_repo": 70746484,
    "satd_sha": "dc996e451a3fee9dffefc31b652b6e85a72cb041",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_x86.py",
    "lines": [
      110
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6656609,
    "satd_repo": 70746484,
    "satd_sha": "dc996e451a3fee9dffefc31b652b6e85a72cb041",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below.\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/12]  Current/Best:  598.05/2497.63 GFLOPS | Progress: (252/252) | 1357.95 s Done.\n    [Task  2/12]  Current/Best:  522.63/2279.24 GFLOPS | Progress: (784/784) | 3989.60 s Done.\n    [Task  3/12]  Current/Best:  447.33/1927.69 GFLOPS | Progress: (784/784) | 3869.14 s Done.\n    [Task  4/12]  Current/Best:  481.11/1912.34 GFLOPS | Progress: (672/672) | 3274.25 s Done.\n    [Task  5/12]  Current/Best:  414.09/1598.45 GFLOPS | Progress: (672/672) | 2720.78 s Done.\n    [Task  6/12]  Current/Best:  508.96/2273.20 GFLOPS | Progress: (768/768) | 3718.75 s Done.\n    [Task  7/12]  Current/Best:  469.14/1955.79 GFLOPS | Progress: (576/576) | 2665.67 s Done.\n    [Task  8/12]  Current/Best:  230.91/1658.97 GFLOPS | Progress: (576/576) | 2435.01 s Done.\n    [Task  9/12]  Current/Best:  487.75/2295.19 GFLOPS | Progress: (648/648) | 3009.95 s Done.\n    [Task 10/12]  Current/Best:  182.33/1734.45 GFLOPS | Progress: (360/360) | 1755.06 s Done.\n    [Task 11/12]  Current/Best:  372.18/1745.15 GFLOPS | Progress: (360/360) | 1684.50 s Done.\n    [Task 12/12]  Current/Best:  215.34/2271.11 GFLOPS | Progress: (400/400) | 2128.74 s Done.\n    Compile...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 3.16 ms (0.03 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_x86.py",
    "lines": [
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6656611,
    "satd_repo": 70746484,
    "satd_sha": "dc996e451a3fee9dffefc31b652b6e85a72cb041",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_x86.py",
    "lines": [
      190,
      191
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6656612,
    "satd_repo": 70746484,
    "satd_sha": "dc996e451a3fee9dffefc31b652b6e85a72cb041",
    "satd_text": "################################################################\n Configure tensor tuning settings and create tasks\n -------------------------------------------------\n To get better kernel execution performance on x86 cpu,\n we need to change data layout of convolution kernel from\n \"NCHW\" to \"NCHWc\". To deal with this situation, we define\n conv2d_NCHWc operator in topi. We will tune this operator\n instead of plain conv2d.\n\n We will use local mode for tuning configuration. RPC tracker\n mode can be setup similarly to the approach in\n :ref:`tune_nnvm_arm` tutorial.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_x86.py",
    "lines": [
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6656632,
    "satd_repo": 70746484,
    "satd_sha": "dc996e451a3fee9dffefc31b652b6e85a72cb041",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-member",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-member"
  },
  {
    "satd_id": 6656642,
    "satd_repo": 70746484,
    "satd_sha": "d5d194494d4ac91ed9012d0187a233d5e567117f",
    "satd_text": "! \\brief Attributes for leaky relu operator ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/attrs/nn.h",
    "lines": [
      253
    ],
    "matched_text": "/*! \\brief Attributes for leaky relu operator */"
  },
  {
    "satd_id": 6656646,
    "satd_repo": 70746484,
    "satd_sha": "d5d194494d4ac91ed9012d0187a233d5e567117f",
    "satd_text": " Positional relay function to create leaky relu operator used by frontend FFI.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/nn/nn.cc",
    "lines": [
      88
    ],
    "matched_text": "// Positional relay function to create leaky relu operator used by frontend FFI."
  },
  {
    "satd_id": 6656692,
    "satd_repo": 70746484,
    "satd_sha": "0b4cc05050253c94f105aa10aca211360ad6acb1",
    "satd_text": "!\n   * \\brief Return the derived function annotation of this expression.\n   *\n   * \\return The function type annotation.\n   * \\note The function type annotation can contain IncompleteType.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/relay/expr.h",
    "lines": [
      211,
      212,
      213,
      214,
      215,
      216
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6656694,
    "satd_repo": 70746484,
    "satd_sha": "0b4cc05050253c94f105aa10aca211360ad6acb1",
    "satd_text": "!\n   * \\brief The name of the variable,\n   *  this only acts as a hint to the user,\n   *  and is not used for equality.\n  /*!\n   * \\brief type annotaion of the variable.\n   * This field records user provided type annotation of the Var.\n   * This field is optional and can be None.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6656753,
    "satd_repo": 70746484,
    "satd_sha": "6616355d37820df4767cd301576db267e890da5d",
    "satd_text": " TODO(M.K.)\n handle case where field type is not known",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      123,
      124
    ],
    "matched_text": "    // TODO(M.K.)"
  },
  {
    "satd_id": 6656754,
    "satd_repo": 70746484,
    "satd_sha": "6616355d37820df4767cd301576db267e890da5d",
    "satd_text": " todo: why is this not generalized?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_type_infer.py",
    "lines": [
      120
    ],
    "matched_text": "    # todo: why is this not generalized?"
  },
  {
    "satd_id": 6656799,
    "satd_repo": 70746484,
    "satd_sha": "f1d815cc7fb0b5e3fc5f4d4e05f6bf844c1ebab2",
    "satd_text": " specially handle bool, stored as Int(8)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/buffer.cc",
    "lines": [
      263
    ],
    "matched_text": "  // specially handle bool, stored as Int(8)"
  },
  {
    "satd_id": 6656799,
    "satd_repo": 70746484,
    "satd_sha": "f1d815cc7fb0b5e3fc5f4d4e05f6bf844c1ebab2",
    "satd_text": " specially handle bool, stored as Int(8)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/buffer.cc",
    "lines": [
      283
    ],
    "matched_text": "  // specially handle bool, stored as Int(8)"
  },
  {
    "satd_id": 6656800,
    "satd_repo": 70746484,
    "satd_sha": "f1d815cc7fb0b5e3fc5f4d4e05f6bf844c1ebab2",
    "satd_text": " specially handle bool, lower its storage\n type to be Int(8)(byte)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/storage_flatten.cc",
    "lines": [
      195,
      196
    ],
    "matched_text": "      // specially handle bool, lower its storage"
  },
  {
    "satd_id": 6656817,
    "satd_repo": 70746484,
    "satd_sha": "710af08739a493f08d8319df4d51b2b7aee12c7a",
    "satd_text": " sanity check for duplication",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/tensor/transform.cc",
    "lines": [
      191
    ],
    "matched_text": "      // sanity check for duplication"
  },
  {
    "satd_id": 6656836,
    "satd_repo": 70746484,
    "satd_sha": "3e527669614b031a9d8492fcaa4045ab49dd4baa",
    "satd_text": " make sure we dont infinite loop",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_dead_code_elimination.py",
    "lines": [
      39
    ],
    "matched_text": "# make sure we dont infinite loop"
  },
  {
    "satd_id": 6656839,
    "satd_repo": 70746484,
    "satd_sha": "3e527669614b031a9d8492fcaa4045ab49dd4baa",
    "satd_text": " bool is subclass of int",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/ir_builder.py",
    "lines": [
      19
    ],
    "matched_text": "    if isinstance(arg, bool): # bool is subclass of int"
  },
  {
    "satd_id": 6656842,
    "satd_repo": 70746484,
    "satd_sha": "d8394e873fe31bbdfcbdc80470a9f56e1a456407",
    "satd_text": "! todo: generate this using proc_macros",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "apps/sgx/enclave/src/lib.rs",
    "lines": [
      37
    ],
    "matched_text": "  //! todo: generate this using proc_macros"
  },
  {
    "satd_id": 6656863,
    "satd_repo": 70746484,
    "satd_sha": "5563b72bf76310de717b5e8ee64d9be4a1d8c92f",
    "satd_text": " TODO: consider `new_with_params` to avoid ever allocating",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "rust/src/runtime/graph.rs",
    "lines": [
      286
    ],
    "matched_text": "      // TODO: consider `new_with_params` to avoid ever allocating"
  },
  {
    "satd_id": 6656870,
    "satd_repo": 70746484,
    "satd_sha": "5563b72bf76310de717b5e8ee64d9be4a1d8c92f",
    "satd_text": " wasm doesn't support threads yet",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "rust/src/runtime/threading.rs",
    "lines": [
      218
    ],
    "matched_text": "  0 // wasm doesn't support threads yet"
  },
  {
    "satd_id": 6656892,
    "satd_repo": 70746484,
    "satd_sha": "b90620ea25c3cd1e3742ff5e684acca7da00c441",
    "satd_text": " Need to split reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensor_compute_op.cc",
    "lines": [
      316
    ],
    "matched_text": "    // Need to split reduction"
  },
  {
    "satd_id": 6656892,
    "satd_repo": 70746484,
    "satd_sha": "b90620ea25c3cd1e3742ff5e684acca7da00c441",
    "satd_text": " Need to split reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensorize.cc",
    "lines": [
      419
    ],
    "matched_text": "    // Need to split reduction"
  },
  {
    "satd_id": 6656982,
    "satd_repo": 70746484,
    "satd_sha": "d713d63d85b05ecef3e5d7932cc3d19915c32675",
    "satd_text": "cleanup existing tensors before dumping",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/debugger/debug_result.py",
    "lines": [
      99
    ],
    "matched_text": "        #cleanup existing tensors before dumping"
  },
  {
    "satd_id": 6657087,
    "satd_repo": 70746484,
    "satd_sha": "9afde69b849918b1aff3cde36cfe915aa02018d2",
    "satd_text": " early warning constant case.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_solver.cc",
    "lines": [
      22
    ],
    "matched_text": "    // early warning constant case."
  },
  {
    "satd_id": 6657088,
    "satd_repo": 70746484,
    "satd_sha": "147f3ad5266a4bfead617117edc05c5a48567318",
    "satd_text": "#####################################################################\n We compare the tensorize version with that :code:`numpy.dot` produces,\n ensure our implementation is correct.\n\n Reduce-update for Tensorize\n ------------------------------------\n Let's then move one step forward.\n Assume our accelerator could only multiply a vector by a square matrix,\n in which the vector size needs to be no larger than 16.\n Given such hardware constrain, now we need to split the reduce axis as following,\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/language/tensorize.py",
    "lines": [
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6657092,
    "satd_repo": 70746484,
    "satd_sha": "147f3ad5266a4bfead617117edc05c5a48567318",
    "satd_text": "#####################################################################\n Here :code:`tvm.decl_tensor_intrin` declares how to execute the computation :code:`c.op`.\n Our implementation simply takes the inputs and outputs,\n converts them to pointers and emit an external function call.\n Note that tensorization requires user to specify :code:`offset_factor`,\n with this information, TVM has knowledge of whether the data is aligned\n between the start address of the original data structure\n and the offset being passed to tensorize,\n so that it has chance to optimize with vectorized loading.\n We set the factor to 1 for simplification.\n\n Buffers are also declared for inputs and outputs, though this is not required,\n we benefit from the extra information provided by buffers. For example, we pass\n :code:`bb.strides[0]` as an argument to the external function :code:`gemv_update`.\n For now :code:`bb.strides[0] == l`,\n but later we will see how they can differ with more complicated schedules.\n\n Note that we use :code:`tvm.var(\"s1\")` as the first stride dimension for :code:`B`.\n If the strides can be inferred\n - in this case, TVM knows tensor B is compact thus the strides are :code:`[L, 1]` -\n such placeholder can be put to let TVM automatically bind the inferred value for us.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/language/tensorize.py",
    "lines": [
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6657096,
    "satd_repo": 70746484,
    "satd_sha": "147f3ad5266a4bfead617117edc05c5a48567318",
    "satd_text": "#####################################################################\n However, since the tensorize intrinsic now only covers a part of the reduce axis,\n instead of using one \"body\" function, TVM requires a :code:`reduce_reset` function,\n which will be invoked before the reduce for-loop, and a :code:`reduce_update` function,\n which defines the \"update\" computing strategy.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/language/tensorize.py",
    "lines": [
      182,
      183,
      184,
      185,
      186
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6657098,
    "satd_repo": 70746484,
    "satd_sha": "147f3ad5266a4bfead617117edc05c5a48567318",
    "satd_text": "#####################################################################\n Schedule the Matmul\n -------------------\n Now, suppose we have an accelerator that supports\n matrix-vector multiplication (GEMV) as a hardware primitive,\n which can take arbitrary size of reduce axis,\n but another axis needs to be no larger than 16.\n Thus we break down the matmul loops to make the innermost loops a (16x64) GEMV.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/language/tensorize.py",
    "lines": [
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6657140,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief Concatenate two documents",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      43
    ],
    "matched_text": "//! \\brief Concatenate two documents"
  },
  {
    "satd_id": 6657140,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief Concatenate two documents",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      244
    ],
    "matched_text": "//! \\brief Concatenate two documents"
  },
  {
    "satd_id": 6657147,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief Empty document",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      40
    ],
    "matched_text": "//! \\brief Empty document"
  },
  {
    "satd_id": 6657147,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief Empty document",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      239
    ],
    "matched_text": "//! \\brief Empty document"
  },
  {
    "satd_id": 6657149,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief RDoc represent rendered document.\n * all the high level detail on the document, such as indentation, alternative, has been removed.\n * there is only one single, straight forward way to print it.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.h",
    "lines": [
      321,
      322,
      323,
      324
    ],
    "matched_text": "/*! \\brief RDoc represent rendered document."
  },
  {
    "satd_id": 6657161,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "! \\brief RDoc represent rendered document.\n * all the high level detail on the document, such as indentation, choice, has been removed.\n * there is only one single, straight forward way to print it.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.h",
    "lines": [
      34,
      35,
      36,
      37
    ],
    "matched_text": "/*! \\brief RDoc represent rendered document."
  },
  {
    "satd_id": 6657163,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "!\n *  Copyright (c) 2018 by Contributors\n * \\file doc.h\n * \\brief A pretty printer DSL for constructing (Doc) and formatting (RDoc) documents.\n *        It is based heavily on Philip Wadler's \"A prettier printer.\"\n *        See https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf\n *        for more details.\n *\n * Since the original paper uses call by value for efficiency, everything doc function is maximally lazy.\n * You can probably yank speed by doing strict analysis and removing some Lazy (if this is bottleneck).\n ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/relay/ir/doc.h",
    "lines": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6657165,
    "satd_repo": 70746484,
    "satd_sha": "06108bed43acca941573c29a483341f762bf7961",
    "satd_text": "indent size",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/ir/doc.h",
    "lines": [
      432
    ],
    "matched_text": "typedef std::pair<size_t/*indent size*/, Doc> best_arg;"
  },
  {
    "satd_id": 6657251,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " page size 16 KB\n The page data type;",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/common/arena.h",
    "lines": [
      48,
      49
    ],
    "matched_text": "  // page size 16 KB"
  },
  {
    "satd_id": 6657268,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " TODO(tqchen)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/type_solver.cc",
    "lines": [
      22
    ],
    "matched_text": "    // TODO(tqchen)"
  },
  {
    "satd_id": 6657268,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " TODO(tqchen)",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/type_solver.cc",
    "lines": [
      129
    ],
    "matched_text": "  // TODO(tqchen): We should also count the number of in-complete types."
  },
  {
    "satd_id": 6657272,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " This criterion is not necessarily right for all the possible cases\n TODO(tqchen): We should also count the number of in-complete types.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_solver.cc",
    "lines": [
      128,
      129
    ],
    "matched_text": "  // This criterion is not necessarily right for all the possible cases"
  },
  {
    "satd_id": 6657332,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " TODO(tqchen, jroesch)\n tuple should be a constraint in the type solver\n to handle cases where the field type is not known.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      112,
      113,
      114
    ],
    "matched_text": "    // TODO(tqchen, jroesch)"
  },
  {
    "satd_id": 6657349,
    "satd_repo": 70746484,
    "satd_sha": "9319b6f90d14fb2629e20819bab339a8b7c4633f",
    "satd_text": " TODO(tqchen, jroesch): propagate span to solver",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      63
    ],
    "matched_text": "    // TODO(tqchen, jroesch): propagate span to solver"
  },
  {
    "satd_id": 6657368,
    "satd_repo": 70746484,
    "satd_sha": "be77cf1963292b018cdf241c595955ab4b3b5f44",
    "satd_text": " assert tp.span  # TODO allow us to set span",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      32
    ],
    "matched_text": "    # assert tp.span  # TODO allow us to set span"
  },
  {
    "satd_id": 6657369,
    "satd_repo": 70746484,
    "satd_sha": "72ad9a38518be5a9b935ad3c8b1a0fb6e242e435",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/check_targets.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument"
  },
  {
    "satd_id": 6657369,
    "satd_repo": 70746484,
    "satd_sha": "72ad9a38518be5a9b935ad3c8b1a0fb6e242e435",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument"
  },
  {
    "satd_id": 6657375,
    "satd_repo": 70746484,
    "satd_sha": "72ad9a38518be5a9b935ad3c8b1a0fb6e242e435",
    "satd_text": "pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/recipe/conv/test_conv_int8_intel.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable-msg=too-many-arguments, too-many-locals, assignment-from-no-return"
  },
  {
    "satd_id": 6657402,
    "satd_repo": 70746484,
    "satd_sha": "bde53033bdad08d87e0c40e128dd08ef523aecc3",
    "satd_text": " a is denormal.\n renormalize the significand and clear the leading bit, then insert\n the correct adjusted exponent in the destination type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "3rdparty/compiler-rt/builtin_fp16.h",
    "lines": [
      192,
      193,
      194
    ],
    "matched_text": "    // a is denormal."
  },
  {
    "satd_id": 6657447,
    "satd_repo": 70746484,
    "satd_sha": "7c3ec7dfc85a4a0d82e0564cc8848c02c01bce90",
    "satd_text": " Assign the pooled entries. A unified memory pool is used to simplifiy\n memory assignment for each node entry. The allocated memory on each device\n is mapped to this pool.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/graph/graph_runtime.cc",
    "lines": [
      530,
      531,
      532
    ],
    "matched_text": "  // Assign the pooled entries. A unified memory pool is used to simplifiy"
  },
  {
    "satd_id": 6657467,
    "satd_repo": 70746484,
    "satd_sha": "7c3ec7dfc85a4a0d82e0564cc8848c02c01bce90",
    "satd_text": " This for loop is very fast since there are usually only a couple of\n devices available on the same hardware.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/graph/graph_runtime.cc",
    "lines": [
      518,
      519
    ],
    "matched_text": "    // This for loop is very fast since there are usually only a couple of"
  },
  {
    "satd_id": 6657479,
    "satd_repo": 70746484,
    "satd_sha": "d1e048b79600cdcde47396648df7e065f0bd0607",
    "satd_text": " coding: utf-8\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/onnx/model_zoo/squeezenet.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6657492,
    "satd_repo": 70746484,
    "satd_sha": "ae5a28dba45aaddf541d2ec581d0d14234a24567",
    "satd_text": " for code reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/container.h",
    "lines": [
      488
    ],
    "matched_text": "  // for code reuse"
  },
  {
    "satd_id": 6657535,
    "satd_repo": 70746484,
    "satd_sha": "ae5a28dba45aaddf541d2ec581d0d14234a24567",
    "satd_text": "!\n* \\brief Macro to set IRFunctor dispatch in a global static field using an IRFunctorStaticRegistry.\n* Usage is exactly the same as TVM_STATIC_IR_FUNCTOR. Libraries should use this instead of\n* TVM_STATIC_IR_FUNCTOR.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/node/ir_functor.h",
    "lines": [
      244,
      245,
      246,
      247
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6657623,
    "satd_repo": 70746484,
    "satd_sha": "ae5a28dba45aaddf541d2ec581d0d14234a24567",
    "satd_text": " this is slow, usually caller always hold the result in a static variable.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/node.cc",
    "lines": [
      36
    ],
    "matched_text": "// this is slow, usually caller always hold the result in a static variable."
  },
  {
    "satd_id": 6657631,
    "satd_repo": 70746484,
    "satd_sha": "1e57ee6cf954ed4a1637833b8c4c5567059157e6",
    "satd_text": " shrink too large temporary buffer to avoid out of memory on some embedded devices",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/common/ring_buffer.h",
    "lines": [
      49
    ],
    "matched_text": "        // shrink too large temporary buffer to avoid out of memory on some embedded devices"
  },
  {
    "satd_id": 6657632,
    "satd_repo": 70746484,
    "satd_sha": "1e57ee6cf954ed4a1637833b8c4c5567059157e6",
    "satd_text": "    [Task  1/17]  Current/Best:   25.30/  39.12 GFLOPS | Progress: (992/1000) | 751.22 s Done.\n    [Task  2/17]  Current/Best:   40.70/  45.50 GFLOPS | Progress: (736/1000) | 545.46 s Done.\n    [Task  3/17]  Current/Best:   38.83/  42.35 GFLOPS | Progress: (992/1000) | 1549.85 s Done.\n    [Task  4/17]  Current/Best:   23.31/  31.02 GFLOPS | Progress: (640/1000) | 1059.31 s Done.\n    [Task  5/17]  Current/Best:    0.06/   2.34 GFLOPS | Progress: (544/1000) | 305.45 s Done.\n    [Task  6/17]  Current/Best:   10.97/  17.20 GFLOPS | Progress: (992/1000) | 1050.00 s Done.\n    [Task  7/17]  Current/Best:    8.98/  10.94 GFLOPS | Progress: (928/1000) | 421.36 s Done.\n    [Task  8/17]  Current/Best:    4.48/  14.86 GFLOPS | Progress: (704/1000) | 582.60 s Done.\n    [Task  9/17]  Current/Best:   10.30/  25.99 GFLOPS | Progress: (864/1000) | 899.85 s Done.\n    [Task 10/17]  Current/Best:   11.73/  12.52 GFLOPS | Progress: (608/1000) | 304.85 s Done.\n    [Task 11/17]  Current/Best:   15.26/  18.68 GFLOPS | Progress: (800/1000) | 747.52 s Done.\n    [Task 12/17]  Current/Best:   17.48/  26.71 GFLOPS | Progress: (1000/1000) | 1166.40 s Done.\n    [Task 13/17]  Current/Best:    0.96/  11.43 GFLOPS | Progress: (960/1000) | 611.65 s Done.\n    [Task 14/17]  Current/Best:   17.88/  20.22 GFLOPS | Progress: (672/1000) | 670.29 s Done.\n    [Task 15/17]  Current/Best:   11.62/  13.98 GFLOPS | Progress: (736/1000) | 449.25 s Done.\n    [Task 16/17]  Current/Best:   19.90/  23.83 GFLOPS | Progress: (608/1000) | 708.64 s Done.\n    [Task 17/17]  Current/Best:   17.98/  22.75 GFLOPS | Progress: (736/1000) | 1122.60 s Done.\n    Compile...\n    Upload...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 128.05 ms (7.74 ms)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379
    ],
    "matched_text": "#    [Task  1/17]  Current/Best:   25.30/  39.12 GFLOPS | Progress: (992/1000) | 751.22 s Done."
  },
  {
    "satd_id": 6657651,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@tqchen, @jroesch): can we move these semantics to HalideIR",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/base.h",
    "lines": [
      182
    ],
    "matched_text": "// TODO(@tqchen, @jroesch): can we move these semantics to HalideIR"
  },
  {
    "satd_id": 6657677,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): we should change spanned errors to report\n errors against the Environment, inverting control to error definition.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/relay/error.h",
    "lines": [
      23,
      24
    ],
    "matched_text": "// TODO(@jroesch): we should change spanned errors to report"
  },
  {
    "satd_id": 6657720,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": "! \\brief The name of the variable, this only acts as a hint to the user,\n   * and is not used for equality.\n   ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/relay/expr.h",
    "lines": [
      118,
      119,
      120
    ],
    "matched_text": "  /*! \\brief The name of the variable, this only acts as a hint to the user,"
  },
  {
    "satd_id": 6657863,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " We create a wrapper function for each operator in the\n python side to call into the positional _make.OpName function.\n\n We make this decision so that we can:\n - Have declare python docstring for each function\n - Enable keyword arguments easily\n - Not put too much burden on FFI to support complicated features\n   like default value and keyword arguments",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/relay/op/tensor.py",
    "lines": [
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13
    ],
    "matched_text": "# We create a wrapper function for each operator in the"
  },
  {
    "satd_id": 6657906,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " Collect the suffix dimensions since axis is zero.\n TODO(@jroesch): This is a demonstration of how\n to do varargs. It requires a little more work to\n fully type the behavior of concat.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/type_relations.cc",
    "lines": [
      148,
      149,
      150,
      151
    ],
    "matched_text": "    // Collect the suffix dimensions since axis is zero."
  },
  {
    "satd_id": 6657907,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch) what size value do we extract, 64bit or 32bit?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/op/type_relations.cc",
    "lines": [
      25
    ],
    "matched_text": "// TODO(@jroesch) what size value do we extract, 64bit or 32bit?"
  },
  {
    "satd_id": 6657918,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): move to correct namespace?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/alpha_eq.cc",
    "lines": [
      242
    ],
    "matched_text": "// TODO(@jroesch): move to correct namespace?"
  },
  {
    "satd_id": 6657955,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " This is a special case ... not sure if there is a better way\n to handle this.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      218,
      219
    ],
    "matched_text": "  // This is a special case ... not sure if there is a better way"
  },
  {
    "satd_id": 6657970,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): support polymorphism",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      228
    ],
    "matched_text": "  // TODO(@jroesch): support polymorphism"
  },
  {
    "satd_id": 6657971,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": "! \\brief A more efficient representation of the type relation\n * data needed for type checking.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      41,
      42,
      43
    ],
    "matched_text": "/*! \\brief A more efficient representation of the type relation"
  },
  {
    "satd_id": 6657972,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): put in a better namespace.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_infer.cc",
    "lines": [
      600
    ],
    "matched_text": "// TODO(@jroesch): put in a better namespace."
  },
  {
    "satd_id": 6657987,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): maybe we should recursively visit",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/type_visitor.h",
    "lines": [
      59
    ],
    "matched_text": "    // TODO(@jroesch): maybe we should recursively visit"
  },
  {
    "satd_id": 6657992,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): Restore this code when we finish kind checker.\n if (!check_kind(ret)) {\n std::stringstream ss;\n ss << \"Invalid Kinds in substituted type!\";\n ss << t << std::endl;\n ss << ret << std::endl;\n throw SubstitutionError(ss.str());\n }",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/unifier.cc",
    "lines": [
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181
    ],
    "matched_text": "  // TODO(@jroesch): Restore this code when we finish kind checker."
  },
  {
    "satd_id": 6657994,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): Restore this code when we finish kind checker.\n if (!check_kind(unified)) {\n throw UnificationError(\"Invalid kinds in unified type\");\n }",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/relay/pass/unifier.cc",
    "lines": [
      147,
      148,
      149,
      150
    ],
    "matched_text": "  // TODO(@jroesch): Restore this code when we finish kind checker."
  },
  {
    "satd_id": 6658024,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO: fill me in",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      38
    ],
    "matched_text": "    type_constraints = tvm.convert([])  # TODO: fill me in"
  },
  {
    "satd_id": 6658025,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO make sure we can set",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      47
    ],
    "matched_text": "    # TODO make sure we can set"
  },
  {
    "satd_id": 6658027,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " assert lv.span == None todo(@jroesch): what do we do about spans",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      71
    ],
    "matched_text": "    # assert lv.span == None todo(@jroesch): what do we do about spans"
  },
  {
    "satd_id": 6658027,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " assert lv.span == None todo(@jroesch): what do we do about spans",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      79
    ],
    "matched_text": "    # assert lv.span == None todo(@jroesch): what do we do about spans"
  },
  {
    "satd_id": 6658028,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO allow us to set span",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tests/python/relay/test_ir_nodes.py",
    "lines": [
      32
    ],
    "matched_text": "    tp.span  # TODO allow us to set span"
  },
  {
    "satd_id": 6658031,
    "satd_repo": 70746484,
    "satd_sha": "51fe00fb9015f2f80cfcd3ac0085115b303bf3e3",
    "satd_text": " TODO(@jroesch): need evaluator or new runtime\n to execute this.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/relay/test_tyck_eval_integration.py",
    "lines": [
      135,
      136
    ],
    "matched_text": "    # TODO(@jroesch): need evaluator or new runtime"
  },
  {
    "satd_id": 6658081,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " multiply 1000 for converting to millisecond",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/benchmark/arm_cpu_imagenet_bench.py",
    "lines": [
      57
    ],
    "matched_text": "    prof_res = np.array(ftimer().results) * 1000  # multiply 1000 for converting to millisecond"
  },
  {
    "satd_id": 6658081,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " multiply 1000 for converting to millisecond",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/benchmark/gpu_imagenet_bench.py",
    "lines": [
      60
    ],
    "matched_text": "        prof_res = np.array(ftimer().results) * 1000  # multiply 1000 for converting to millisecond"
  },
  {
    "satd_id": 6658081,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " multiply 1000 for converting to millisecond",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/benchmark/mobile_gpu_imagenet_bench.py",
    "lines": [
      56
    ],
    "matched_text": "    prof_res = np.array(ftimer().results) * 1000  # multiply 1000 for converting to millisecond"
  },
  {
    "satd_id": 6658097,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d_winograd.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6658097,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return"
  },
  {
    "satd_id": 6658097,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6658124,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      232
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658124,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      146
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658124,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      234
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658126,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      343,
      344
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658126,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      245,
      246
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658126,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      344,
      345
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658132,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      224,
      225,
      226,
      227,
      228,
      229,
      230
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658132,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      138,
      139,
      140,
      141,
      142,
      143,
      144
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658132,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      226,
      227,
      228,
      229,
      230,
      231,
      232
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658134,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658134,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658134,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658137,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "################################################################\n Scale up measurement by using multiple devices\n ----------------------------------------------\n\n If you have multiple devices, you can use all of them for measurement.\n TVM uses the RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 GPU cards, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190\n\n Then open another new terminal for the RPC server. We need to start one server\n for each dedicated device. We use a string key to distinguish the types of devices.\n You can pick a name you like.\n (Note: For rocm backend, there are some internal errors with the compiler,\n we need to add `--no-fork` to the argument list.)\n\n .. code-block:: bash\n\n     python -m tvm.exec.rpc_server --tracker=localhost:9190 --key=1080ti\n\n After registering devices, we can confirm it by querying rpc_tracker\n\n .. code-block:: bash\n\n   python -m tvm.exec.query_rpc_tracker --host=localhost --port=9190\n\n For example, if we have four 1080ti, two titanx and one gfx900, the output can be\n\n .. code-block:: bash\n\n    Queue Status\n    ----------------------------------\n    key          total  free  pending\n    ----------------------------------\n    1080ti       4      4     0\n    titanx       2      2     0\n    gfx900       1      1     0\n    ----------------------------------\n\n Finally, we need to change the tuning option to use RPCRunner. Use the code below\n to replace the corresponding part above.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6658145,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended. One sample output is listed below.\n It takes about 4 hours to get the following output on a 32T AMD Ryzen Threadripper.\n The tuning target is NVIDIA 1080 Ti.\n (You can see some errors during compilation. If the tuning is not stuck, it is okay.)\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/12]  Current/Best:  541.83/3570.66 GFLOPS | Progress: (960/2000) | 1001.31 s Done.\n    [Task  2/12]  Current/Best:    0.56/ 803.33 GFLOPS | Progress: (704/2000) | 608.08 s Done.\n    [Task  3/12]  Current/Best:  103.69/1141.25 GFLOPS | Progress: (768/2000) | 702.13 s Done.\n    [Task  4/12]  Current/Best: 2905.03/3925.15 GFLOPS | Progress: (864/2000) | 745.94 sterminate called without an active exception\n    [Task  4/12]  Current/Best: 2789.36/3925.15 GFLOPS | Progress: (1056/2000) | 929.40 s Done.\n    [Task  5/12]  Current/Best:   89.06/1076.24 GFLOPS | Progress: (704/2000) | 601.73 s Done.\n    [Task  6/12]  Current/Best:   40.39/2129.02 GFLOPS | Progress: (1088/2000) | 1125.76 s Done.\n    [Task  7/12]  Current/Best: 4090.53/5007.02 GFLOPS | Progress: (800/2000) | 903.90 s Done.\n    [Task  8/12]  Current/Best:    4.78/1272.28 GFLOPS | Progress: (768/2000) | 749.14 s Done.\n    [Task  9/12]  Current/Best: 1391.45/2325.08 GFLOPS | Progress: (992/2000) | 1084.87 s Done.\n    [Task 10/12]  Current/Best: 1995.44/2383.59 GFLOPS | Progress: (864/2000) | 862.60 s Done.\n    [Task 11/12]  Current/Best: 4093.94/4899.80 GFLOPS | Progress: (224/2000) | 240.92 sterminate called without an active exception\n    [Task 11/12]  Current/Best: 3487.98/4909.91 GFLOPS | Progress: (480/2000) | 534.96 sterminate called without an active exception\n    [Task 11/12]  Current/Best: 4636.84/4912.17 GFLOPS | Progress: (1184/2000) | 1381.16 sterminate called without an active exception\n    [Task 11/12]  Current/Best:   50.12/4912.17 GFLOPS | Progress: (1344/2000) | 1602.81 s Done.\n    [Task 12/12]  Current/Best: 3581.31/4286.30 GFLOPS | Progress: (736/2000) | 943.52 s Done.\n    Compile...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 1.07 ms (0.05 ms)\n\n As a reference baseline, the time cost of MXNet + TensorRT on resnet-18 is 1.30ms. So we are a little faster.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658153,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      232
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658153,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      146
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658153,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      234
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658156,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      343,
      344
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658156,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      245,
      246
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658156,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We do not run the tuning in our webpage server since it takes too long.\n Uncomment the following line to run it by yourself.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      344,
      345
    ],
    "matched_text": "# We do not run the tuning in our webpage server since it takes too long."
  },
  {
    "satd_id": 6658158,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "###################################################################\n\n .. note:: How to set tuning options\n\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   which makes the tuning run longer.\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221
    ],
    "matched_text": "####################################################################"
  },
  {
    "satd_id": 6658158,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "###################################################################\n\n .. note:: How to set tuning options\n\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   which makes the tuning run longer.\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223
    ],
    "matched_text": "####################################################################"
  },
  {
    "satd_id": 6658162,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      224,
      225,
      226,
      227,
      228,
      229,
      230
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658162,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      138,
      139,
      140,
      141,
      142,
      143,
      144
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658162,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "##################################################################\n Begin Tuning\n ------------\n Now we can extract tuning tasks from the network and begin tuning.\n Here, we provide a simple utility function to tune a list of tasks.\n This function is just an initial implementation which tunes them in sequential order.\n We will introduce a more sophisticated tuning scheduler in the future.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      226,
      227,
      228,
      229,
      230,
      231,
      232
    ],
    "matched_text": "###################################################################"
  },
  {
    "satd_id": 6658163,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to compile many programs and extract feature from them.\n So a high performance CPU is recommended.\n One sample output is listed below. It takes about 3 hours on a 32T AMD Ryzen Threadripper.\n\n .. code-block:: bash\n\n    Extract tasks...\n    Tuning...\n    [Task  1/17]  Current/Best:   12.22/  36.05 GFLOPS | Progress: (32/1000) | 42.12 s\n\n    (The following part is running, will update it later).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658164,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658164,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_cuda.py",
    "lines": [
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658164,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "#####################################################################\n\n .. note:: **Experiencing Difficulties?**\n\n   The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 GFLOPS\",\n   then there must be something wrong.\n\n   First, make sure you set the correct configuration of your device.\n   Then, you can print debug information by adding these lines in the beginning\n   of the script. It will print every measurement result, where you can find useful\n   error messages.\n\n   .. code-block:: python\n\n      import logging\n      logging.getLogger('autotvm').setLevel(logging.DEBUG)\n\n   Finally, always feel free to ask our community for help on https://discuss.tvm.ai",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658174,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6658174,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n\n To start an RPC tracker, run this command on the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_mobile_gpu.py",
    "lines": [
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6658191,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " a set to prevent print duplicated message",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/dispatcher.py",
    "lines": [
      292
    ],
    "matched_text": "        # a set to prevent print duplicated message"
  },
  {
    "satd_id": 6658208,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " TODO(lmzheng): A bug here, set unroll_explicit to False as workaround",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/depthwise_conv2d.py",
    "lines": [
      55
    ],
    "matched_text": "                # TODO(lmzheng): A bug here, set unroll_explicit to False as workaround"
  },
  {
    "satd_id": 6658228,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " --------------------\n To use the autotvm package in tvm, we need to install some extra dependencies.\n To make tvm run faster during tuning, it is recommended to use cython\n to the tracker, and run 10 measurements in parallel, accelerating the tuning process.\n To start an RPC tracker, run this command on the host machine. The tracker is\n   Then you have already registred your device. During tuning, you have to go to developer option\n   and enable \"Keep screen awake during changing\" and charge your phone to make it stable.\n Before tuning, we should apply some configurations. Here I use an RK3399 board\n   In general, the default values provided here work well.\n   If you have enough time budget, you can set :code:`n_trial`, :code:`early_stopping` larger,\n   If your device runs very slow or your conv2d operators have many GFLOPs, considering to\n   set timeout larger.\n Here, we provide a simple utility function to tune a list of tasks.\n We will introduce a more sophisticated tuning scheduler in the future.\n Finally, we launch tuning jobs and evaluate the end-to-end performance.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6658231,
    "satd_repo": 70746484,
    "satd_sha": "a57b5493dfd3df93e2244c91a8244c76c7e0da6d",
    "satd_text": " We can fuse :code:`topi.nn.conv2d` and :code:`topi.nn.relu` together.\n .. note::\n\n    TOPI functions are all generic functions. They have different implementations\n    for different backends to optimize for performance.\n    For each backend, it is necessary to call them under a target scope for both\n    compute declaration and schedule. TVM will choose the right function to call with\n    the target information.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6658232,
    "satd_repo": 70746484,
    "satd_sha": "d87c94d475e5eac3b98dbdf1ac7811985905f6c6",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/sparse.py",
    "lines": [
      79
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6658251,
    "satd_repo": 70746484,
    "satd_sha": "cda8cb249204796f84c5cd953b5f4fe878c9d9a5",
    "satd_text": " TODO(FrozenGene): Currently, we don't support conv2d's groups != in channels.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "nnvm/src/compiler/fold_scale_axis.cc",
    "lines": [
      506
    ],
    "matched_text": "    // TODO(FrozenGene): Currently, we don't support conv2d's groups != in channels."
  },
  {
    "satd_id": 6658260,
    "satd_repo": 70746484,
    "satd_sha": "cda8cb249204796f84c5cd953b5f4fe878c9d9a5",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      9
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6658260,
    "satd_repo": 70746484,
    "satd_sha": "cda8cb249204796f84c5cd953b5f4fe878c9d9a5",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      54
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6658260,
    "satd_repo": 70746484,
    "satd_sha": "cda8cb249204796f84c5cd953b5f4fe878c9d9a5",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      101
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6658266,
    "satd_repo": 70746484,
    "satd_sha": "7c4dd0bda75a14053f91ae4fa234d3c33f8b7fff",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/hls/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6658301,
    "satd_repo": 70746484,
    "satd_sha": "0edf87e8548c9e96aa82278afdb6cca93f33cad6",
    "satd_text": " Sometimes grads do not depend on head_grads, so head_grads does not appear\n in the variable list; adding it manually prevents this, making things a bit easier",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/check_computation.py",
    "lines": [
      369,
      370
    ],
    "matched_text": "            # Sometimes grads do not depend on head_grads, so head_grads does not appear"
  },
  {
    "satd_id": 6658333,
    "satd_repo": 70746484,
    "satd_sha": "0edf87e8548c9e96aa82278afdb6cca93f33cad6",
    "satd_text": " specifying variable attributes on variable creation\n (in this case type codes must be used)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_top_level1.py",
    "lines": [
      53,
      54
    ],
    "matched_text": "    # specifying variable attributes on variable creation"
  },
  {
    "satd_id": 6658341,
    "satd_repo": 70746484,
    "satd_sha": "7afe6ba84e73205265150c1b91aa332a4e9aab01",
    "satd_text": " Evaluate running time. Here we choose a large repeat number (400) to reduce the noise",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_conv2d_cuda.py",
    "lines": [
      209
    ],
    "matched_text": "# Evaluate running time. Here we choose a large repeat number (400) to reduce the noise"
  },
  {
    "satd_id": 6658386,
    "satd_repo": 70746484,
    "satd_sha": "5d533ec99b2b6b53f9abfa2f8844a82f180043de",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6658386,
    "satd_repo": 70746484,
    "satd_sha": "5d533ec99b2b6b53f9abfa2f8844a82f180043de",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6658387,
    "satd_repo": 70746484,
    "satd_sha": "5d533ec99b2b6b53f9abfa2f8844a82f180043de",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6658387,
    "satd_repo": 70746484,
    "satd_sha": "5d533ec99b2b6b53f9abfa2f8844a82f180043de",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6658392,
    "satd_repo": 70746484,
    "satd_sha": "20c495e95bb3f0cd3542e029e8c54701d827cc7d",
    "satd_text": " error handling, slow path",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/attrs.h",
    "lines": [
      541
    ],
    "matched_text": "    // error handling, slow path"
  },
  {
    "satd_id": 6658449,
    "satd_repo": 70746484,
    "satd_sha": "20c495e95bb3f0cd3542e029e8c54701d827cc7d",
    "satd_text": " test example usage docs",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tests/cpp/attrs_test.cc",
    "lines": [
      8
    ],
    "matched_text": "// test example usage docs"
  },
  {
    "satd_id": 6658480,
    "satd_repo": 70746484,
    "satd_sha": "11dd933f71e0da53169b89d59abbccf0b73f4f0f",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      220
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6658480,
    "satd_repo": 70746484,
    "satd_sha": "11dd933f71e0da53169b89d59abbccf0b73f4f0f",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      462
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6658480,
    "satd_repo": 70746484,
    "satd_sha": "11dd933f71e0da53169b89d59abbccf0b73f4f0f",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      723
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6658480,
    "satd_repo": 70746484,
    "satd_sha": "11dd933f71e0da53169b89d59abbccf0b73f4f0f",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      729
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6658493,
    "satd_repo": 70746484,
    "satd_sha": "a80356bbe0e857d674d3dbe0f0cfbec43ba5c950",
    "satd_text": " pylint: disable=invalid-name,missing-docstring,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/inception_v3.py",
    "lines": [
      11
    ],
    "matched_text": "# pylint: disable=invalid-name,missing-docstring,unused-argument"
  },
  {
    "satd_id": 6658569,
    "satd_repo": 70746484,
    "satd_sha": "672147c8e183de76a7fe34fa2aeace7c8829cabd",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d_transpose.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6658569,
    "satd_repo": 70746484,
    "satd_sha": "672147c8e183de76a7fe34fa2aeace7c8829cabd",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d_transpose.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6658573,
    "satd_repo": 70746484,
    "satd_sha": "85483c3734ce243a97212b6399229e0fa09f4968",
    "satd_text": " pylint: disable=invalid-name, unused-variable,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/hls/injective.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable,"
  },
  {
    "satd_id": 6658623,
    "satd_repo": 70746484,
    "satd_sha": "9e3377466411e0a41c14b946e7d9db90a72eda68",
    "satd_text": "   To run this tutorial with a real remote device, change :code:`local_demo`",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/cross_compilation_and_rpc.py",
    "lines": [
      113
    ],
    "matched_text": "#   To run this tutorial with a real remote device, change :code:`local_demo`"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      98
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      208
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      245
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      288
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      341
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      383
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      418
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      454
    ],
    "matched_text": "    # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658625,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      681
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      96
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      202
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      243
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      283
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      339
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      381
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      416
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      452
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658626,
    "satd_repo": 70746484,
    "satd_sha": "6d1dc4ae5f5f86ff87a6b094b98071e16be14429",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      679
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6658630,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " multiply 1000 for converting to millisecond",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/benchmark/arm_cpu_imagenet_bench.py",
    "lines": [
      94
    ],
    "matched_text": "        prof_res = np.array(ftimer().results) * 1000  # multiply 1000 for converting to millisecond"
  },
  {
    "satd_id": 6658636,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/nnvm_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6658636,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/topi_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6658638,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/nnvm_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6658638,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/topi_integration.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable,invalid-name"
  },
  {
    "satd_id": 6658658,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable,no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,no-else-return"
  },
  {
    "satd_id": 6658680,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658680,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,no-else-return"
  },
  {
    "satd_id": 6658680,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/arm_cpu/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable"
  },
  {
    "satd_id": 6658680,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658680,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable, unused-argument"
  },
  {
    "satd_id": 6658682,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " You can skip the implementation of this function for this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      223
    ],
    "matched_text": "# You can skip the implementation of this function for this tutorial."
  },
  {
    "satd_id": 6658689,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": "################################################################\n Start RPC Tracker\n -----------------\n TVM uses RPC session to communicate with ARM boards.\n During tuning, the tuner will send the generated code to the board and\n measure the speed of code on the board.\n\n To scale up the tuning, TVM uses RPC Tracker to manage distributed devices.\n The RPC Tracker is a centralized master node. We can register all devices to\n the tracker. For example, if we have 10 phones, we can register all of them\n to the tracker, then we can run 10 measurements in parallel, which accelerates\n the tuning process.\n\n To start an RPC tracker, run this command in the host machine. The tracker is\n required during the whole tuning process, so we need to open a new terminal for\n this command:\n\n .. code-block:: bash\n\n   python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n\n The expected output is\n\n .. code-block:: bash\n\n   INFO:RPCTracker:bind to 0.0.0.0:9190",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120
    ],
    "matched_text": "#################################################################"
  },
  {
    "satd_id": 6658690,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": "#####################################################################\n Sample Output\n -------------\n The tuning needs to train xgboost models and use them for prediction.\n So a high performance CPU is recommended.\n It takes about 1.5 hour on a 32T AMD Ryzen CPU.\n One sample output is\n\n .. code-block:: bash\n\n    [Task  1/16]  Current/Best:   13.15/  20.49 GFLOPS | Progress: (297/1000) | 348.51 s Done.\n    [Task  2/16]  Current/Best:   16.66/  22.64 GFLOPS | Progress: (475/1000) | 415.42 s Done.\n    [Task  3/16]  Current/Best:   10.33/  14.19 GFLOPS | Progress: (306/1000) | 239.61 s Done.\n    [Task  4/16]  Current/Best:   13.29/  20.88 GFLOPS | Progress: (242/1000) | 227.48 s Done.\n    [Task  5/16]  Current/Best:   13.28/  15.61 GFLOPS | Progress: (237/1000) | 191.56 s Done.\n    [Task  6/16]  Current/Best:   20.16/  23.86 GFLOPS | Progress: (315/1000) | 304.31 s Done.\n    [Task  7/16]  Current/Best:    9.22/  22.00 GFLOPS | Progress: (458/1000) | 433.26 s Done.\n    [Task  8/16]  Current/Best:   14.12/  17.80 GFLOPS | Progress: (270/1000) | 240.73 s Done.\n    [Task  9/16]  Current/Best:   14.59/  24.02 GFLOPS | Progress: (209/1000) | 213.61 s Done.\n    [Task 10/16]  Current/Best:    9.86/  21.74 GFLOPS | Progress: (367/1000) | 359.93 s Done.\n    [Task 11/16]  Current/Best:    5.01/  18.86 GFLOPS | Progress: (202/1000) | 191.18 s Done.\n    [Task 12/16]  Current/Best:    8.61/  25.23 GFLOPS | Progress: (220/1000) | 220.74 s Done.\n    [Task 13/16]  Current/Best:   10.87/  25.79 GFLOPS | Progress: (465/1000) | 902.14 s Done.\n    [Task 14/16]  Current/Best:   15.33/  29.38 GFLOPS | Progress: (239/1000) | 481.33 s Done.\n    [Task 15/16]  Current/Best:   12.09/  38.60 GFLOPS | Progress: (476/1000) | 928.35 s Done.\n    [Task 16/16]  Current/Best:   16.77/  47.08 GFLOPS | Progress: (255/1000) | 439.91 s Done.\n    Compile...\n    Upload...\n    Evaluate inference time cost...\n    Mean inference time (std dev): 156.51 ms (0.89 ms)\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_nnvm_arm.py",
    "lines": [
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6658734,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " Then we cross compile the kernel.\n The target should be 'llvm -target=armv7l-linux-gnueabihf' for\n Raspberry Pi 3B, but we use 'llvm' here to make this tutorial runnable\n on our webpage building server. See the detailed note in the following block.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/cross_compilation_and_rpc.py",
    "lines": [
      92,
      93,
      94,
      95
    ],
    "matched_text": "# Then we cross compile the kernel."
  },
  {
    "satd_id": 6658751,
    "satd_repo": 70746484,
    "satd_sha": "32076df8152207d1745a4b36a4b0f1dddfadf4ed",
    "satd_text": " If we run the example on our x86 server for demonstration, we can simply\n set it as :code:`llvm`. If running it on the RK3399, we need to\n specify its instruction set. Set :code:`local_demo` to False if you\n want to run this tutorial with a real device.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/nnvm/deploy_model_on_mali_gpu.py",
    "lines": [
      148,
      149,
      150,
      151
    ],
    "matched_text": "# If we run the example on our x86 server for demonstration, we can simply"
  },
  {
    "satd_id": 6658798,
    "satd_repo": 70746484,
    "satd_sha": "8c5078c9f5aaeba006f2caf70f82363c5f8687ef",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return, too-many-arguments, too-many-locals, too-many-statements, no-member, too-many-branches",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/intel_graphics/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return, too-many-arguments, too-many-locals, too-many-statements, no-member, too-many-branches"
  },
  {
    "satd_id": 6658803,
    "satd_repo": 70746484,
    "satd_sha": "cf9db7ea66cc601bf4adf428d56e204b77a27bb2",
    "satd_text": " oshape set to None means do not test the shape-correctness",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "nnvm/tests/python/compiler/test_top_level4.py",
    "lines": [
      83
    ],
    "matched_text": "        # oshape set to None means do not test the shape-correctness"
  },
  {
    "satd_id": 6658804,
    "satd_repo": 70746484,
    "satd_sha": "cf9db7ea66cc601bf4adf428d56e204b77a27bb2",
    "satd_text": " FIXME: NNVM doesn't support setting `axis=None` explicitly.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_top_level4.py",
    "lines": [
      146
    ],
    "matched_text": "                # FIXME: NNVM doesn't support setting `axis=None` explicitly."
  },
  {
    "satd_id": 6658859,
    "satd_repo": 70746484,
    "satd_sha": "36d3a41e3dc710a46ac7c7567bc0d64775f93900",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals, too-many-arguments, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals, too-many-arguments, unused-argument"
  },
  {
    "satd_id": 6658870,
    "satd_repo": 70746484,
    "satd_sha": "36d3a41e3dc710a46ac7c7567bc0d64775f93900",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658870,
    "satd_repo": 70746484,
    "satd_sha": "36d3a41e3dc710a46ac7c7567bc0d64775f93900",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658882,
    "satd_repo": 70746484,
    "satd_sha": "36d3a41e3dc710a46ac7c7567bc0d64775f93900",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658882,
    "satd_repo": 70746484,
    "satd_sha": "36d3a41e3dc710a46ac7c7567bc0d64775f93900",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/bitserial_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6658920,
    "satd_repo": 70746484,
    "satd_sha": "fde98f0ede1bc320ba11f66a096d5ae80e3e5ec5",
    "satd_text": " fairly expensive string operation...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/rpc/ConnectTrackerServerProcessor.java",
    "lines": [
      234
    ],
    "matched_text": "    // fairly expensive string operation..."
  },
  {
    "satd_id": 6658930,
    "satd_repo": 70746484,
    "satd_sha": "30409045e4289d110860b5b2ac8ee15174c632c5",
    "satd_text": " NOTE: exclude compute capability 6.1 devices although it is actually available\n       to compute fp16, because these devices only have low-rate fp16 performance.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/nvcc.py",
    "lines": [
      209,
      210
    ],
    "matched_text": "    # NOTE: exclude compute capability 6.1 devices although it is actually available"
  },
  {
    "satd_id": 6658931,
    "satd_repo": 70746484,
    "satd_sha": "30409045e4289d110860b5b2ac8ee15174c632c5",
    "satd_text": " fp 16 support in reference to:\n https://docs.nvidia.com/cuda/cuda-c-programming-guide/#arithmetic-instructions",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "python/tvm/contrib/nvcc.py",
    "lines": [
      205,
      206
    ],
    "matched_text": "    # fp 16 support in reference to:"
  },
  {
    "satd_id": 6658935,
    "satd_repo": 70746484,
    "satd_sha": "2cf3fd02a24ccd6120d337e41bd83496d7eb9640",
    "satd_text": " After building runtime successfully, we need to set environment varibles\n We need to edit :code:`~/.bashrc` using :code:`vi ~/.bashrc` and add\n After executing the command above, if you see these lines below, it means\n the RPC server started successfully on your device.\n device, it is important to avoid overhead of remote function calls.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6658961,
    "satd_repo": 70746484,
    "satd_sha": "ca5397d577ccb9a514b6e5853b764a74354aa1bd",
    "satd_text": " Process the output\n ------------------\n Process the model output to human readable text for InceptionV1.\n Print top 5 predictions from TVM output.\n Inference on tensorflow\n -----------------------\n Run the corresponding model on tensorflow\n Print top 5 predictions from tensorflow.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6659022,
    "satd_repo": 70746484,
    "satd_sha": "8dbe779466d8a9a5000a08f505558e1183961cb4",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals, too-many-branches",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_nchw_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals, too-many-branches"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      87
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      193
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      234
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      274
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      330
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      372
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      412
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659025,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      486
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      89
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      199
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      236
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      279
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      332
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      374
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      414
    ],
    "matched_text": "    # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659026,
    "satd_repo": 70746484,
    "satd_sha": "4e29ec334c3c8d1e0b187d881583fa2e420278f3",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      488
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6659029,
    "satd_repo": 70746484,
    "satd_sha": "d93b72b5e2264d352e674febf3c201894ae87a0e",
    "satd_text": " Enable custom logging - this will cause TVM to pass every log message\n * through CustomLogMessage instead of LogMessage. By enabling this, we must\n * implement dmlc::CustomLogMessage::Log. We use this to pass TVM log\n * messages to Android logcat.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "apps/android_rpc/app/src/main/jni/tvm_runtime.h",
    "lines": [
      9,
      10,
      11,
      12,
      13
    ],
    "matched_text": "/* Enable custom logging - this will cause TVM to pass every log message"
  },
  {
    "satd_id": 6659039,
    "satd_repo": 70746484,
    "satd_sha": "c19cf6f7340129bb19f40f31be4f811793090f25",
    "satd_text": " coding: utf-8\n pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/squeezenet.py",
    "lines": [
      18,
      19
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6659070,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/feature.py",
    "lines": [
      40
    ],
    "matched_text": "    def raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6659070,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      17
    ],
    "matched_text": "def _raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6659070,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/tuner/tuner.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument, no-self-use, invalid-name"
  },
  {
    "satd_id": 6659082,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " no error\n error when calling template function\n error when compiling code on host (e.g. tvm.build)\n error when compiling code on device (e.g. opencl JIT on device)\n error when run program on device\n answer is wrong when compared to a golden output\n error of measure infrastructure",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/measure/measure.py",
    "lines": [
      50,
      51,
      52,
      53,
      54,
      55,
      56
    ],
    "matched_text": "    NO_ERROR = 0              # no error"
  },
  {
    "satd_id": 6659092,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/record.py",
    "lines": [
      110
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659092,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659092,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      236
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659094,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " clean duplicated items",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/record.py",
    "lines": [
      260
    ],
    "matched_text": "            # clean duplicated items"
  },
  {
    "satd_id": 6659104,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=too-few-public-methods,invalid-name,unused-argument,arguments-differ\n pylint: disable=consider-using-enumerate",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/space.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# pylint: disable=too-few-public-methods,invalid-name,unused-argument,arguments-differ"
  },
  {
    "satd_id": 6659111,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/record.py",
    "lines": [
      110
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659111,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659111,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      236
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659113,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " currently unused",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      35
    ],
    "matched_text": "        self.kwargs = {}  # currently unused"
  },
  {
    "satd_id": 6659114,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/feature.py",
    "lines": [
      40
    ],
    "matched_text": "    def raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6659114,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/task/task.py",
    "lines": [
      17
    ],
    "matched_text": "def _raise_error(*args, **kwargs):  # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6659114,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/tuner/tuner.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument, no-self-use, invalid-name"
  },
  {
    "satd_id": 6659143,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " pylint: disable=unused-argument, no-self-use, invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/autotvm/tuner/tuner.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument, no-self-use, invalid-name"
  },
  {
    "satd_id": 6659174,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "!\n * \\brief Get axis-based feature for all axes and flatten them into a one-dimensional vector.\n * \\param stmt The statement to be extracted\n * \\param bool Whether take log for numerical feature\n * \\param ret_feature The buffer where the return value is stored\n *\n * \\note See GetItervarFeature for more details about the return value.\n *       This is an optimized version of GetItervarFeature + Flatten. This runs much faster.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/autotvm/touch_extractor.cc",
    "lines": [
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6659179,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "!\n * \\brief Get axis-based feature for all axes\n * \\param stmt The statement to be extracted\n * \\param bool Whether take log for numerical feature\n * \\param ret_feature The buffer where the return value is stored\n *\n * \\note The format of return value is\n * ((\n *   ('_itervar_',  var),\n *   ('_attr_',     length, nest_level, topdown, bottomup, one_hot_annotation),\n *   ('_arith_',    add_ct, mul_ct, div_ct),\n *   ('data_vec_0', stride, mod, count, reuse, thread_count, thread_reuse),\n *   ('conv_0',     stride, mod, count, reuse, thread_count, thread_reuse),\n * ),\n * (\n *   ('_itervar_',    var2),\n *   ('_attr_',       length, nest_level, one_hot_annotation),\n *   ('_arith_',      add_ct, mul_ct, div_ct),\n *   ('kernel_vec_0', stride, mod, count, reuse, thread_count, thread_reuse),\n *   ('conv_1',       stride, mod, count, reuse, thread_count, thread_reuse),\n * ))\n *\n * Itervars are sorted according to their first occurrence position in IR.\n * Buffers touched by an itervar are sorted by their unique names.\n *\n * \\note If you want to flatten these features as the input of your model,\n * You can use the faster one GetItervarFeatureFlatten below.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/autotvm/touch_extractor.cc",
    "lines": [
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6659201,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " TODO(lmzheng): handle more index types (multiple occurrence)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/autotvm/touch_extractor.cc",
    "lines": [
      36
    ],
    "matched_text": "    // TODO(lmzheng): handle more index types (multiple occurrence)"
  },
  {
    "satd_id": 6659203,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " multiply reuse ratio",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/autotvm/touch_extractor.cc",
    "lines": [
      104
    ],
    "matched_text": "    } else {                      // multiply reuse ratio"
  },
  {
    "satd_id": 6659215,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": " count when move thread axis into innermost\n reuse ratio move thread axis into innermost",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/autotvm/touch_extractor.h",
    "lines": [
      32,
      33
    ],
    "matched_text": "  int64_t thread_count{0};  // count when move thread axis into innermost"
  },
  {
    "satd_id": 6659248,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "#####################################################################\n Step 2:  Search through the space\n ---------------------------------\n We pick the last layer on resnet as test case.\n Since our space is very large, :code:`XGBoostTuner` is most suitable\n for our case. Here we only do 20 trials for demonstration.\n In practice, making 1000 trials usually can find some good kernels\n for this template",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_cuda_conv2d.py",
    "lines": [
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659252,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "#####################################################################\n Step 1:  Define the search space\n ---------------------------------\n There are plenty of useful schedule primitives in tvm. You can also find \n some tutorials that describe them in more details, such as \n (1). :doc:``Optimizing Conv2d on NVIDIA GPU <../optimize/opt_conv_cuda>`\n (2). `Optimizing DepthwiseConv on NVIDIA GPU <https://tvm.ai/2017/08/22/Optimize-Deep-Learning-GPU-Operators-with-TVM-A-Depthwise-Convolution-Example.html>`_\n \n However, their implementations are manually tuned for some special input\n shapes. In this section, we build a large enough space to cover\n the techniques used in these tutorials. Then we rely on the efficient auto-tuner\n to search through this space and pick some good configurations.\n \n If you are familiar with writing cuda schedule, you can find the following\n template is very general. Actually this template can be easily modified \n to tune other operators such as depthwise convolution and gemm.\n In order to fully understand this template, you should be familiar with\n the schedule primitives and auto tuning API. You can refer to the above\n tutorials and :doc:`autotvm tutorial <tune_simple_template>`\n\n It is worth noting that the search space for a conv2d operator\n can be very large (at the level of 10^9 for some input shapes)\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_cuda_conv2d.py",
    "lines": [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659261,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "########################################################################\n Finally we apply history best from the cache file and check its correctness.\n We can call the function :code:`matmul` directly under the \n :any:`autotvm.apply_history_best` context. When we call this function,\n it will query the dispatch context with its argument and get the best config \n with the same argument.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_simple_template.py",
    "lines": [
      262,
      263,
      264,
      265,
      266,
      267
    ],
    "matched_text": "#########################################################################"
  },
  {
    "satd_id": 6659268,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "####################################################################\n Parametrize the schedule\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n In the previous schedule code, we use a constant \"8\" as tiling factor.\n However, it might not be the best one because the best tiling factor depends\n on real hardware environment and input shape.\n\n If you want the schedule code to be portable across a wider range of input shapes\n and target hardware, it is better to define a set of candidate values and\n pick the best one according to the measurement results on target hardware.\n\n In autotvm, we can define a tunable parameter, or a \"knob\" for such kind of value.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_simple_template.py",
    "lines": [
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64
    ],
    "matched_text": "#####################################################################"
  },
  {
    "satd_id": 6659277,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "#####################################################################\n .. note:: More Explanation on :code:`cfg.defile_split`\n\n  In this template, :code:`cfg.define_split(\"tile_y\", y, num_outputs=2)` will enumerate\n  all possible combinations that can split axis y into two axes with factors of the length of y.\n  For example, if the length of y is 32 and we want to split it into two axes\n  using factors of 32, then there are 6 possible values for\n  (length of outer axis, length of inner axis) pair, namely\n  (32, 1), (16, 2), (8, 4), (4, 8), (2, 16) or (1, 32).\n  They are just the 6 possible values of `tile_y`.\n\n  During schedule, :code:`cfg[\"tile_y\"]` is a :code:`SplitEntity` object.\n  We stores the lengths of outer axes and inner axes in :code:`cfg['tile_y'].size`\n  (a tuple with two elements).\n  In this template, we apply it by using :code:`yo, yi = cfg['tile_y'].apply(s, C, y)`.\n  Actually, this is equivalent to\n  :code:`yo, yi = s[C].split(y, cfg[\"tile_y\"].size[1])`\n  or  :code:`yo, yi = s[C].split(y, nparts=cfg['tile_y\"].size[0])`\n\n  The advantage of using cfg.apply API is that it makes multi-level split\n  (when num_outputs >= 3) easier.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_simple_template.py",
    "lines": [
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659280,
    "satd_repo": 70746484,
    "satd_sha": "6ea74d4119bac8e473795d13da4d5d7ab8b7b3ad",
    "satd_text": "#####################################################################\n Step 2:  Search through the space\n ---------------------------------\n In step 1, we build the search space by extending our old schedule code\n into a template. The next step is to pick a tuner and explore in this space.\n\n Auto-tuners in tvm\n ^^^^^^^^^^^^^^^^^^\n The job for a tuner can be described by following pseudo code\n\n   .. code-block:: c\n\n    ct = 0\n    while ct < max_number_of_trials:\n        propose a batch of configs\n        measure this batch of configs on real hardware and get results\n        ct += batch_size\n\n When proposing the next batch of configs, the tuner can take different strategies. We\n provide four tuners with different strategies in autotvm.\n\n * :any:`RandomTuner`: Enumerate the space in a random order\n * :any:`GridSearchTuner`: Enumerate the space in a grid search order\n * :any:`GATuner`: Using genetic algorithm to search through the space\n * :any:`XGBTuner`: Uses a model based method. Train a XGBoost model to predict the speed of lowered IR and pick the next batch according to the prediction.\n\n You can choose the tuner according to the size of your space, your time budget and other factors.\n For example, if your space is very small (less than 1000), a gridsearch tuner or a\n random tuner is good enough. If your space is at the level of 10^9 (this is the space\n size of a conv2d operator on CUDA GPU), XGBoostTuner can explore more efficiently\n and find better configs.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/autotvm/tune_simple_template.py",
    "lines": [
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659331,
    "satd_repo": 70746484,
    "satd_sha": "ffe1badd9da2086055aa3ce78c8ba1195f62b17a",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/resnet.py",
    "lines": [
      189
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659373,
    "satd_repo": 70746484,
    "satd_sha": "3ae9e155596fd23e1df7ff4b0917f382721f955d",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/convolution_opt.py",
    "lines": [
      47
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659418,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the computation declaration part of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      190,
      191
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659418,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the computation declaration part of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      224,
      225
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659419,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Matrix Multiplication\n ~~~~~~~~~~~~~~~~~~~~~\n Now we're ready to describe the matrix multiplication result tensor :code:`C`,\n with another compute operation.\n The compute function takes the shape of the tensor, as well as a lambda\n function that describes the computation rule for each position of the tensor.\n\n In order to implement matrix multiplication, the lambda function needs to\n include a reduction formula over the input channel dimension axes.\n To create a reduction formula, we can declare a reduction axis using\n :code:`tvm.reduce_axis`, which takes in the range of reductions.\n :code:`tvm.sum` takes in the expression to be reduced as well as\n the reduction axes to compute the sum of value over all k in the declared\n ranges.\n\n Note that the reduction needs to be performed over 32-bit :code:`env.acc_dtype`\n accumulator data types.\n\n No computation happens during this phase, as we are only declaring how\n the computation should be done.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659425,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n RPC Setup\n ---------\n We start by programming the Pynq's FPGA and building its RPC runtime\n as we did in the VTA introductory tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      13,
      14,
      15,
      16,
      17
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659427,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n DMA Transfers\n ~~~~~~~~~~~~~\n We need to schedule DMA transfers to move data living in DRAM to\n and from the VTA on-chip buffers.\n This can be achieved using the :code:`compute_at` schedule primitive\n which nests the copying of the buffers into the computation loop\n that performs the matrix multiplication.\n\n We insert :code:`dma_copy` pragmas to indicate to the compiler\n that the copy operations will be performed in bulk via DMA,\n which is common in hardware accelerators.\n Finally, we print the temporary schedule to observe the effects of\n moving the copy operations into the matrix multiplication loop.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659432,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Tensorization\n ~~~~~~~~~~~~~\n The last step of the schedule transformation consists in applying\n *tensorization* to our schedule.\n Tensorization is analogous to vectorization, but extends the concept\n to a higher-dimensional unit of computation.\n Consequently, tensorization imposes data layout constraints as discussed\n earlier when declaring the data layout input placeholders.\n We've already arranged our tensors in a tiled format, so the next thing\n we need to perform is loop reordering to accommodate for tensorization.\n\n Here we choose to move the outermost reduction axis all the way out.\n This dictates that we first iterate over input channels, then batch\n dimensions, and finally output channels.\n Lastly, we apply the tensorization scheduling primitive :code:`tensorize`\n along the outer axis of the inner-most matrix matrix multiplication tensor\n block.\n We print the finalized schedule that is ready for code-generation\n by the VTA runtime JIT compiler.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659435,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      67
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659435,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      43
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659435,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply_opt.py",
    "lines": [
      46
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659443,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the scheduling portion of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      277,
      278
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659443,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the scheduling portion of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      364,
      365
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659448,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Scheduling the Computation\n --------------------------\n While the above lines describes the computation rule, we can obtain\n :code:`C` in many ways.\n TVM asks the user to provide an implementation of the computation called\n *schedule*.\n\n A schedule is a set of transformations to an original computation that\n transforms the implementation of the computation without affecting\n correctness.\n This simple VTA programming tutorial aims to demonstrate basic schedule\n transformations that will map the original schedule down to VTA hardware\n primitives.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659448,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Scheduling the Computation\n --------------------------\n While the above lines describes the computation rule, we can obtain\n :code:`C` in many ways.\n TVM asks the user to provide an implementation of the computation called\n *schedule*.\n\n A schedule is a set of transformations to an original computation that\n transforms the implementation of the computation without affecting\n correctness.\n This simple VTA programming tutorial aims to demonstrate basic schedule\n transformations that will map the original schedule down to VTA hardware\n primitives.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659457,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Summary\n -------\n This tutorial showcases the TVM workflow to implement a simple matrix\n multiplication example on VTA.\n The general workflow includes:\n\n - Programming the FPGA with the VTA bitstream over RPC.\n - Describing matrix multiplication via a series of computations.\n - Describing how we want to perform the computation using schedule primitives.\n - Compiling the function to the VTA target.\n - Running the compiled module and verifying it against a numpy implementation.\n",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659458,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Output channel factor m - total 16x16=256 output channels",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      145
    ],
    "matched_text": "# Output channel factor m - total 16x16=256 output channels"
  },
  {
    "satd_id": 6659482,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n Tiling the Computation\n ~~~~~~~~~~~~~~~~~~~~~~\n The matrix multiplication is by default too large for activations or weights\n to fit on VTA's on-chip buffers all at once.\n We block the (1, 1024) by (1024, 1024) matrix multiplication into\n smaller (1, 256) by (256, 256) matrix multiplications so the intermediate\n tensors can fit on the accelerator's on-chip SRAM.\n This approach is similar to blocking techniques applied to CPUs and GPUs in\n order to increase cache hit rate.\n\n We perform blocking along each axes (the batch axis being untouched since\n we are performing singe-batch inference).\n We also leave the inner-most tensorization axes as-is in order to allow\n TVM to pattern-match tensorization.\n We show the outcome of blocking on the computation schedule in the diagram\n below:\n\n .. image:: https://raw.githubusercontent.com/uwsaml/web-data/master/vta/tutorial/blocking.png\n      :align: center\n      :height: 367px\n      :width: 387px\n\n .. note::\n \n   The code after loop splitting and reordering is equivalent to the following\n   pseudo-code. We ignore the batch axis since we are only performing single-batch\n   inference in this example:\n\n   .. code-block:: c\n\n      for (int oc_out = 0; oc_out < 4; ++oc_out) {\n        // Initialization loop\n        for (int oc_inn = 0; oc_inn < 16; ++oc_inn) {\n         for (int oc_tns = 0; oc_tns < 16; ++oc_tns) {\n          int j = (oc_out * 16 + oc_inn) * 16 + oc_tns;\n          C[0][j] = 0;\n         }\n        }\n        for (int ic_out = 0; ic_out < 4; ++ic_out) {\n         // Block loop\n         for (int oc_inn = 0; oc_inn < 16; ++oc_inn) {\n          for (int ic_inn = 0; ic_inn < 16; ++ic_inn) {\n           // Tensorization loop\n           for (int oc_tns = 0; oc_tns < 16; ++oc_tns) {\n            for (int ic_tns = 0; ic_tns < 16; ++ic_tns) {\n             int i = (ic_out * 16 + ic_inn) * 16 + ic_tns;\n             int j = (oc_out * 16 + oc_inn) * 16 + oc_tns;\n             C[0][i] = C[0][i] + A[0][i] * B[j][i];\n            }\n           }\n          }\n         }\n        }\n       }\n      }",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply_opt.py",
    "lines": [
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659490,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      67
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659490,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      43
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659490,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply_opt.py",
    "lines": [
      46
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659517,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the computation declaration part of this tutorial.\n Scheduling the Computation\n --------------------------\n While the above lines describes the computation rule, we can obtain\n :code:`C` in many ways.\n TVM asks the user to provide an implementation of the computation called\n *schedule*.\n A schedule is a set of transformations to an original computation that\n transforms the implementation of the computation without affecting\n correctness.\n This simple VTA programming tutorial aims to demonstrate basic schedule\n transformations that will map the original schedule down to VTA hardware\n primitives.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6659530,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      67
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659530,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      43
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659530,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": " Reconfigure the JIT runtime",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tutorials/matrix_multiply_opt.py",
    "lines": [
      46
    ],
    "matched_text": "    # Reconfigure the JIT runtime"
  },
  {
    "satd_id": 6659537,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the scheduling portion of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/get_started.py",
    "lines": [
      277,
      278
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659537,
    "satd_repo": 70746484,
    "satd_sha": "d1128cedfb716ce251d5fb439813e7b87ef0e213",
    "satd_text": "#####################################################################\n This concludes the scheduling portion of this tutorial.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "vta/tutorials/matrix_multiply.py",
    "lines": [
      364,
      365
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6659605,
    "satd_repo": 70746484,
    "satd_sha": "395f4c36add0bae5f69b3f5d0de4bb68c708289c",
    "satd_text": " By default we cleanup - remove the container once it finish running (--rm)\n and share the PID namespace (--pid=host) so the process inside does not have\n pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/ci_build/ci_build.sh",
    "lines": [
      111,
      112,
      113
    ],
    "matched_text": "# By default we cleanup - remove the container once it finish running (--rm)"
  },
  {
    "satd_id": 6659655,
    "satd_repo": 70746484,
    "satd_sha": "9c44e4b43dca7f02959ab839a892ec97e2dd40d7",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/testing/simulator.py",
    "lines": [
      9
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659696,
    "satd_repo": 70746484,
    "satd_sha": "9c44e4b43dca7f02959ab839a892ec97e2dd40d7",
    "satd_text": " Simulate device\n TODO(tqchen,thierry): queue based event driven simulation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/sim/sim_driver.cc",
    "lines": [
      337,
      338
    ],
    "matched_text": "// Simulate device"
  },
  {
    "satd_id": 6659753,
    "satd_repo": 70746484,
    "satd_sha": "dea167a88349f2194f7915dfd1877f411771bbfb",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/exec/rpc_server.py",
    "lines": [
      18
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6659804,
    "satd_repo": 70746484,
    "satd_sha": "96488c11097529c3e98cdc466888506178053e4d",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/python/vta/arm_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6659884,
    "satd_repo": 70746484,
    "satd_sha": "96488c11097529c3e98cdc466888506178053e4d",
    "satd_text": " FIXME: hanging run\n print(\"========GEMM 1024========\")\n test_gemm_packed(1024, 1024, 128)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/python/pynq/test_benchmark_gemm.py",
    "lines": [
      265,
      266,
      267
    ],
    "matched_text": "# FIXME: hanging run"
  },
  {
    "satd_id": 6659885,
    "satd_repo": 70746484,
    "satd_sha": "96488c11097529c3e98cdc466888506178053e4d",
    "satd_text": " FIXME: report time that is too short\n load_inp_unittest(False)\n load_wgt_unittest(False)\n store_out_unittest(False)",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "vta/tests/python/pynq/test_benchmark_gemm.py",
    "lines": [
      256,
      257,
      258,
      259
    ],
    "matched_text": "    # FIXME: report time that is too short"
  },
  {
    "satd_id": 6659918,
    "satd_repo": 70746484,
    "satd_sha": "56a0dea81a92043d14c6c8145f9175f2eae2d3ba",
    "satd_text": " Force this computation to be done with LUTs to avoid using too many DSPs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/hardware/vivado/src/vta.cc",
    "lines": [
      95
    ],
    "matched_text": "// Force this computation to be done with LUTs to avoid using too many DSPs"
  },
  {
    "satd_id": 6659918,
    "satd_repo": 70746484,
    "satd_sha": "56a0dea81a92043d14c6c8145f9175f2eae2d3ba",
    "satd_text": " Force this computation to be done with LUTs to avoid using too many DSPs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/hardware/vivado/src/vta.cc",
    "lines": [
      258
    ],
    "matched_text": "// Force this computation to be done with LUTs to avoid using too many DSPs"
  },
  {
    "satd_id": 6659918,
    "satd_repo": 70746484,
    "satd_sha": "56a0dea81a92043d14c6c8145f9175f2eae2d3ba",
    "satd_text": " Force this computation to be done with LUTs to avoid using too many DSPs",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/hardware/vivado/src/vta.cc",
    "lines": [
      528
    ],
    "matched_text": "// Force this computation to be done with LUTs to avoid using too many DSPs"
  },
  {
    "satd_id": 6659927,
    "satd_repo": 70746484,
    "satd_sha": "56a0dea81a92043d14c6c8145f9175f2eae2d3ba",
    "satd_text": " FIXME: Right now memory_type is a 2-bit field which means that\n        VTA_MEM_ID_OUT will appear as 0. For now we'll refrain from\n        checking the memory_type to avoid an assertion error...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/runtime.cc",
    "lines": [
      850,
      851,
      852
    ],
    "matched_text": "      // FIXME: Right now memory_type is a 2-bit field which means that"
  },
  {
    "satd_id": 6659948,
    "satd_repo": 70746484,
    "satd_sha": "28a10b690429434da0c827e7995f689985c0aa78",
    "satd_text": "! \\brief Shutdown hook of VTA to cleanup resources ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta/runtime.h",
    "lines": [
      29
    ],
    "matched_text": "/*! \\brief Shutdown hook of VTA to cleanup resources */"
  },
  {
    "satd_id": 6660097,
    "satd_repo": 70746484,
    "satd_sha": "28a10b690429434da0c827e7995f689985c0aa78",
    "satd_text": " FIXME: Right now memory_type is a 2-bit field which means that MEM_ID_OUT will appear as 0\n        For now we'll refrain from checking the memory_type to avoid an assertion error...",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/runtime.cc",
    "lines": [
      850,
      851
    ],
    "matched_text": "      // FIXME: Right now memory_type is a 2-bit field which means that MEM_ID_OUT will appear as 0"
  },
  {
    "satd_id": 6660194,
    "satd_repo": 70746484,
    "satd_sha": "0979e9aaf5ea8bae386e499f69d08f9ba73637ec",
    "satd_text": " The name of the Pygments (syntax highlighting) style to use.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/docs/conf.py",
    "lines": [
      111
    ],
    "matched_text": "# The name of the Pygments (syntax highlighting) style to use."
  },
  {
    "satd_id": 6660197,
    "satd_repo": 70746484,
    "satd_sha": "0979e9aaf5ea8bae386e499f69d08f9ba73637ec",
    "satd_text": " Add any paths that contain custom static files (such as style sheets) here,\n relative to this directory. They are copied after the builtin static files,\n so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/docs/conf.py",
    "lines": [
      135,
      136,
      137
    ],
    "matched_text": "# Add any paths that contain custom static files (such as style sheets) here,"
  },
  {
    "satd_id": 6660212,
    "satd_repo": 70746484,
    "satd_sha": "0979e9aaf5ea8bae386e499f69d08f9ba73637ec",
    "satd_text": " If true, `todo` and `todoList` produce output, else they produce nothing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/docs/conf.py",
    "lines": [
      120
    ],
    "matched_text": "# If true, `todo` and `todoList` produce output, else they produce nothing."
  },
  {
    "satd_id": 6660319,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta_params.h",
    "lines": [
      381
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6660319,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": "! \\brief Unused in this instruction ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/include/vta_params.h",
    "lines": [
      385
    ],
    "matched_text": "  /*! \\brief Unused in this instruction */"
  },
  {
    "satd_id": 6660341,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": "! ALU opcode: shift right by immediate op [NOT IMPLEMENTED] ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "vta/include/vta_params.h",
    "lines": [
      115
    ],
    "matched_text": "/*! ALU opcode: shift right by immediate op [NOT IMPLEMENTED] */"
  },
  {
    "satd_id": 6660439,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": "! ALU opcode: binary mul op  [NOT IMPLEMENTED] ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "vta/include/vta_params.h",
    "lines": [
      111
    ],
    "matched_text": "/*! ALU opcode: binary mul op  [NOT IMPLEMENTED] */"
  },
  {
    "satd_id": 6660601,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": " Some debugging code",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/src/test/vta_test_lib.cc",
    "lines": [
      473
    ],
    "matched_text": "  // Some debugging code"
  },
  {
    "satd_id": 6660658,
    "satd_repo": 70746484,
    "satd_sha": "470018503fde26dc1112eac02bdddf1ebe666945",
    "satd_text": " Performance counter variables",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "vta/tests/driver/driver_test.cc",
    "lines": [
      25
    ],
    "matched_text": "    // Performance counter variables"
  },
  {
    "satd_id": 6660690,
    "satd_repo": 70746484,
    "satd_sha": "4361ba0d33e887703bf3037d9a90e8547f805cd5",
    "satd_text": " implementations of inline functions\n the usages of functions are documented in place.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/runtime/ndarray.h",
    "lines": [
      233,
      234
    ],
    "matched_text": "// implementations of inline functions"
  },
  {
    "satd_id": 6660752,
    "satd_repo": 70746484,
    "satd_sha": "f927e1f332d61b66655fb6e3fba666a7642efc7a",
    "satd_text": " By default we cleanup - remove the container once it finish running (--rm)\n and share the PID namespace (--pid=host) so the process inside does not have\n pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docker/bash.sh",
    "lines": [
      28,
      29,
      30
    ],
    "matched_text": "# By default we cleanup - remove the container once it finish running (--rm)"
  },
  {
    "satd_id": 6660752,
    "satd_repo": 70746484,
    "satd_sha": "f927e1f332d61b66655fb6e3fba666a7642efc7a",
    "satd_text": " By default we cleanup - remove the container once it finish running (--rm)\n and share the PID namespace (--pid=host) so the process inside does not have\n pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docker/build.sh",
    "lines": [
      116,
      117,
      118
    ],
    "matched_text": "# By default we cleanup - remove the container once it finish running (--rm)"
  },
  {
    "satd_id": 6660756,
    "satd_repo": 70746484,
    "satd_sha": "b30ae8ac6df3a8ba6a7479722a987465bf4e8650",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/yolo_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660757,
    "satd_repo": 70746484,
    "satd_sha": "b30ae8ac6df3a8ba6a7479722a987465bf4e8650",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/yolo/region.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6660757,
    "satd_repo": 70746484,
    "satd_sha": "b30ae8ac6df3a8ba6a7479722a987465bf4e8650",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/yolo/yolo.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6660766,
    "satd_repo": 70746484,
    "satd_sha": "e6863990e34ff7f5a54909f0209a94716d3eefdf",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements, singleton-comparison",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/nms.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements, singleton-comparison"
  },
  {
    "satd_id": 6660773,
    "satd_repo": 70746484,
    "satd_sha": "e6863990e34ff7f5a54909f0209a94716d3eefdf",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/nms.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements, singleton-comparison"
  },
  {
    "satd_id": 6660773,
    "satd_repo": 70746484,
    "satd_sha": "e6863990e34ff7f5a54909f0209a94716d3eefdf",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/ssd/multibox.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-arguments, too-many-statements"
  },
  {
    "satd_id": 6660774,
    "satd_repo": 70746484,
    "satd_sha": "e6863990e34ff7f5a54909f0209a94716d3eefdf",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-member",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-member"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      89
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      199
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      236
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      279
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      332
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      374
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660812,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      414
    ],
    "matched_text": "    # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      87
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      193
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      234
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      274
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      330
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      372
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660814,
    "satd_repo": 70746484,
    "satd_sha": "10b7757ab6fe6aadda4b48d6a39fef0d06daef77",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      412
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660823,
    "satd_repo": 70746484,
    "satd_sha": "d7c600b80a7e9624ede4e319e449797e359f6b2a",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals\n pylint: disable=unused-argument, redefined-builtin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      87
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      170
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      207
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      250
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      303
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660830,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      345
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      85
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      164
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      205
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      245
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      301
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660831,
    "satd_repo": 70746484,
    "satd_sha": "4503f77b0aca4dc725f2c6e951958e3f622ca50a",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      343
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6660835,
    "satd_repo": 70746484,
    "satd_sha": "fab4f9cc4132e81985cbc3ea0b150995ffdd5a74",
    "satd_text": " This is to strip off unused __nv_* functions from the final module\n The one that is actually used will be inlined at call site\n Adapted from Halide's runtime linker",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_nvptx.cc",
    "lines": [
      128,
      129,
      130
    ],
    "matched_text": "      // This is to strip off unused __nv_* functions from the final module"
  },
  {
    "satd_id": 6660844,
    "satd_repo": 70746484,
    "satd_sha": "71f88611cd5422a6fa021b2d6f40a3c034c2b5a5",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name,unused-argument"
  },
  {
    "satd_id": 6660879,
    "satd_repo": 70746484,
    "satd_sha": "d29b1c9e1207a877b6b5ec4284c1ce28f1696804",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/intrin.py",
    "lines": [
      32
    ],
    "matched_text": "def allocate(shape, dtype='float32', scope='global'): #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660902,
    "satd_repo": 70746484,
    "satd_sha": "531bb7c422c621c6dd726ca34cefd1fceb053f7b",
    "satd_text": " shared memory usage: M * 4B\n thread usage: M",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_pass_verify_gpu_code.py",
    "lines": [
      24,
      25
    ],
    "matched_text": "    # shared memory usage: M * 4B"
  },
  {
    "satd_id": 6660903,
    "satd_repo": 70746484,
    "satd_sha": "531bb7c422c621c6dd726ca34cefd1fceb053f7b",
    "satd_text": " local memory usage: M * 4B\n thread usage: M",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_pass_verify_gpu_code.py",
    "lines": [
      58,
      59
    ],
    "matched_text": "    # local memory usage: M * 4B"
  },
  {
    "satd_id": 6660914,
    "satd_repo": 70746484,
    "satd_sha": "90db723d287509705dcc93fde7ab0df380b9a4e5",
    "satd_text": "TODO: Support it later!",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      306
    ],
    "matched_text": "            #TODO: Support it later!"
  },
  {
    "satd_id": 6660917,
    "satd_repo": 70746484,
    "satd_sha": "90db723d287509705dcc93fde7ab0df380b9a4e5",
    "satd_text": "TODO: support slice later",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      185
    ],
    "matched_text": "            #TODO: support slice later"
  },
  {
    "satd_id": 6660918,
    "satd_repo": 70746484,
    "satd_sha": "90db723d287509705dcc93fde7ab0df380b9a4e5",
    "satd_text": "TODO: maybe support non-constant value later?",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      211
    ],
    "matched_text": "            #TODO: maybe support non-constant value later?"
  },
  {
    "satd_id": 6660921,
    "satd_repo": 70746484,
    "satd_sha": "90db723d287509705dcc93fde7ab0df380b9a4e5",
    "satd_text": "TODO: support defined intermediate buffer later",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      160
    ],
    "matched_text": "            #TODO: support defined intermediate buffer later"
  },
  {
    "satd_id": 6660923,
    "satd_repo": 70746484,
    "satd_sha": "90db723d287509705dcc93fde7ab0df380b9a4e5",
    "satd_text": " Dict maps arg name to actual arg instance (either a var or a buffer)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/hybrid/parser.py",
    "lines": [
      77
    ],
    "matched_text": "        self._args = {} # Dict maps arg name to actual arg instance (either a var or a buffer)"
  },
  {
    "satd_id": 6660947,
    "satd_repo": 70746484,
    "satd_sha": "396bd5623bd97db9c34a9d0f61f98e1cff9a848a",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/intel_graphics/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return"
  },
  {
    "satd_id": 6660968,
    "satd_repo": 70746484,
    "satd_sha": "fb88b74e4a167d4d4ccdee5883f85a7fd2949182",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/l2_normalize_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660968,
    "satd_repo": 70746484,
    "satd_sha": "fb88b74e4a167d4d4ccdee5883f85a7fd2949182",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/lrn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660969,
    "satd_repo": 70746484,
    "satd_sha": "fb88b74e4a167d4d4ccdee5883f85a7fd2949182",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/l2_normalize_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660969,
    "satd_repo": 70746484,
    "satd_sha": "fb88b74e4a167d4d4ccdee5883f85a7fd2949182",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/lrn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6660974,
    "satd_repo": 70746484,
    "satd_sha": "464c8c2667eb762b4511ce618a0a95a345c90ee1",
    "satd_text": " Because idxes does not contain duplicates, the loop below functions well.\n Note that it is as slow as O(|idxes| * |args|),\n but given that |idxes| is small, it is just fine",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/core/symbolic.cc",
    "lines": [
      328,
      329,
      330
    ],
    "matched_text": "      // Because idxes does not contain duplicates, the loop below functions well."
  },
  {
    "satd_id": 6660975,
    "satd_repo": 70746484,
    "satd_sha": "baa04599da1df0d9570936bc6addd9dad9504d9f",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/download.py",
    "lines": [
      53
    ],
    "matched_text": "        #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660977,
    "satd_repo": 70746484,
    "satd_sha": "baa04599da1df0d9570936bc6addd9dad9504d9f",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/download.py",
    "lines": [
      53
    ],
    "matched_text": "        #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660991,
    "satd_repo": 70746484,
    "satd_sha": "42b189cbc040be496ce9af7d2f59270ca586edf8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660991,
    "satd_repo": 70746484,
    "satd_sha": "42b189cbc040be496ce9af7d2f59270ca586edf8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/mxnet/model_zoo/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660997,
    "satd_repo": 70746484,
    "satd_sha": "42b189cbc040be496ce9af7d2f59270ca586edf8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6660997,
    "satd_repo": 70746484,
    "satd_sha": "42b189cbc040be496ce9af7d2f59270ca586edf8",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/mxnet/model_zoo/dcgan.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6661016,
    "satd_repo": 70746484,
    "satd_sha": "c418e916bcbbe62ae334e0fee67ed40d977ca858",
    "satd_text": "#####################################################################\n Set the parameters here\n -----------------------\n .. note::\n\n   Currently we support compiling SSD on CPU only.\n   GPU support is in progress.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/nnvm/deploy_ssd.py",
    "lines": [
      24,
      25,
      26,
      27,
      28,
      29,
      30
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6661030,
    "satd_repo": 70746484,
    "satd_sha": "76fa3ca4f606ffcef37737f770295b453671c048",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/image.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6661030,
    "satd_repo": 70746484,
    "satd_sha": "76fa3ca4f606ffcef37737f770295b453671c048",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6661049,
    "satd_repo": 70746484,
    "satd_sha": "76fa3ca4f606ffcef37737f770295b453671c048",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/bilinear_resize_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6661049,
    "satd_repo": 70746484,
    "satd_sha": "76fa3ca4f606ffcef37737f770295b453671c048",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/upsampling_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6661062,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/tensorflow.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6661062,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6661064,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " TODO: remove hard coded infershape",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/tensorflow.py",
    "lines": [
      94
    ],
    "matched_text": "            # TODO: remove hard coded infershape"
  },
  {
    "satd_id": 6661071,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " TODO: Need to find clean way to handle '^CheckNumerics'",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/tensorflow.py",
    "lines": [
      498
    ],
    "matched_text": "                    # TODO: Need to find clean way to handle '^CheckNumerics'"
  },
  {
    "satd_id": 6661087,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/tf.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6661089,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " Loads mapping from string UID to human-readable string",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/tf.py",
    "lines": [
      75
    ],
    "matched_text": "        # Loads mapping from string UID to human-readable string"
  },
  {
    "satd_id": 6661100,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/tensorflow.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6661100,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=import-self, invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=import-self, invalid-name, unused-argument"
  },
  {
    "satd_id": 6661111,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      84
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6661111,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      163
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6661111,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      204
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6661111,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      244
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6661111,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      300
    ],
    "matched_text": "        # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6661112,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      86
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6661112,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      169
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6661112,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      206
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6661112,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      249
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6661112,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " pylint: enable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/tensorflow/test_forward.py",
    "lines": [
      302
    ],
    "matched_text": "        # pylint: enable=unused-variable"
  },
  {
    "satd_id": 6661133,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": "#####################################################################\n Process the output to human readable\n ------------------------------------",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/nnvm/from_tensorflow.py",
    "lines": [
      104,
      105,
      106
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6661134,
    "satd_repo": 70746484,
    "satd_sha": "a81ebd90405e37dede63371de5886c5e768c5a03",
    "satd_text": " Clear extra params without nodes.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/compiler/build_module.py",
    "lines": [
      274
    ],
    "matched_text": "    # Clear extra params without nodes."
  },
  {
    "satd_id": 6661204,
    "satd_repo": 70746484,
    "satd_sha": "afdf93becc6d92962614a0b42f582ca202abeb33",
    "satd_text": " However, for such a common operation we had to define the reduce axis ourselves as well as explicit computation with\n :code: `tvm.compute`. Imagine for more complicated operations how much details we need to provide.\n Fortunately, we can replace those two lines with simple :code:`topi.sum` much like :code`numpy.sum`\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/topi/intro_topi.py",
    "lines": [
      36,
      37,
      38
    ],
    "matched_text": "# However, for such a common operation we had to define the reduce axis ourselves as well as explicit computation with"
  },
  {
    "satd_id": 6661207,
    "satd_repo": 70746484,
    "satd_sha": "afdf93becc6d92962614a0b42f582ca202abeb33",
    "satd_text": " and to examine the IR code in human readable format, we can do\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/topi/intro_topi.py",
    "lines": [
      32
    ],
    "matched_text": "# and to examine the IR code in human readable format, we can do"
  },
  {
    "satd_id": 6661357,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/darknet.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6661357,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/yolo2_detection.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6661358,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/darknet.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6661358,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument, no-init",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/yolo2_detection.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument, no-init"
  },
  {
    "satd_id": 6661360,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/vision.py",
    "lines": [
      2
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6661378,
    "satd_repo": 70746484,
    "satd_sha": "7ec898d55ed628cb06cef6448e715b818eeb75d5",
    "satd_text": "#####################################################################\n Load a test image\n --------------------------------------------------------------------",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "nnvm/tutorials/from_darknet.py",
    "lines": [
      169,
      170,
      171
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6661414,
    "satd_repo": 70746484,
    "satd_sha": "a53d8d01725cc25c855c00e32ec99510479f4c41",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      34
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6661414,
    "satd_repo": 70746484,
    "satd_sha": "a53d8d01725cc25c855c00e32ec99510479f4c41",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      64
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6661416,
    "satd_repo": 70746484,
    "satd_sha": "f4789db696827226d2725996c3a32ca61dcd5c92",
    "satd_text": " pylint: disable=invalid-name, no-member, too-few-public-methods, too-many-arguments, too-many-locals, protected-access",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/compiler/optimizer.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-few-public-methods, too-many-arguments, too-many-locals, protected-access"
  },
  {
    "satd_id": 6661422,
    "satd_repo": 70746484,
    "satd_sha": "f4789db696827226d2725996c3a32ca61dcd5c92",
    "satd_text": " pylint: disable=invalid-name, unused-import, protected-access",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/symbol.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-import, protected-access"
  },
  {
    "satd_id": 6661438,
    "satd_repo": 70746484,
    "satd_sha": "f4789db696827226d2725996c3a32ca61dcd5c92",
    "satd_text": " leaky_relu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/top/nn/nn.cc",
    "lines": [
      374
    ],
    "matched_text": "// leaky_relu"
  },
  {
    "satd_id": 6661451,
    "satd_repo": 70746484,
    "satd_sha": "a523311db08d4e66b9ab60589c4b1e8df64bbc1f",
    "satd_text": " TVM and NNVM aim to achieve the best performance on a variety of hardwares, with joint operator level and graph level optimization.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/using_external_lib.py",
    "lines": [
      217
    ],
    "matched_text": "# TVM and NNVM aim to achieve the best performance on a variety of hardwares, with joint operator level and graph level optimization."
  },
  {
    "satd_id": 6661490,
    "satd_repo": 70746484,
    "satd_sha": "4794f3d6ec6bdbd82c14453800167122ab661b54",
    "satd_text": "#####################################################################\n Download Input Image\n --------------------\n Here we define 2 functions that prepare an image that we want to perform\n classification on.\n\n - A function that downloads a cat image.\n\n - A function that performs preprocessing to an image so that it fits the\n   format required by the resnet18 model.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/from_mxnet_to_webgl.py",
    "lines": [
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6661527,
    "satd_repo": 70746484,
    "satd_sha": "4794f3d6ec6bdbd82c14453800167122ab661b54",
    "satd_text": " Set these variables at the global scope so that we can debug more easily.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/web/resnet.html",
    "lines": [
      118
    ],
    "matched_text": "    // Set these variables at the global scope so that we can debug more easily."
  },
  {
    "satd_id": 6661552,
    "satd_repo": 70746484,
    "satd_sha": "2bb4a1e7f005a61e1c9bb97a56516d3d90529531",
    "satd_text": "####################################################################\n Conclusion\n ---------------------------------------------\n This tutorial covered the usage of cuDNN with NNVM.\n We also have support for cuBLAS. If cuBLAS is enabled, it will be used inside a fully connected layer (nnvm.symbol.dense).\n To use cuBLAS, set a target string as \"cuda -libs=cublas\".\n You can use both cuDNN and cuBLAS with \"cuda -libs=cudnn,cublas\".\n\n For ROCm backend, we have support for MIOpen and rocBLAS.\n They can be enabled with target \"rocm -libs=miopen,rocblas\".\n\n Being able to use external libraries is great, but we need to keep in mind some cautions.\n\n First, the use of external libraries may restrict your usage of TVM and NNVM.\n For example, MIOpen only supports NCHW layout and fp32 data type at the moment, so you cannot use other layouts or data type in TVM.\n\n Second, and more importantly, external libraries restrict the possibility of operator fusion during graph compilation, as shown above.\n TVM and NNVM aim to achieve the best performance on a varity of hardwares, with joint operator level and graph level optimization.\n To achieve this goal, we should continue developing better optimizations for TVM and NNVM, while using external libraries as a nice way to fall back to existing implementation when necessary.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/using_external_lib.py",
    "lines": [
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218
    ],
    "matched_text": "#####################################################################"
  },
  {
    "satd_id": 6661556,
    "satd_repo": 70746484,
    "satd_sha": "2bb4a1e7f005a61e1c9bb97a56516d3d90529531",
    "satd_text": "#####################################################################\n The generated pseudo code should look something like below.\n Note how bias add, batch normalization, and ReLU activation are fused into the convolution kernel.\n TVM generates a single, fused kernel from this representation.\n\n .. code-block:: text\n\n       produce compute {\n         // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 112\n         // attr [input1.shared] storage_scope = \"shared\"\n         allocate input1.shared[float32 * 16 * 3 * 3 * 3]\n         // attr [compute] storage_scope = \"local\"\n         allocate compute[float32 * 16 * 1 * 1 * 1 * 1]\n         // attr [pad_temp.global.global.shared] storage_scope = \"shared\"\n         allocate pad_temp.global.global.shared[float32 * 1 * 1 * 4 * 57 * 4]\n         // attr [iter_var(threadIdx.x, Range(min=0, extent=448), threadIdx.x)] thread_extent = 448\n         produce compute {\n           produce input1.shared {\n             for (ax0, 0, 16) {\n               if (likely((threadIdx.x < 27))) {\n                 input1.shared[(threadIdx.x + (ax0*27))] = input1[((((((blockIdx.x/112)*48) + (threadIdx.x/9))*9) + (threadIdx.x % 9)) + (ax0*27))]\n               }\n             }\n           }\n           compute[0] = 0.000000f\n           compute[1] = 0.000000f\n           compute[2] = 0.000000f\n           compute[3] = 0.000000f\n           compute[4] = 0.000000f\n           compute[5] = 0.000000f\n           compute[6] = 0.000000f\n           compute[7] = 0.000000f\n           compute[8] = 0.000000f\n           compute[9] = 0.000000f\n           compute[10] = 0.000000f\n           compute[11] = 0.000000f\n           compute[12] = 0.000000f\n           compute[13] = 0.000000f\n           compute[14] = 0.000000f\n           compute[15] = 0.000000f\n           for (rc, 0, 3) {\n             produce pad_temp.global.global.shared {\n               if (likely((threadIdx.x < 228))) {\n                 if (likely(((blockIdx.x*2) < (226 - (threadIdx.x/57))))) {\n                   pad_temp.global.global.shared[ramp((threadIdx.x*4), 1, 4)] = pad_temp[ramp(((((((blockIdx.x*2) + (threadIdx.x/57))*57) + (threadIdx.x % 57)) + (rc*12882))*4), 1, 4)]\n                 }\n               }\n             }\n             for (ry, 0, 3) {\n               for (rx, 0, 3) {\n                 compute[0] = (compute[0] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[((((rc*3) + ry)*3) + rx)]))\n                 compute[1] = (compute[1] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 27)]))\n                 compute[2] = (compute[2] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 54)]))\n                 compute[3] = (compute[3] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 81)]))\n                 compute[4] = (compute[4] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 108)]))\n                 compute[5] = (compute[5] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 135)]))\n                 compute[6] = (compute[6] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 162)]))\n                 compute[7] = (compute[7] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 189)]))\n                 compute[8] = (compute[8] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 216)]))\n                 compute[9] = (compute[9] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 243)]))\n                 compute[10] = (compute[10] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 270)]))\n                 compute[11] = (compute[11] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 297)]))\n                 compute[12] = (compute[12] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 324)]))\n                 compute[13] = (compute[13] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 351)]))\n                 compute[14] = (compute[14] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 378)]))\n                 compute[15] = (compute[15] + (pad_temp.global.global.shared[(((((threadIdx.x/224)*228) + (threadIdx.x % 224)) + (ry*228)) + rx)]*input1.shared[(((((rc*3) + ry)*3) + rx) + 405)]))\n               }\n             }\n           }\n         }\n         compute[(((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224))] = max((((compute[0] + input2[((blockIdx.x/112)*16)])*input3[((blockIdx.x/112)*16)]) + input4[((blockIdx.x/112)*16)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 50176)] = max((((compute[1] + input2[(((blockIdx.x/112)*16) + 1)])*input3[(((blockIdx.x/112)*16) + 1)]) + input4[(((blockIdx.x/112)*16) + 1)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 100352)] = max((((compute[2] + input2[(((blockIdx.x/112)*16) + 2)])*input3[(((blockIdx.x/112)*16) + 2)]) + input4[(((blockIdx.x/112)*16) + 2)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 150528)] = max((((compute[3] + input2[(((blockIdx.x/112)*16) + 3)])*input3[(((blockIdx.x/112)*16) + 3)]) + input4[(((blockIdx.x/112)*16) + 3)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 200704)] = max((((compute[4] + input2[(((blockIdx.x/112)*16) + 4)])*input3[(((blockIdx.x/112)*16) + 4)]) + input4[(((blockIdx.x/112)*16) + 4)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 250880)] = max((((compute[5] + input2[(((blockIdx.x/112)*16) + 5)])*input3[(((blockIdx.x/112)*16) + 5)]) + input4[(((blockIdx.x/112)*16) + 5)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 301056)] = max((((compute[6] + input2[(((blockIdx.x/112)*16) + 6)])*input3[(((blockIdx.x/112)*16) + 6)]) + input4[(((blockIdx.x/112)*16) + 6)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 351232)] = max((((compute[7] + input2[(((blockIdx.x/112)*16) + 7)])*input3[(((blockIdx.x/112)*16) + 7)]) + input4[(((blockIdx.x/112)*16) + 7)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 401408)] = max((((compute[8] + input2[(((blockIdx.x/112)*16) + 8)])*input3[(((blockIdx.x/112)*16) + 8)]) + input4[(((blockIdx.x/112)*16) + 8)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 451584)] = max((((compute[9] + input2[(((blockIdx.x/112)*16) + 9)])*input3[(((blockIdx.x/112)*16) + 9)]) + input4[(((blockIdx.x/112)*16) + 9)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 501760)] = max((((compute[10] + input2[(((blockIdx.x/112)*16) + 10)])*input3[(((blockIdx.x/112)*16) + 10)]) + input4[(((blockIdx.x/112)*16) + 10)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 551936)] = max((((compute[11] + input2[(((blockIdx.x/112)*16) + 11)])*input3[(((blockIdx.x/112)*16) + 11)]) + input4[(((blockIdx.x/112)*16) + 11)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 602112)] = max((((compute[12] + input2[(((blockIdx.x/112)*16) + 12)])*input3[(((blockIdx.x/112)*16) + 12)]) + input4[(((blockIdx.x/112)*16) + 12)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 652288)] = max((((compute[13] + input2[(((blockIdx.x/112)*16) + 13)])*input3[(((blockIdx.x/112)*16) + 13)]) + input4[(((blockIdx.x/112)*16) + 13)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 702464)] = max((((compute[14] + input2[(((blockIdx.x/112)*16) + 14)])*input3[(((blockIdx.x/112)*16) + 14)]) + input4[(((blockIdx.x/112)*16) + 14)]), 0.000000f)\n         compute[((((((blockIdx.x + ((blockIdx.x/112)*1792))*2) + (threadIdx.x/224))*224) + (threadIdx.x % 224)) + 752640)] = max((((compute[15] + input2[(((blockIdx.x/112)*16) + 15)])*input3[(((blockIdx.x/112)*16) + 15)]) + input4[(((blockIdx.x/112)*16) + 15)]), 0.000000f)\n       }\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/using_external_lib.py",
    "lines": [
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6661633,
    "satd_repo": 70746484,
    "satd_sha": "f34e1744a29a1ba10d0cd15c99aa3d3ff5b30140",
    "satd_text": " y = leak_relu(x)\n grad = indicator(x > 0) + alpha * indicator(x < 0)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/top/nn/nn.cc",
    "lines": [
      363,
      364
    ],
    "matched_text": "    // y = leak_relu(x)"
  },
  {
    "satd_id": 6661712,
    "satd_repo": 70746484,
    "satd_sha": "e6319f62d0ec76fc3bd020357260b7705f45176a",
    "satd_text": " TODO: in keras, padded zeros are not calculated",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "nnvm/python/nnvm/frontend/keras.py",
    "lines": [
      265
    ],
    "matched_text": "            # TODO: in keras, padded zeros are not calculated"
  },
  {
    "satd_id": 6661714,
    "satd_repo": 70746484,
    "satd_sha": "e6319f62d0ec76fc3bd020357260b7705f45176a",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/keras.py",
    "lines": [
      330
    ],
    "matched_text": "def _default_skip(insym, keras_layer, _): # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6661728,
    "satd_repo": 70746484,
    "satd_sha": "a0b0546a29c93bcd7b715c11dab1eb71922dd3c1",
    "satd_text": " Enable static-libstdc++ to make it easier to link this library with\n other C++ compilers",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/conda/build.sh",
    "lines": [
      19,
      20
    ],
    "matched_text": "# Enable static-libstdc++ to make it easier to link this library with"
  },
  {
    "satd_id": 6661752,
    "satd_repo": 70746484,
    "satd_sha": "aa9528b3f6860becef490d98e6cd1460cc3411ce",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/coreml.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6661833,
    "satd_repo": 70746484,
    "satd_sha": "d25138e6c9a654fb61dd030952c0396375d0733e",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_fold_axis.py",
    "lines": [
      30
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6661833,
    "satd_repo": 70746484,
    "satd_sha": "d25138e6c9a654fb61dd030952c0396375d0733e",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_simplify_inference.py",
    "lines": [
      22
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6661839,
    "satd_repo": 70746484,
    "satd_sha": "5541a27502853f57779926f82649fafb6d4b6bb9",
    "satd_text": " Hack for mobilenet, because there is less connectivity",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/init.py",
    "lines": [
      103
    ],
    "matched_text": "        # Hack for mobilenet, because there is less connectivity"
  },
  {
    "satd_id": 6661856,
    "satd_repo": 70746484,
    "satd_sha": "b65c22128211234aa251f06467fc46e6266069d7",
    "satd_text": " By default we cleanup - remove the container once it finish running (--rm)\n and share the PID namespace (--pid=host) so the process inside does not have\n pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/ci_build/ci_build.sh",
    "lines": [
      111,
      112,
      113
    ],
    "matched_text": "# By default we cleanup - remove the container once it finish running (--rm)"
  },
  {
    "satd_id": 6661901,
    "satd_repo": 70746484,
    "satd_sha": "950aa1a0c2b340c3ccc5bbfa326566a5e2991df4",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/resnet.py",
    "lines": [
      26
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6661912,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " some hacks for onnx problem",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/onnx.py",
    "lines": [
      265
    ],
    "matched_text": "            # some hacks for onnx problem"
  },
  {
    "satd_id": 6661918,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " TODO(zhreshold): make sure ceil_mode in onnx, and layout?",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/onnx.py",
    "lines": [
      64
    ],
    "matched_text": "        # TODO(zhreshold): make sure ceil_mode in onnx, and layout?"
  },
  {
    "satd_id": 6661933,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " TODO(zhreshold): 'spatial' is not properly handled here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/frontend/onnx.py",
    "lines": [
      89
    ],
    "matched_text": "    # TODO(zhreshold): 'spatial' is not properly handled here."
  },
  {
    "satd_id": 6661938,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/testing/resnet.py",
    "lines": [
      141
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6661938,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/mxnet/model_zoo/resnet.py",
    "lines": [
      137
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6661944,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " TODO(zhreshold): allow shape inference for batch size > 1",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/onnx/model_zoo/super_resolution.py",
    "lines": [
      32
    ],
    "matched_text": "    # TODO(zhreshold): allow shape inference for batch size > 1"
  },
  {
    "satd_id": 6661947,
    "satd_repo": 70746484,
    "satd_sha": "4f664f5bd45547c268dbffc1078f343dd7c541bf",
    "satd_text": " if _parse_bool_str(attrs, 'fix_gamma'):\n     _warn_not_used('fix_gamma', 'batch_norm')\n if _parse_bool_str(attrs, 'momentum'):\n     _warn_not_used('momentum', 'batch_norm')",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6661962,
    "satd_repo": 70746484,
    "satd_sha": "dddd8d1a5448124bb5e9e7b6d7c2379beeb5e8c3",
    "satd_text": " This usually gives better performance than nvrtc mode.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/mobilenet_inference_gpu.py",
    "lines": [
      20
    ],
    "matched_text": "# This usually gives better performance than nvrtc mode."
  },
  {
    "satd_id": 6661974,
    "satd_repo": 70746484,
    "satd_sha": "b7b0061100c1b8b5ebd7abb96d54b7510226d3d7",
    "satd_text": " NNVM optimizes the graph and relies on TVM to generate fast GPU code.\n To get the maximum performance, we need to enable nvcc's compiler hook.\n This gives better performance than nvrtc mode.\n We use nnvm's testing utility to produce the model description and random parameters so that the example does not\n Compile the Graph\n - net: the graph representation of the computation\n - params: a dictionary of str to parameters\n When parameters are provided, NNVM will pre-compute certain part of the graph if possible (e.g. simplify batch normalization to scale shift),\n and return the updated parameters.\n To deploy the module, we call :any:`tvm.contrib.graph_runtime.create` passing in the graph, the lib, and context.\n convert to numpy",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6661993,
    "satd_repo": 70746484,
    "satd_sha": "34d74282ec0adce60eda4298b82e411e3dd17543",
    "satd_text": "#####################################################################\n Register the NVCC Compiler Option\n ---------------------------------\n NNVM optimizes the graph and relies on TVM to generate fast\n GPU code, to get the maximum performance, we need to enable\n nvcc's compiler hook. This gives better performance than nvrtc mode.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tutorials/mobilenet_inference_gpu.py",
    "lines": [
      16,
      17,
      18,
      19,
      20,
      21
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6662063,
    "satd_repo": 70746484,
    "satd_sha": "343c19a5bbc55f39e6f991dfcc794c89bb9d03c0",
    "satd_text": " NOTE: this involves graph lookup and can be slow",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/compiler/compile_engine.cc",
    "lines": [
      243
    ],
    "matched_text": "// NOTE: this involves graph lookup and can be slow"
  },
  {
    "satd_id": 6662130,
    "satd_repo": 70746484,
    "satd_sha": "8aa0100064c3f9515eb56745760b7a0b4377b3f9",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662130,
    "satd_repo": 70746484,
    "satd_sha": "8aa0100064c3f9515eb56745760b7a0b4377b3f9",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/reduction.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662130,
    "satd_repo": 70746484,
    "satd_sha": "8aa0100064c3f9515eb56745760b7a0b4377b3f9",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/tensor.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662130,
    "satd_repo": 70746484,
    "satd_sha": "8aa0100064c3f9515eb56745760b7a0b4377b3f9",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/transform.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662143,
    "satd_repo": 70746484,
    "satd_sha": "389a00f604b436cb51674c3e183d0f283aca5a36",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/mxnet/model_zoo/resnet.py",
    "lines": [
      197
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6662143,
    "satd_repo": 70746484,
    "satd_sha": "389a00f604b436cb51674c3e183d0f283aca5a36",
    "satd_text": " Although kernel is not used here when global_pool=True, we should put one",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/frontend/mxnet/model_zoo/resnet.py",
    "lines": [
      254
    ],
    "matched_text": "    # Although kernel is not used here when global_pool=True, we should put one"
  },
  {
    "satd_id": 6662154,
    "satd_repo": 70746484,
    "satd_sha": "389a00f604b436cb51674c3e183d0f283aca5a36",
    "satd_text": " waiting for max_pool2d\n test_forward_vgg()\n test_forward_resnet()",
    "satd_label": "Test-SATD",
    "satd_label_short": "tes",
    "file": "nnvm/tests/python/frontend/mxnet/test_forward.py",
    "lines": [
      86,
      87,
      88
    ],
    "matched_text": "    # waiting for max_pool2d"
  },
  {
    "satd_id": 6662159,
    "satd_repo": 70746484,
    "satd_sha": "2b3d2e21b78b0fa0a005d457c1835218b52693f0",
    "satd_text": " Broadcasting operator, can always map output axis to the input in order.\n for example :code:`out[i, ax1, j, ax2] = input[i, j]`.\n Note that the axis need to be in order so transpose is not a bcast operator.\n Injective operator, can always injectively map output axis to a single input axis.\n All injective operator can still be safely fused to injective and reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6662167,
    "satd_repo": 70746484,
    "satd_sha": "2b3d2e21b78b0fa0a005d457c1835218b52693f0",
    "satd_text": " leaky_relu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      21
    ],
    "matched_text": "# leaky_relu"
  },
  {
    "satd_id": 6662179,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662179,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/tensor.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662179,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/transform.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662181,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " TODO(sxj) add support for general reshape",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "nnvm/python/nnvm/top/transform.py",
    "lines": [
      25
    ],
    "matched_text": "    # TODO(sxj) add support for general reshape"
  },
  {
    "satd_id": 6662189,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662189,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/tensor.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662189,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/transform.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662201,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662201,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/tensor.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662201,
    "satd_repo": 70746484,
    "satd_sha": "215693df0447ec6761a20faeec549500e9542511",
    "satd_text": " pylint: disable=invalid-name, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/top/transform.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-argument"
  },
  {
    "satd_id": 6662231,
    "satd_repo": 70746484,
    "satd_sha": "c829bd865f2b128d81097dfd1fd2604366ba7d91",
    "satd_text": "!\n *  Copyright (c) 2017 by Contributors\n * \\file print_graph_ir.cc\n * \\brief Print the graph IR in LLVM style human readable format.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/pass/print_graph_ir.cc",
    "lines": [
      1,
      2,
      3,
      4,
      5
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662236,
    "satd_repo": 70746484,
    "satd_sha": "c829bd865f2b128d81097dfd1fd2604366ba7d91",
    "satd_text": " Before simplify",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/tests/python/compiler/test_simplify_batchnorm.py",
    "lines": [
      20
    ],
    "matched_text": "    # Before simplify"
  },
  {
    "satd_id": 6662260,
    "satd_repo": 70746484,
    "satd_sha": "7c95535c1cb220c4d6a627bc10e69bbca9942d14",
    "satd_text": " TODO(ziheng): this pass now mutates the original graph structure\n This might not be a good thing, change to copy the structure instead\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/compiler/pass/precompute_prune.cc",
    "lines": [
      55,
      56
    ],
    "matched_text": "          // TODO(ziheng): this pass now mutates the original graph structure"
  },
  {
    "satd_id": 6662265,
    "satd_repo": 70746484,
    "satd_sha": "7c95535c1cb220c4d6a627bc10e69bbca9942d14",
    "satd_text": " TODO(ziheng): this pass now mutates the original graph structure\n This might not be a good thing, change to copy the structure instead\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/compiler/pass/precompute_prune.cc",
    "lines": [
      55,
      56
    ],
    "matched_text": "          // TODO(ziheng): this pass now mutates the original graph structure"
  },
  {
    "satd_id": 6662413,
    "satd_repo": 70746484,
    "satd_sha": "0aa8ce0197faccf3dac7732a623d56677afeb7fc",
    "satd_text": " The name of the Pygments (syntax highlighting) style to use.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/docs/conf.py",
    "lines": [
      105
    ],
    "matched_text": "# The name of the Pygments (syntax highlighting) style to use."
  },
  {
    "satd_id": 6662416,
    "satd_repo": 70746484,
    "satd_sha": "0aa8ce0197faccf3dac7732a623d56677afeb7fc",
    "satd_text": " Add any paths that contain custom static files (such as style sheets) here,\n relative to this directory. They are copied after the builtin static files,\n so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/docs/conf.py",
    "lines": [
      129,
      130,
      131
    ],
    "matched_text": "# Add any paths that contain custom static files (such as style sheets) here,"
  },
  {
    "satd_id": 6662432,
    "satd_repo": 70746484,
    "satd_sha": "0aa8ce0197faccf3dac7732a623d56677afeb7fc",
    "satd_text": " If true, `todo` and `todoList` produce output, else they produce nothing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/docs/conf.py",
    "lines": [
      114
    ],
    "matched_text": "# If true, `todo` and `todoList` produce output, else they produce nothing."
  },
  {
    "satd_id": 6662489,
    "satd_repo": 70746484,
    "satd_sha": "13388655ebe076280d382573153c554fcf4ade9c",
    "satd_text": " leaky_rlu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/top/nn/nn.cc",
    "lines": [
      235
    ],
    "matched_text": "// leaky_rlu"
  },
  {
    "satd_id": 6662491,
    "satd_repo": 70746484,
    "satd_sha": "13388655ebe076280d382573153c554fcf4ade9c",
    "satd_text": " leaky_rlu",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/top/nn/nn.cc",
    "lines": [
      235
    ],
    "matched_text": "// leaky_rlu"
  },
  {
    "satd_id": 6662507,
    "satd_repo": 70746484,
    "satd_sha": "be1660b1676d10c8b3d900ad4f75a1186e157dec",
    "satd_text": " concat TODO(eric): change name(concat->concatenate) and argument(dim->axis)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/top/tensor.cc",
    "lines": [
      100
    ],
    "matched_text": "// concat TODO(eric): change name(concat->concatenate) and argument(dim->axis)"
  },
  {
    "satd_id": 6662570,
    "satd_repo": 70746484,
    "satd_sha": "96db41db947d0f4a26c9547d032347cf44ab0cd4",
    "satd_text": " Choose the plan which leads to minimal memory usage",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/pass/plan_memory.cc",
    "lines": [
      292
    ],
    "matched_text": "    // Choose the plan which leads to minimal memory usage"
  },
  {
    "satd_id": 6662690,
    "satd_repo": 70746484,
    "satd_sha": "ac070f83b4f88dfad60ddf2ef200a6f4e18c6552",
    "satd_text": " construct mirror reduece memory strategy if needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/pass/gradient.cc",
    "lines": [
      80
    ],
    "matched_text": "  // construct mirror reduece memory strategy if needed"
  },
  {
    "satd_id": 6662695,
    "satd_repo": 70746484,
    "satd_sha": "ac070f83b4f88dfad60ddf2ef200a6f4e18c6552",
    "satd_text": "! \\brief helper macro to supress unused warning ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/base.h",
    "lines": [
      91
    ],
    "matched_text": "/*! \\brief helper macro to supress unused warning */"
  },
  {
    "satd_id": 6662703,
    "satd_repo": 70746484,
    "satd_sha": "98a67d9bf8a57352419375fdbbd4fd28d720f3cf",
    "satd_text": "! \\brief helper macro to supress unused warning ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/base.h",
    "lines": [
      91
    ],
    "matched_text": "/*! \\brief helper macro to supress unused warning */"
  },
  {
    "satd_id": 6662757,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief An any class that is compatible to std::any in c++17.\n *\n * \\code\n *   dmlc::any a = std::string(\"mydear\"), b = 1;\n *   // get reference out and add it\n *   dmlc::get<int>(b) += 1;\n *   // a is now string\n *   LOG(INFO) << dmlc::get<std::string>(a);\n *   // a is now 2, the string stored will be properly destructed\n *   a = std::move(b);\n *   LOG(INFO) << dmlc::get<int>(a);\n * \\endcode\n * \\sa get\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/any.h",
    "lines": [
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662807,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "! \\brief helper macro to generate string concat ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/base.h",
    "lines": [
      85
    ],
    "matched_text": "/*! \\brief helper macro to generate string concat */"
  },
  {
    "satd_id": 6662824,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief whether throw dmlc::Error instead of\n *  directly calling abort when FATAL error occured\n *  NOTE: this may still not be perfect.\n *  do not use FATAL and CHECK in destructors\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/base.h",
    "lines": [
      14,
      15,
      16,
      17,
      18,
      19
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662825,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief Disable copy constructor and assignment operator.\n *\n * If C++11 is supported, both copy and move constructors and\n * assignment operators are deleted explicitly. Otherwise, they are\n * only declared but not implemented. Place this macro in private\n * section if C++11 is not available.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/base.h",
    "lines": [
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662866,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief Helper class to read JSON into a class or struct object.\n * \\code\n *  struct Param {\n *    std::string name;\n *    int value;\n *    // define load function from JSON\n *    inline void Load(dmlc::JSONReader *reader) {\n *      dmlc::JSONStructReadHelper helper;\n *      helper.DeclareField(\"name\", &name);\n *      helper.DeclareField(\"value\", &value);\n *      helper.ReadAllFields(reader);\n *    }\n *  };\n * \\endcode\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/json.h",
    "lines": [
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662892,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": " This class is used to explicitly ignore values in the conditional\n logging macros.  This avoids compiler warnings like \"value computed\n is not used\" and \"statement has no effect\".",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/logging.h",
    "lines": [
      248,
      249,
      250
    ],
    "matched_text": "// This class is used to explicitly ignore values in the conditional"
  },
  {
    "satd_id": 6662899,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n   * \\brief customized logging of the message.\n   * This function won't be implemented by libdmlc\n   * \\param msg The message to be logged.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/logging.h",
    "lines": [
      198,
      199,
      200,
      201,
      202
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6662909,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief a shared pointer like type that allocate object\n *   from a threadlocal object pool. This object is not thread-safe\n *   but can be faster than shared_ptr in certain usecases.\n * \\tparam T the data type.\n ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "nnvm/include/dmlc/memory.h",
    "lines": [
      125,
      126,
      127,
      128,
      129,
      130
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662943,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief macro used to declare parameter\n *\n * Example:\n * \\code\n *   struct Param : public dmlc::Parameter<Param> {\n *     // declare parameters in header file\n *     DMLC_DECLARE_PARAMETER(Param) {\n *        // details of declarations\n *     }\n *   };\n * \\endcode\n *\n * This macro need to be put in a source file so that registeration only happens once.\n * Refer to example code in Parameter for details\n *\n * \\param PType the name of parameter struct.\n * \\sa Parameter\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/parameter.h",
    "lines": [
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6662944,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": " TODO(bing) better error message",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/parameter.h",
    "lines": [
      393
    ],
    "matched_text": "    // TODO(bing) better error message"
  },
  {
    "satd_id": 6662980,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\brief Macro used to register parameter.\n *\n * This macro need to be put in a source file so that registeration only happens once.\n * Refer to example code in Parameter for details\n * \\param PType the type of parameter struct.\n * \\sa Parameter\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/parameter.h",
    "lines": [
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663035,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": " The following piece of code will be template heavy and less documented\n singleton parameter manager for certain type, used for initialization",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/parameter.h",
    "lines": [
      472,
      473
    ],
    "matched_text": "// The following piece of code will be template heavy and less documented"
  },
  {
    "satd_id": 6663054,
    "satd_repo": 70746484,
    "satd_sha": "5cf08d6c9bc3f55807447b8b330075898b44fd2a",
    "satd_text": "!\n * \\def DMLC_REGISTRY_ENABLE\n * \\brief Macro to enable the registry of EntryType.\n * This macro must be used under namespace dmlc, and only used once in cc file.\n * \\param EntryType Type of registry entry\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/dmlc/registry.h",
    "lines": [
      196,
      197,
      198,
      199,
      200,
      201
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663106,
    "satd_repo": 70746484,
    "satd_sha": "0538a9fc1b8fd203e075a4ad027f8086623a937d",
    "satd_text": " search memory block in [size / match_range_, size * match_range_)\n TODO(tqchen) add size of the dtype, assume 4 bytes for now",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/pass/plan_memory.cc",
    "lines": [
      26,
      27
    ],
    "matched_text": "    // search memory block in [size / match_range_, size * match_range_)"
  },
  {
    "satd_id": 6663198,
    "satd_repo": 70746484,
    "satd_sha": "ea8d2292ce6810cf6c78e04242f7fa5e9a20d707",
    "satd_text": "!\n * \\brief we always used NodePtr for a reference pointer\n *  to the node, so this alias can be changed in case we need\n *  even faster graph composition than 3M ops/sec.\n *\n *  By default, NodePtr is a std::shared_ptr of node\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/nnvm/node.h",
    "lines": [
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663233,
    "satd_repo": 70746484,
    "satd_sha": "e4a872d108356407d25a05f316fd55434c235395",
    "satd_text": " coding: utf-8\n pylint: disable=invalid-name, protected-access, too-many-arguments, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/graph.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6663233,
    "satd_repo": 70746484,
    "satd_sha": "e4a872d108356407d25a05f316fd55434c235395",
    "satd_text": " coding: utf-8\n pylint: disable=invalid-name, protected-access, too-many-arguments, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/symbol.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6663240,
    "satd_repo": 70746484,
    "satd_sha": "e4a872d108356407d25a05f316fd55434c235395",
    "satd_text": " coding: utf-8\n pylint: disable=invalid-name, protected-access, too-many-arguments, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/graph.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6663240,
    "satd_repo": 70746484,
    "satd_sha": "e4a872d108356407d25a05f316fd55434c235395",
    "satd_text": " coding: utf-8\n pylint: disable=invalid-name, protected-access, too-many-arguments, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/python/nnvm/symbol.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6663281,
    "satd_repo": 70746484,
    "satd_sha": "39dfff8ac10d3c12db36bfa341e55728e0d85f5d",
    "satd_text": "! \\brief  macro to guard beginning and end section of all functions ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "nnvm/src/c_api/c_api_common.h",
    "lines": [
      16
    ],
    "matched_text": "/*! \\brief  macro to guard beginning and end section of all functions */"
  },
  {
    "satd_id": 6663447,
    "satd_repo": 70746484,
    "satd_sha": "5dc70763e173e71b2e52feea7240bd57def347cb",
    "satd_text": "!\n * \\brief Index to the graph.\n *  Maps pointers to Node to consecutive integers.\n *\n *  This is an Auxililary data structure that can be used\n *  to iterate over the graph in a more efficient manner.\n *  It also allows storing\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/nngraph/graph_attr_types.h",
    "lines": [
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663527,
    "satd_repo": 70746484,
    "satd_sha": "66b9ef2343e9b01330388540324e444af72dd7a5",
    "satd_text": "!\n * \\def NNGRAPH_REGISTER_OP\n * \\brief Register\n * This macro must be used under namespace dmlc, and only used once in cc file.\n * \\param OpName The name of registry\n *\n * \\code\n *\n *  NNGRAPH_REGISTER_OP(add)\n *  .describe(\"add two inputs together\")\n *  .set_num_inputs(2)\n *  .attr<OpKernel>(\"gpu_kernel\", AddKernel);\n *\n * \\endcode\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/include/nngraph/op.h",
    "lines": [
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663540,
    "satd_repo": 70746484,
    "satd_sha": "66b9ef2343e9b01330388540324e444af72dd7a5",
    "satd_text": " NOTE: possible change to thread local memory pool\n via std::allocate_shared instead for faster allocation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "nnvm/src/core/node.cc",
    "lines": [
      33,
      34
    ],
    "matched_text": "  // NOTE: possible change to thread local memory pool"
  },
  {
    "satd_id": 6663608,
    "satd_repo": 70746484,
    "satd_sha": "d53affdc79bfcd29da5b50c3f6d7328fbf56f732",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name"
  },
  {
    "satd_id": 6663608,
    "satd_repo": 70746484,
    "satd_sha": "d53affdc79bfcd29da5b50c3f6d7328fbf56f732",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_common.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name"
  },
  {
    "satd_id": 6663613,
    "satd_repo": 70746484,
    "satd_sha": "d53affdc79bfcd29da5b50c3f6d7328fbf56f732",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name"
  },
  {
    "satd_id": 6663613,
    "satd_repo": 70746484,
    "satd_sha": "d53affdc79bfcd29da5b50c3f6d7328fbf56f732",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_common.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,invalid-name"
  },
  {
    "satd_id": 6663629,
    "satd_repo": 70746484,
    "satd_sha": "3d74b48f458d23c7e95a88b82f0230348a33e767",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6663654,
    "satd_repo": 70746484,
    "satd_sha": "5af512808d24d4244297a84746346628359784ae",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6663657,
    "satd_repo": 70746484,
    "satd_sha": "5af512808d24d4244297a84746346628359784ae",
    "satd_text": " pylint: disable=invalid-name,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/generic/nn.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-argument"
  },
  {
    "satd_id": 6663658,
    "satd_repo": 70746484,
    "satd_sha": "c7e7e7f5e60cadc4be465497980ae3a0395dbbb6",
    "satd_text": " TODO: the warp size of OpenCL device is not always 1\n               e.g. Intel GPU has a sub group concept which contains 8 - 32 work items,\n               corresponding to the number of SIMD entries the heardware configures.\n               We need to figure out a way to query this information from the hardware.\n      ",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/opencl/opencl_device_api.cc",
    "lines": [
      45,
      46,
      47,
      48,
      49
    ],
    "matched_text": "      /* TODO: the warp size of OpenCL device is not always 1"
  },
  {
    "satd_id": 6663736,
    "satd_repo": 70746484,
    "satd_sha": "1418134003f557c65c5a52f5a7aedb8c1abc3533",
    "satd_text": " Fault tolerence to un-handled requested value",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/contrib/test_rpc_tracker.py",
    "lines": [
      42
    ],
    "matched_text": "        # Fault tolerence to un-handled requested value"
  },
  {
    "satd_id": 6663751,
    "satd_repo": 70746484,
    "satd_sha": "6bd8dbc764febd9a25d9010424e71cf25da5edee",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/rpc.py",
    "lines": [
      32
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6663751,
    "satd_repo": 70746484,
    "satd_sha": "6bd8dbc764febd9a25d9010424e71cf25da5edee",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/rpc/proxy.py",
    "lines": [
      8
    ],
    "matched_text": "# pylint: disable=unused-variable, unused-argument"
  },
  {
    "satd_id": 6663751,
    "satd_repo": 70746484,
    "satd_sha": "6bd8dbc764febd9a25d9010424e71cf25da5edee",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/rpc/server.py",
    "lines": [
      32
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6663851,
    "satd_repo": 70746484,
    "satd_sha": "cc7a8fcf99c3c404a64bff8dafa384cb247ce81e",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/generic.py",
    "lines": [
      6
    ],
    "matched_text": "# pylint: disable=unused-argument"
  },
  {
    "satd_id": 6663869,
    "satd_repo": 70746484,
    "satd_sha": "e15aae2b3e62929e142b264564728fd1197c77d1",
    "satd_text": " Algorithm\n\n To implement this rewrite rule, we can do the follow step:\n For each warp memory alloc\n - Use linear pattern detector on load index to find m\n - Deduce n given warp_size and alloc size\n - Now that we have m, n, warp_size, we can proceed with the rewrite",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/lower_warp_memory.cc",
    "lines": [
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    "matched_text": "// Algorithm"
  },
  {
    "satd_id": 6663916,
    "satd_repo": 70746484,
    "satd_sha": "6292204e948addf6f639e9c6b9f7f54c4e5c8c4d",
    "satd_text": "pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/target.py",
    "lines": [
      254
    ],
    "matched_text": "            #pylint: disable=unused-argument"
  },
  {
    "satd_id": 6663936,
    "satd_repo": 70746484,
    "satd_sha": "893a2ae762e5c4213e79d1e8666465a676e8a880",
    "satd_text": " a technique that enables overriding macro names on the number of parameters. This is used\n to define other macros below",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/logging.h",
    "lines": [
      9,
      10
    ],
    "matched_text": "// a technique that enables overriding macro names on the number of parameters. This is used"
  },
  {
    "satd_id": 6663938,
    "satd_repo": 70746484,
    "satd_sha": "893a2ae762e5c4213e79d1e8666465a676e8a880",
    "satd_text": "!\n * \\brief COND_X calls COND_X_N where N is the number of parameters passed to COND_X\n * X can be any of CHECK_GE, CHECK_EQ, CHECK, or LOG (defined dmlc-core/include/dmlc/logging.h.)\n * COND_X (but not COND_X_N) are supposed to be used outside this file.\n * The first parameter of COND_X (and therefore, COND_X_N), which we call 'quit_on_assert',\n * is a boolean. The rest of the parameters of COND_X is the same as the parameters of X.\n * quit_on_assert determines the overall behaviour of COND_X. If it's true COND_X\n * quits the program on assertion failure. If it's false, then it moves on and somehow reports\n * the assertion failure back to the macro caller in an appropriate manner (e.g, 'return false'\n * in a function, or 'continue' or 'break' in a loop)\n * The default behavior when quit_on_assertion is false, is to 'return false'. If this is not\n * desirable, the macro caller can pass one more last parameter to COND_X to tell COND_X what\n * to do when when quit_on_assertion is false and the assertion fails.\n *\n * Rationale: These macros were designed to implement functions that have two behaviours\n * in a concise way. Those behaviours are quitting on assertion failures, or trying to\n * move on from assertion failures. Note that these macros hide lots of control flow in them,\n * and therefore, makes the logic of the whole code slightly harder to understand. However,\n * in pieces of code that use these macros frequently, it will significantly shorten the\n * amount of code needed to be read, and we won't need to clutter the main logic of the\n * function by repetitive control flow structure. The first problem\n * mentioned will be improved over time as the developer gets used to the macro.\n *\n * Here is an example of how to use it\n * \\code\n * bool f(..., bool quit_on_assertion) {\n *   int a = 0, b = 0;\n *   ...\n *   a = ...\n *   b = ...\n *   // if quit_on_assertion is true, if a==b, continue, otherwise quit.\n *   // if quit_on_assertion is false, if a==b, continue, otherwise 'return false' (default behaviour)\n *   COND_CHECK_EQ(quit_on_assertion, a, b) << \"some error message when  quiting\"\n *   ...\n *   for (int i = 0; i < N; i++) {\n *     a = ...\n *     b = ...\n *     // if quit_on_assertion is true, if a==b, continue, otherwise quit.\n *     // if quit_on_assertion is false, if a==b, continue, otherwise 'break' (non-default\n *     // behaviour, therefore, has to be explicitly specified)\n *     COND_CHECK_EQ(quit_on_assertion, a, b, break) << \"some error message when  quiting\"\n *   }\n * }\n * \\endcode\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/logging.h",
    "lines": [
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6663987,
    "satd_repo": 70746484,
    "satd_sha": "34e31c44391037dd02ab0c75f3b3ec260babdcde",
    "satd_text": " We only handle the variable from function argument.\n If it does not come from args, then it could be allocated internally,\n it may possibly be in host or device address space.\n We do not handle this case, and skip it conservatively.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/verify_memory.cc",
    "lines": [
      118,
      119,
      120,
      121
    ],
    "matched_text": "    // We only handle the variable from function argument."
  },
  {
    "satd_id": 6664022,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664022,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664022,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/yolo2/region.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664024,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664024,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664024,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/yolo2/region.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664025,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/region_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664025,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/reorg_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664025,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/shortcut_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664026,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/region_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664026,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/reorg_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664026,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/shortcut_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664027,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/region_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664027,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/reorg_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664027,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/shortcut_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6664030,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664030,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/vision.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664030,
    "satd_repo": 70746484,
    "satd_sha": "7742123a07f5f8a240d2f66acbaedfb0afc10737",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/vision/yolo2/region.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      449
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      490
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      536
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      745
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      767
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      791
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      966
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6664072,
    "satd_repo": 70746484,
    "satd_sha": "589a26515f10e222bc523692dd152023c810a200",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      1093
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6664144,
    "satd_repo": 70746484,
    "satd_sha": "28bb0f686e55ff80c589dbd900361f536c3430cd",
    "satd_text": " the address(in bits) becomes alloc_var + bits_offset;\n can be effectively converted to the element type.\n We need to convert bit_offset to offset of specific element type later.\n\n We use bits(instead of bytes) to support non-conventional indexing in hardware.\n When we are merging buffer together, the bits_offset are set to be aligned\n to certain value given by the max_simd_bits property of the special memory.\n\n This allows effective sharing among different types as long as their alignment\n requirement fits into the max_simd_bits.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/storage_rewrite.cc",
    "lines": [
      467,
      468,
      469,
      470,
      471,
      472,
      473,
      474,
      475,
      476
    ],
    "matched_text": "    // the address(in bits) becomes alloc_var + bits_offset;"
  },
  {
    "satd_id": 6664149,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664149,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664149,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_common.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664156,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664156,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_1x1.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664156,
    "satd_repo": 70746484,
    "satd_sha": "04fb550942db1324badab8efb0c89c570075b370",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d_avx_common.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6664168,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": "pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/conv2d_nchw.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long"
  },
  {
    "satd_id": 6664171,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664171,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/injective.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable,"
  },
  {
    "satd_id": 6664171,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664171,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace"
  },
  {
    "satd_id": 6664174,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/injective.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable,"
  },
  {
    "satd_id": 6664174,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace"
  },
  {
    "satd_id": 6664177,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664177,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/injective.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable,"
  },
  {
    "satd_id": 6664177,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6664177,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace"
  },
  {
    "satd_id": 6664179,
    "satd_repo": 70746484,
    "satd_sha": "0a410a39dc709afb2b612702113acde7bf6cf9c3",
    "satd_text": " pylint: disable=invalid-name, unused-variable, trailing-whitespace",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/opengl/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace"
  },
  {
    "satd_id": 6664190,
    "satd_repo": 70746484,
    "satd_sha": "fb556ef4b800883b8f3fb0be0cefd80e1efa2877",
    "satd_text": " pylint: disable=unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/peak.py",
    "lines": [
      192
    ],
    "matched_text": "        # pylint: disable=unused-argument"
  },
  {
    "satd_id": 6664200,
    "satd_repo": 70746484,
    "satd_sha": "2e94a4b55f976d39814996367115a8c5476d2d69",
    "satd_text": " pylint: disable=invalid-name,consider-using-enumerate,unused-argument,len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/tensor.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,consider-using-enumerate,unused-argument,len-as-condition"
  },
  {
    "satd_id": 6664205,
    "satd_repo": 70746484,
    "satd_sha": "79d503fd3b12bea8fc97d676d7527dabdb4ce494",
    "satd_text": " Detect useful invariant pattern and use them to visit child.\n Pattern: Var % const  == 0\n TODO(tqchen) merge these pattern to a generic scope info visitor.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_common.h",
    "lines": [
      29,
      30,
      31
    ],
    "matched_text": "  // Detect useful invariant pattern and use them to visit child."
  },
  {
    "satd_id": 6664445,
    "satd_repo": 70746484,
    "satd_sha": "79d503fd3b12bea8fc97d676d7527dabdb4ce494",
    "satd_text": " Query phyiscal device property\n find a memory that is host visible, no need to be consistent",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_device_api.cc",
    "lines": [
      537,
      538
    ],
    "matched_text": "  // Query phyiscal device property"
  },
  {
    "satd_id": 6664451,
    "satd_repo": 70746484,
    "satd_sha": "79d503fd3b12bea8fc97d676d7527dabdb4ce494",
    "satd_text": " Block until done, to make sure temp can be reused later.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_device_api.cc",
    "lines": [
      204
    ],
    "matched_text": "    // Block until done, to make sure temp can be reused later."
  },
  {
    "satd_id": 6664460,
    "satd_repo": 70746484,
    "satd_sha": "79d503fd3b12bea8fc97d676d7527dabdb4ce494",
    "satd_text": " cleanup vulkan related caches.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/vulkan/vulkan_module.cc",
    "lines": [
      54
    ],
    "matched_text": "    // cleanup vulkan related caches."
  },
  {
    "satd_id": 6664506,
    "satd_repo": 70746484,
    "satd_sha": "79d503fd3b12bea8fc97d676d7527dabdb4ce494",
    "satd_text": "!\n * \\brief Rewrite the pointer content type of arguments,\n *  as well as Alloc internal to the function to use\n *  the most frequently accessed type for load/store\n *  to avoid pointer casting in backend when possible.\n *\n * \\note implemeneted in storage_rewrite.cc\n * \\param f The function to be trasnformed\n * \\return Transformed function.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_pass.h",
    "lines": [
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6664832,
    "satd_repo": 70746484,
    "satd_sha": "f280f23a3dc2a11612b0b868995fab744bb87089",
    "satd_text": "!\n * \\brief Create a commutative reducer for a reduction\n *\n * \\param fcombine A function to combine exprs\n * \\param fidentity A function to initialize elements\n * \\param name The name of the operation\n *\n * \\return A reducer function which creates a reduce expression over an axis.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/include/topi/reduction.h",
    "lines": [
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6664929,
    "satd_repo": 70746484,
    "satd_sha": "f280f23a3dc2a11612b0b868995fab744bb87089",
    "satd_text": "!\n* \\brief Creates an operation that performs a leaky rectified linear unit\n*\n* \\param t The input tensor\n* \\param threshold The relu threshold (default 0)\n* \\param alpha The slope for the small gradient when t < threshold\n* \\param name The name of the operation\n* \\param tag The tag to mark the operation\n*\n* \\return A Tensor whose op member is the relu operation\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/include/topi/nn.h",
    "lines": [
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6664967,
    "satd_repo": 70746484,
    "satd_sha": "adceea22caf7a45a0ac323eba3dcf696714d7271",
    "satd_text": " To get the best performance, please change the following line\n to llvm -mcpu=core-avx2, or specific type of CPU you use",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_gemm.py",
    "lines": [
      55,
      56
    ],
    "matched_text": "# To get the best performance, please change the following line"
  },
  {
    "satd_id": 6664987,
    "satd_repo": 70746484,
    "satd_sha": "45138e9df1b8b22c79f18f28bb3ad6f62026fbfd",
    "satd_text": " After applying the above simple optimizations with only 18 lines of code,\n our generated code can achieve 60% of the `numpy` performance with MKL.\n Note that the outputs on the web page reflect the running times on a non-exclusive",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_gemm.py",
    "lines": [
      356,
      357,
      358
    ],
    "matched_text": "# After applying the above simple optimizations with only 18 lines of code,"
  },
  {
    "satd_id": 6665167,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_opengl.cc",
    "lines": [
      38
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6665184,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": "!\n   * \\brief Set input texture for an OpenGL program.\n   * Must call SetCurrentProgram before calling this.\n   * \\param program The OpenGL program.\n   * \\param name The texture uniform argument name.\n   * \\param unit The texture unit to use. Each input texture must occupy a\n   * different unit.\n   * \\param texture The OpenGL texture to pass in.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opengl/opengl_common.h",
    "lines": [
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6665223,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": " We always use the last texture unit as temporary.\n Therefore, we can have \"NumTextureUnits() - 1\" input textures.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opengl/opengl_device_api.cc",
    "lines": [
      510,
      511
    ],
    "matched_text": "  // We always use the last texture unit as temporary."
  },
  {
    "satd_id": 6665231,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": " WebGL2's glReadPixels API doesn't allow GL_RED user buffer format.\n Instead, We must use GL_RGBA. This means the data we retrieve has useless\n GBA channels. Here we are applying a dirty hack.\n TODO(zhixunt): We really want to utilize all RGBA channels in textures.\n\n WebGL2's glReadPixels API also doesn't allow GL_RED_INTEGER or\n GL_RGB_INTEGER user buffer format, which means we cannot retrieve integer\n texture data? (need to confirm)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opengl/opengl_device_api.cc",
    "lines": [
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448
    ],
    "matched_text": "  // WebGL2's glReadPixels API doesn't allow GL_RED user buffer format."
  },
  {
    "satd_id": 6665238,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": " TODO(zhixunt): This is a nasty hack to avoid comparison between\n incompatible enums. We should add kOpenGL to dlpack.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opengl/opengl_device_api.cc",
    "lines": [
      118,
      119
    ],
    "matched_text": "  // TODO(zhixunt): This is a nasty hack to avoid comparison between"
  },
  {
    "satd_id": 6665267,
    "satd_repo": 70746484,
    "satd_sha": "589831df65c9effbfbddedfb1fb90358ad354a65",
    "satd_text": " convert code for void argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opengl/opengl_module.cc",
    "lines": [
      75
    ],
    "matched_text": "  // convert code for void argument"
  },
  {
    "satd_id": 6665304,
    "satd_repo": 70746484,
    "satd_sha": "3df42cd76834378517ffd8dfb9c71161934f7a58",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_nhwc_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6665373,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return"
  },
  {
    "satd_id": 6665386,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return"
  },
  {
    "satd_id": 6665386,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable"
  },
  {
    "satd_id": 6665386,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6665389,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument,no-else-return"
  },
  {
    "satd_id": 6665389,
    "satd_repo": 70746484,
    "satd_sha": "1669481518b2f9e54273d8b88c94f632e2c420a9",
    "satd_text": " pylint: disable=invalid-name,unused-variable,unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/mali/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,unused-argument"
  },
  {
    "satd_id": 6665403,
    "satd_repo": 70746484,
    "satd_sha": "be457348e871dceb482f97210ab133cc31f830e4",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/upsampling_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6665418,
    "satd_repo": 70746484,
    "satd_sha": "50d8773b73ae66f7a174f85a5daa20739e088ccc",
    "satd_text": " our generated code can achieve 30% of the `numpy` performance with Apple implemented BLAS.\n Note that the outputs on the webpage reflect the running times on a non-exclusive\n Docker container, thereby they are *unreliable*. It is highly encouraged to run the\n tutorial by yourself to observe the performance gain acheived by TVM.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_gemm.py",
    "lines": [
      265,
      266,
      267,
      268
    ],
    "matched_text": "# our generated code can achieve 30% of the `numpy` performance with Apple implemented BLAS."
  },
  {
    "satd_id": 6665444,
    "satd_repo": 70746484,
    "satd_sha": "3e2b161885fbc166ab5b2118bde8e225bb143db7",
    "satd_text": " After applying the above simple optimizations with only 6 lines of code,\n our generated code can achieve 30% of numpy performance with Apple implemented BLAS.\n We can see TVM is very powerful tool to optimize low level computation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6665448,
    "satd_repo": 70746484,
    "satd_sha": "3e2b161885fbc166ab5b2118bde8e225bb143db7",
    "satd_text": " By simply tiling the loop 32x32, and hoisting k outside the blocking loops, we can see big\n speedup compared with the baseline.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/optimize/opt_gemm.py",
    "lines": [
      113,
      114
    ],
    "matched_text": "# By simply tiling the loop 32x32, and hoisting k outside the blocking loops, we can see big"
  },
  {
    "satd_id": 6665484,
    "satd_repo": 70746484,
    "satd_sha": "2ff74317751d8dd9b3b880491a658755f9fa4713",
    "satd_text": " cannot read from dst_ (no reduction)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/storage_rewrite.cc",
    "lines": [
      274
    ],
    "matched_text": "    // cannot read from dst_ (no reduction)"
  },
  {
    "satd_id": 6665531,
    "satd_repo": 70746484,
    "satd_sha": "a407ec153d1436bb8d25a0c62b7a3a0e6313b3c9",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6665567,
    "satd_repo": 70746484,
    "satd_sha": "85e4058c3522b2be2daa3db73f6a6a9ec40ab332",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long"
  },
  {
    "satd_id": 6665567,
    "satd_repo": 70746484,
    "satd_sha": "85e4058c3522b2be2daa3db73f6a6a9ec40ab332",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long"
  },
  {
    "satd_id": 6665575,
    "satd_repo": 70746484,
    "satd_sha": "cdb2f873df29d8619d6832fcee9ae4673b56fb80",
    "satd_text": " pylint: disable=invalid-name, unused-variable,",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/extern.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable,"
  },
  {
    "satd_id": 6665578,
    "satd_repo": 70746484,
    "satd_sha": "cdb2f873df29d8619d6832fcee9ae4673b56fb80",
    "satd_text": " pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rocm/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long"
  },
  {
    "satd_id": 6665591,
    "satd_repo": 70746484,
    "satd_sha": "36b34738e5a18417ec1d64e0a657121268a1a369",
    "satd_text": " pylint: disable=invalid-name, unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/binary_dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, unused-argument"
  },
  {
    "satd_id": 6665641,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      570,
      571
    ],
    "matched_text": "      // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665641,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      617,
      618
    ],
    "matched_text": "      // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665641,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_cuda.cc",
    "lines": [
      123,
      124
    ],
    "matched_text": "    // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665642,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      570,
      571
    ],
    "matched_text": "      // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665642,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      617,
      618
    ],
    "matched_text": "      // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665642,
    "satd_repo": 70746484,
    "satd_sha": "5d37be6259658ce7b47ab2eea79cba999d241041",
    "satd_text": " The assignment below introduces side-effect, and the resulting value cannot\n be reused across multiple expression, thus a new scope is needed",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_cuda.cc",
    "lines": [
      123,
      124
    ],
    "matched_text": "    // The assignment below introduces side-effect, and the resulting value cannot"
  },
  {
    "satd_id": 6665647,
    "satd_repo": 70746484,
    "satd_sha": "05b7bac24aca892ec5bc41a0240107569d23c193",
    "satd_text": " This tests whether algorithm and intrinsics expressions are simplified\n as much as possible first and then checked for equality. See Issue #696",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_schedule_tensorize.py",
    "lines": [
      129,
      130
    ],
    "matched_text": "# This tests whether algorithm and intrinsics expressions are simplified"
  },
  {
    "satd_id": 6665724,
    "satd_repo": 70746484,
    "satd_sha": "17e7e3d50a6d265d07396ff2dff961bd4ce8e76f",
    "satd_text": "!\n   * \\brief The offset factor to use when constructing buffers. If this is set to\n   * 0, then the offset field is not used.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/build_module.h",
    "lines": [
      90,
      91,
      92,
      93
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6665729,
    "satd_repo": 70746484,
    "satd_sha": "17e7e3d50a6d265d07396ff2dff961bd4ce8e76f",
    "satd_text": "!\n   * \\brief The data alignment to use when constructing buffers. If this is set to\n   * -1, then TVM's internal default will be used\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/build_module.h",
    "lines": [
      85,
      86,
      87,
      88
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6665780,
    "satd_repo": 70746484,
    "satd_sha": "9c0da90fb14efd45686fa035ae7cef8d83b41913",
    "satd_text": "!\n * \\brief Simplify the statement.\n * \\param stmt The statement to be simplifed.\n * \\param vrange The range information about the variable.\n * \\return Canonicalized statement.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_pass.h",
    "lines": [
      33,
      34,
      35,
      36,
      37,
      38
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6665781,
    "satd_repo": 70746484,
    "satd_sha": "9c0da90fb14efd45686fa035ae7cef8d83b41913",
    "satd_text": "!\n * \\brief Simplify the expression.\n * \\param expr The expression to be simplifed.\n * \\param vrange The range information about the variable.\n * \\return Canonicalized statement.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_pass.h",
    "lines": [
      25,
      26,
      27,
      28,
      29,
      30
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6665822,
    "satd_repo": 70746484,
    "satd_sha": "7d620be4a3afc10d979dbbb58262bb208dfcb681",
    "satd_text": "pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/conv2d_nchw.py",
    "lines": [
      1
    ],
    "matched_text": "#pylint: disable=invalid-name, no-member, too-many-locals, too-many-statements, too-many-arguments, too-many-branches, line-too-long"
  },
  {
    "satd_id": 6665831,
    "satd_repo": 70746484,
    "satd_sha": "c6a1241e74a4901ab95ba6c3806a474f2474c029",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6665831,
    "satd_repo": 70746484,
    "satd_sha": "c6a1241e74a4901ab95ba6c3806a474f2474c029",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/x86/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6665920,
    "satd_repo": 70746484,
    "satd_sha": "5f79521b8da4172553ba4da880d9b633b18b9d39",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d_transpose.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6665925,
    "satd_repo": 70746484,
    "satd_sha": "5f79521b8da4172553ba4da880d9b633b18b9d39",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_transpose_nchw_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=unused-variable"
  },
  {
    "satd_id": 6665933,
    "satd_repo": 70746484,
    "satd_sha": "0f1e0ff086d321ba9ece924f7e3589496a4b6fdb",
    "satd_text": " cleanup state",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/unroll_loop.cc",
    "lines": [
      106
    ],
    "matched_text": "    // cleanup state"
  },
  {
    "satd_id": 6665950,
    "satd_repo": 70746484,
    "satd_sha": "6894d42b6336fb0252c5e088f0780dc03877924f",
    "satd_text": " TODO(tqchen) libdevice linking not yet working.\n cg->AddLinkModule(std::move(mlib));",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/llvm/codegen_nvptx.cc",
    "lines": [
      183,
      184
    ],
    "matched_text": "      // TODO(tqchen) libdevice linking not yet working."
  },
  {
    "satd_id": 6665951,
    "satd_repo": 70746484,
    "satd_sha": "10faa8939e84fef1c87c03f96ef15272ee723a49",
    "satd_text": " always not inline compute function to make the code structure clean",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_cpu.cc",
    "lines": [
      321
    ],
    "matched_text": "      // always not inline compute function to make the code structure clean"
  },
  {
    "satd_id": 6665964,
    "satd_repo": 70746484,
    "satd_sha": "eb761f36302d24c740b77281ecdcdddb588edf36",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals, unused-argument"
  },
  {
    "satd_id": 6665965,
    "satd_repo": 70746484,
    "satd_sha": "592a1f65b5f5525d25a4daaf1452ae850ed74508",
    "satd_text": " Try to change broadcast(cast(x)) to cast(broadcast(x))\n For some targets, LLVM will generate more efficient FMA\n instruction with the latter. For example, vmla vs. vmlal\n on ARM.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/lower_intrin.cc",
    "lines": [
      47,
      48,
      49,
      50
    ],
    "matched_text": "    // Try to change broadcast(cast(x)) to cast(broadcast(x))"
  },
  {
    "satd_id": 6665990,
    "satd_repo": 70746484,
    "satd_sha": "f631fb43551dea59b99ecf448ac9cd793a11b1e2",
    "satd_text": " specially handle reduction inline for multiplre reductions.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/schedule_dataflow_rewrite.cc",
    "lines": [
      317
    ],
    "matched_text": "            // specially handle reduction inline for multiplre reductions."
  },
  {
    "satd_id": 6665992,
    "satd_repo": 70746484,
    "satd_sha": "9c2fc09535868e56bc40e0a4e57762ad4d5cfb24",
    "satd_text": " pylint: disable=invalid-name,unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable, unused-argument"
  },
  {
    "satd_id": 6666012,
    "satd_repo": 70746484,
    "satd_sha": "81f9d5b3469d4cdb2c9ebd671301719d9399c581",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6666012,
    "satd_repo": 70746484,
    "satd_sha": "81f9d5b3469d4cdb2c9ebd671301719d9399c581",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/depthwise_conv2d.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable"
  },
  {
    "satd_id": 6666075,
    "satd_repo": 70746484,
    "satd_sha": "203b818845eae83987d23ae389c640ed4c7d9808",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6666075,
    "satd_repo": 70746484,
    "satd_sha": "203b818845eae83987d23ae389c640ed4c7d9808",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6666079,
    "satd_repo": 70746484,
    "satd_sha": "203b818845eae83987d23ae389c640ed4c7d9808",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/dense.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6666079,
    "satd_repo": 70746484,
    "satd_sha": "203b818845eae83987d23ae389c640ed4c7d9808",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/pooling.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6666087,
    "satd_repo": 70746484,
    "satd_sha": "b78f01a91acb6819ca0a21e1a1ad227a61ada3d3",
    "satd_text": " Part of the code are adapted from Halide's CodeGen_LLVM",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      6
    ],
    "matched_text": "// Part of the code are adapted from Halide's CodeGen_LLVM"
  },
  {
    "satd_id": 6666109,
    "satd_repo": 70746484,
    "satd_sha": "891e226baea3a158efb14d9d326b530dcc3cb5cb",
    "satd_text": " const int local_address_space = 5;\n TODO(tqchen): for higher version of LLVM, local address space can be set.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_amdgpu.cc",
    "lines": [
      48,
      49
    ],
    "matched_text": "        // const int local_address_space = 5;"
  },
  {
    "satd_id": 6666111,
    "satd_repo": 70746484,
    "satd_sha": "891e226baea3a158efb14d9d326b530dcc3cb5cb",
    "satd_text": " TODO(tqchen) warp sync in CUDA9",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_amdgpu.cc",
    "lines": [
      105
    ],
    "matched_text": "      // TODO(tqchen) warp sync in CUDA9"
  },
  {
    "satd_id": 6666204,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/convolution.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666204,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/depthwise_convolution.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666205,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/convolution.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666205,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/depthwise_convolution.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666205,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/util.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable"
  },
  {
    "satd_id": 6666213,
    "satd_repo": 70746484,
    "satd_sha": "e05f54bee06dab4baba880c1b053004736650b5c",
    "satd_text": " pylint: disable=invalid-name,unused-variable,invalid-name",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/rasp/convolution.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,invalid-name"
  },
  {
    "satd_id": 6666216,
    "satd_repo": 70746484,
    "satd_sha": "f6bb7ababa2cb1dc634e087985bce2bbd6e9f6c4",
    "satd_text": " pylint: disable=invalid-name, unused-variable, trailing-whitespace",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace"
  },
  {
    "satd_id": 6666277,
    "satd_repo": 70746484,
    "satd_sha": "0560e1569ed3dbcfdc9d0d403cab0498d57cd7cd",
    "satd_text": " const int local_address_space = 5;\n TODO(tqchen): for higher version of LLVM, local address space can be set.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_nvptx.cc",
    "lines": [
      51,
      52
    ],
    "matched_text": "        // const int local_address_space = 5;"
  },
  {
    "satd_id": 6666281,
    "satd_repo": 70746484,
    "satd_sha": "0560e1569ed3dbcfdc9d0d403cab0498d57cd7cd",
    "satd_text": " TODO(tqchen) warp sync in CUDA9",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_nvptx.cc",
    "lines": [
      108
    ],
    "matched_text": "      // TODO(tqchen) warp sync in CUDA9"
  },
  {
    "satd_id": 6666296,
    "satd_repo": 70746484,
    "satd_sha": "efafa1a0dd12d155362b0224fb07e9569d9c6277",
    "satd_text": " pylint: disable=invalid-name, unused-variable, trailing-whitespace, no-member",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/elemwise.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace, no-member"
  },
  {
    "satd_id": 6666390,
    "satd_repo": 70746484,
    "satd_sha": "b3bb812697b7536574185e37b13ae471c8161f0d",
    "satd_text": " pylint: disable=invalid-name, unused-variable, trailing-whitespace ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/softmax.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, trailing-whitespace "
  },
  {
    "satd_id": 6666435,
    "satd_repo": 70746484,
    "satd_sha": "090468aa535320e629a6d781e18c7a5d09e2d9c2",
    "satd_text": " For now, rewrite unsafe select expression to if_then_else\n TODO(tqchen) pattern matching to support masked load",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/pass/rewrite_unsafe_select.cc",
    "lines": [
      15,
      16
    ],
    "matched_text": "// For now, rewrite unsafe select expression to if_then_else"
  },
  {
    "satd_id": 6666471,
    "satd_repo": 70746484,
    "satd_sha": "64870ffb86d07adbe4a42019e8782fb1295658c5",
    "satd_text": " not implemented",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/contrib/cudnn.py",
    "lines": [
      31
    ],
    "matched_text": "    # not implemented"
  },
  {
    "satd_id": 6666471,
    "satd_repo": 70746484,
    "satd_sha": "64870ffb86d07adbe4a42019e8782fb1295658c5",
    "satd_text": " not implemented",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "python/tvm/contrib/cudnn.py",
    "lines": [
      84
    ],
    "matched_text": "                # not implemented"
  },
  {
    "satd_id": 6666504,
    "satd_repo": 70746484,
    "satd_sha": "0ad590c00fb0c46779a61e364ca0938eefdba016",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/math.py",
    "lines": [
      19
    ],
    "matched_text": "    # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6666504,
    "satd_repo": 70746484,
    "satd_sha": "0ad590c00fb0c46779a61e364ca0938eefdba016",
    "satd_text": " pylint: disable=unnecessary-lambda",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/math.py",
    "lines": [
      37
    ],
    "matched_text": "    # pylint: disable=unnecessary-lambda"
  },
  {
    "satd_id": 6666505,
    "satd_repo": 70746484,
    "satd_sha": "07e56b9ad4a1a7c55ce50d4c2470563d7b8e2780",
    "satd_text": " pylint: disable=invalid-name, unused-variable, line-too-long",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/depthwise_conv2d_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, unused-variable, line-too-long"
  },
  {
    "satd_id": 6666521,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/broadcast.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable"
  },
  {
    "satd_id": 6666521,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " pylint: disable=invalid-name,unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/reduction.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,too-many-locals,len-as-condition"
  },
  {
    "satd_id": 6666524,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " pylint: disable=invalid-name,unused-variable,too-many-locals,len-as-condition",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/cuda/reduction.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-variable,too-many-locals,len-as-condition"
  },
  {
    "satd_id": 6666527,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " Remove the duplicates",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/reduction.py",
    "lines": [
      24
    ],
    "matched_text": "        real_axis = list(set(real_axis))  # Remove the duplicates"
  },
  {
    "satd_id": 6666535,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " We also perform optimization to simplify the indexing expression.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/buffer.cc",
    "lines": [
      226
    ],
    "matched_text": "// We also perform optimization to simplify the indexing expression."
  },
  {
    "satd_id": 6666546,
    "satd_repo": 70746484,
    "satd_sha": "760475f9a7dce0c3bff2e4e9a7a3b3a04499ff02",
    "satd_text": " Test Case4 (not able to simplify)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/python/unittest/test_lang_buffer.py",
    "lines": [
      51
    ],
    "matched_text": "    # Test Case4 (not able to simplify)"
  },
  {
    "satd_id": 6666582,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666582,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_hwcn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666582,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_nchw_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666584,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666584,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_hwcn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666584,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_nchw_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666589,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666589,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_hwcn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666589,
    "satd_repo": 70746484,
    "satd_sha": "cbff637f5308cc860b9eecb952ef6bd16bfac99a",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_nchw_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable, too-many-locals"
  },
  {
    "satd_id": 6666608,
    "satd_repo": 70746484,
    "satd_sha": "f08de2b690df20c97782827f8153f1d96a1bd97e",
    "satd_text": " TODO(nicolasvasilache): Implement Me",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/schedule/auto_inline_elem_wise.cc",
    "lines": [
      68
    ],
    "matched_text": "    // TODO(nicolasvasilache): Implement Me"
  },
  {
    "satd_id": 6666631,
    "satd_repo": 70746484,
    "satd_sha": "b40d43c4798b3a57da0c467a78ba718bd3dbb502",
    "satd_text": "!\n * \\brief Mark region creates coprocessor micro ops,\n *  can be reused if corresponding variable is independent.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      148,
      149,
      150,
      151
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6666678,
    "satd_repo": 70746484,
    "satd_sha": "7d67e473d641240c2bcd8f76b92f0f7e8c1ca020",
    "satd_text": " TODO(yizhi) support windows later",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/Base.java",
    "lines": [
      91
    ],
    "matched_text": "          // TODO(yizhi) support windows later"
  },
  {
    "satd_id": 6666678,
    "satd_repo": 70746484,
    "satd_sha": "7d67e473d641240c2bcd8f76b92f0f7e8c1ca020",
    "satd_text": " TODO(yizhi) support windows later",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/Base.java",
    "lines": [
      129
    ],
    "matched_text": "        // TODO(yizhi) support windows later"
  },
  {
    "satd_id": 6666788,
    "satd_repo": 70746484,
    "satd_sha": "eefcfe1985860980424db82e967cad4740bca7b5",
    "satd_text": " Assumes no race between threads\n Same index value means no conflicts\n TODO(tqchen) more standard set based testing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/storage_sync.cc",
    "lines": [
      129,
      130,
      131
    ],
    "matched_text": "        // Assumes no race between threads"
  },
  {
    "satd_id": 6666794,
    "satd_repo": 70746484,
    "satd_sha": "10bc2fdfe0c6a340bcb5065f79f5e6dae1fa8e9e",
    "satd_text": " Enable static-libstdc++ to make it easier to link this library with\n other C++ compilers",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/conda/build.sh",
    "lines": [
      27,
      28
    ],
    "matched_text": "# Enable static-libstdc++ to make it easier to link this library with"
  },
  {
    "satd_id": 6666795,
    "satd_repo": 70746484,
    "satd_sha": "10bc2fdfe0c6a340bcb5065f79f5e6dae1fa8e9e",
    "satd_text": " TODO: arguably dlpack and dmlc-core should get its own packaging and\n install their headers themselves",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/conda/build.sh",
    "lines": [
      36,
      37
    ],
    "matched_text": "# TODO: arguably dlpack and dmlc-core should get its own packaging and"
  },
  {
    "satd_id": 6666796,
    "satd_repo": 70746484,
    "satd_sha": "10bc2fdfe0c6a340bcb5065f79f5e6dae1fa8e9e",
    "satd_text": " TODO: HalideIR's includes could conflict, but TVM currently assumes they\n are installed here, awfully enough",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/conda/build.sh",
    "lines": [
      40,
      41
    ],
    "matched_text": "# TODO: HalideIR's includes could conflict, but TVM currently assumes they"
  },
  {
    "satd_id": 6666817,
    "satd_repo": 70746484,
    "satd_sha": "fe51c4980521177cfed7046c9a87258fdd44c209",
    "satd_text": " In this tutorial we assume all the matrix tensors are square and fix-bounded.\n The size of the square matrix",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6666818,
    "satd_repo": 70746484,
    "satd_sha": "fe51c4980521177cfed7046c9a87258fdd44c209",
    "satd_text": " After applying three main tricks, we can achieve almost 90% performance of numpy.\n Further observation is required to catch up with the performance of numpy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      155,
      156
    ],
    "matched_text": "# After applying three main tricks, we can achieve almost 90% performance of numpy."
  },
  {
    "satd_id": 6666831,
    "satd_repo": 70746484,
    "satd_sha": "52c8db5bf4fa435b6e598bf255e5d1d488635ac9",
    "satd_text": " flattening.\n\n .. image:: https://github.com/dmlc/web-data/raw/master/tvm/tutorial/array-packing.png\n      :align: center\n      :scale: 100%\n Just as it is shown in the figure above, after blocking the computations, we can observe the array\n access pattern of B (after flattening), which is regular but discontinuous. We expect that after\n some transformation we can get continuous access pattern. We can reorder a [16][16] array to \n a [16/4][16][4] array, so that the access pattern of B will be sequential when grabing \n the corresponding value from the packed array.\n After applying three main tricks, we can almost 90% performance of numpy. Further observation is",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6666836,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": " After trying different schedule, we finally found that we can benefit from vectorizing \n the row loop most, i.e. yi.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      102,
      103
    ],
    "matched_text": "# After trying different schedule, we finally found that we can benefit from vectorizing "
  },
  {
    "satd_id": 6666837,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": " We can get almost another 4x speedup compared with the previous schedule.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      107
    ],
    "matched_text": "# We can get almost another 4x speedup compared with the previous schedule."
  },
  {
    "satd_id": 6666844,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": "#################################################################################################\n Summary\n -------\n After applying three main tricks, we can getnerly 90% performance of numpy. Further observation is\n required to catch up with the performance of numpy.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      186,
      187,
      188,
      189,
      190
    ],
    "matched_text": "##################################################################################################"
  },
  {
    "satd_id": 6666848,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": " By simply tiling the loop 8x8, and hoisting k outside the blocking loops, we can get nearly 4x\n speedup compared with the baseline.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      88,
      89
    ],
    "matched_text": "# By simply tiling the loop 8x8, and hoisting k outside the blocking loops, we can get nearly 4x"
  },
  {
    "satd_id": 6666849,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": " TODO(Jian Weng): Catch up with the performance of numpy.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      193
    ],
    "matched_text": "# TODO(Jian Weng): Catch up with the performance of numpy."
  },
  {
    "satd_id": 6666851,
    "satd_repo": 70746484,
    "satd_sha": "29d253d0bd271f3de7d9d5ba8f9ce5e18e7dfaf0",
    "satd_text": "###############################################################################################\n Blocking\n --------\n A important trick to enhance the cache hit rate is blocking --- data chunck will be computed\n block by block. The memory access inside the block is a small neighbourhood which is with high\n meomry locality. In this tutorial, I pick up 8, a relatively small value (8 ints < 64 bytes),\n as the blocking size.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/opt_gemm.py",
    "lines": [
      72,
      73,
      74,
      75,
      76,
      77,
      78
    ],
    "matched_text": "################################################################################################"
  },
  {
    "satd_id": 6666982,
    "satd_repo": 70746484,
    "satd_sha": "eaea99c558bbd125c08e39484f31c11ad549735c",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable"
  },
  {
    "satd_id": 6666982,
    "satd_repo": 70746484,
    "satd_sha": "eaea99c558bbd125c08e39484f31c11ad549735c",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/testing/conv2d_hwcn_python.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable"
  },
  {
    "satd_id": 6666992,
    "satd_repo": 70746484,
    "satd_sha": "01cbc61a89c6301a79a65d78593c30c354289873",
    "satd_text": " TODO: Thread extent unitest not generated.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/domain_touched.cc",
    "lines": [
      51
    ],
    "matched_text": "  /* TODO: Thread extent unitest not generated.*/"
  },
  {
    "satd_id": 6667011,
    "satd_repo": 70746484,
    "satd_sha": "f433373de4b9839e8735d6534e4c634892ce372e",
    "satd_text": "!\n * \\brief Mark the scope as when computation start to happen\n *  This can hint some code generator to create a new function for compute.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      147,
      148,
      149,
      150
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6667016,
    "satd_repo": 70746484,
    "satd_sha": "f433373de4b9839e8735d6534e4c634892ce372e",
    "satd_text": " There are two reasons why we create another function for compute_scope\n - Make sure the generated compute function is clearly separately(though it can get inlined)\n - Set noalias on all the pointer arguments, some of them are loaded from TVMArgs.\n   This is easier than set the alias scope manually.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      661,
      662,
      663,
      664
    ],
    "matched_text": "  // There are two reasons why we create another function for compute_scope"
  },
  {
    "satd_id": 6667046,
    "satd_repo": 70746484,
    "satd_sha": "d3efd7fc3589904cf13962b8426ca96da76dfe77",
    "satd_text": " TODO(yizhi) support windows later",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/Base.java",
    "lines": [
      118
    ],
    "matched_text": "        // TODO(yizhi) support windows later"
  },
  {
    "satd_id": 6667103,
    "satd_repo": 70746484,
    "satd_sha": "d3efd7fc3589904cf13962b8426ca96da76dfe77",
    "satd_text": "\n       * Different cleanup strategies for Windows and Linux.\n       * TODO: shutdown hook won't work on Windows\n       ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/NativeLibraryLoader.java",
    "lines": [
      38,
      39,
      40,
      41
    ],
    "matched_text": "      /*"
  },
  {
    "satd_id": 6667125,
    "satd_repo": 70746484,
    "satd_sha": "d3efd7fc3589904cf13962b8426ca96da76dfe77",
    "satd_text": " Type code used in API calls",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "jvm/core/src/main/java/ml/dmlc/tvm/TypeCode.java",
    "lines": [
      20
    ],
    "matched_text": "// Type code used in API calls"
  },
  {
    "satd_id": 6667151,
    "satd_repo": 70746484,
    "satd_sha": "7bcb3f538b648d7d90e5c8eb91cd7be3417d7dbf",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      180
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6667151,
    "satd_repo": 70746484,
    "satd_sha": "7bcb3f538b648d7d90e5c8eb91cd7be3417d7dbf",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      368
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6667151,
    "satd_repo": 70746484,
    "satd_sha": "7bcb3f538b648d7d90e5c8eb91cd7be3417d7dbf",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      590
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6667154,
    "satd_repo": 70746484,
    "satd_sha": "c324494f1acdd01cca76d3ab123ca249064c97f1",
    "satd_text": " pylint: disable=unused-variable, unused-argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/rpc_proxy.py",
    "lines": [
      8
    ],
    "matched_text": "# pylint: disable=unused-variable, unused-argument"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      419
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      460
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      504
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      711
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      733
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      756
    ],
    "matched_text": "      // alloc"
  },
  {
    "satd_id": 6667283,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " alloc",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      913
    ],
    "matched_text": "        // alloc"
  },
  {
    "satd_id": 6667300,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " eslint no-unused-vars: \"off\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      7
    ],
    "matched_text": "/* eslint no-unused-vars: \"off\" */"
  },
  {
    "satd_id": 6667312,
    "satd_repo": 70746484,
    "satd_sha": "0a07411d54f09a0d25debc89e109390c9df27df8",
    "satd_text": " eslint indent: \"off\" ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "web/tvm_runtime.js",
    "lines": [
      9
    ],
    "matched_text": "/* eslint indent: \"off\" */"
  },
  {
    "satd_id": 6667386,
    "satd_repo": 70746484,
    "satd_sha": "9d84cb0777a7bf7d3ae9518b5e0be731b488a130",
    "satd_text": "!\n   * \\brief Allocate temporal workspace for backend execution.\n   *\n   *  \\note We have the following assumption about backend temporal\n   *   workspace allocation, and backend will optimize for such assumption:\n   *\n   *  - Only a few allocation will happen, and space will be released after use.\n   *  - The release order is usually in reverse order of allocate (stack style).\n   *  - Repeative pattern of same allocations over different runs.\n   *  - Workspace should not overlap between different threads(i.e. be threadlocal)\n   *\n   * \\param ctx The context of allocation.\n   * \\param size The size to be allocated.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/device_api.h",
    "lines": [
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6667428,
    "satd_repo": 70746484,
    "satd_sha": "4580e690b817975e5cb7a1bf0a72c7a1eb396949",
    "satd_text": " pylint: disable=invalid-name, line-too-long, unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "topi/python/topi/nn/conv.py",
    "lines": [
      1
    ],
    "matched_text": "# pylint: disable=invalid-name, line-too-long, unused-variable"
  },
  {
    "satd_id": 6667471,
    "satd_repo": 70746484,
    "satd_sha": "825566ccffb29654b7f15c4f74bb5072cddf7009",
    "satd_text": " Do no need to split reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensorize.cc",
    "lines": [
      388
    ],
    "matched_text": "    // Do no need to split reduction"
  },
  {
    "satd_id": 6667473,
    "satd_repo": 70746484,
    "satd_sha": "825566ccffb29654b7f15c4f74bb5072cddf7009",
    "satd_text": " Need to split reduction",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensorize.cc",
    "lines": [
      401
    ],
    "matched_text": "    // Need to split reduction"
  },
  {
    "satd_id": 6667481,
    "satd_repo": 70746484,
    "satd_sha": "825566ccffb29654b7f15c4f74bb5072cddf7009",
    "satd_text": " Assume we tensorize at regin axis i [min, min + extent)\n The corresponding intrinsic axis is j [0, extent)\n Remap index i to j + min",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/tensorize.cc",
    "lines": [
      227,
      228,
      229
    ],
    "matched_text": "    // Assume we tensorize at regin axis i [min, min + extent)"
  },
  {
    "satd_id": 6667521,
    "satd_repo": 70746484,
    "satd_sha": "00506a62e760da602386788016201ec3ba08dd9b",
    "satd_text": " Detect useful invariant pattern and use them to visit child.\n Pattern: Var % const  == 0\n TODO(tqchen) move these pattern to a generic scope info visitor.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      1380,
      1381,
      1382
    ],
    "matched_text": "  // Detect useful invariant pattern and use them to visit child."
  },
  {
    "satd_id": 6667559,
    "satd_repo": 70746484,
    "satd_sha": "4bb3c35a05aa7670154b959d9bd397f8c7560986",
    "satd_text": "!\n   * \\brief Initialization nest generated\n   *  This is only non-empty when BindDLTensor is called.\n   *\n   * \\note The binder may choose to generate a let statement\n   *  and simply put def_map to map Variable to itself,\n   *  or update def_map to directly map to new value and not generate let statement.\n   *\n   *  Let statement is usually generated when bind to DLTensor and memory load is involved.\n   * \\return The initialization nest generated during binding.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/arg_binder.h",
    "lines": [
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6667564,
    "satd_repo": 70746484,
    "satd_sha": "4bb3c35a05aa7670154b959d9bd397f8c7560986",
    "satd_text": "!\n * \\brief Helper utility to generate match and bind of arguments.\n *\n * \\note There is many places in TVM IR where we need argument bindings.\n *\n *  Consider a function f(tA(shape=var(n)), tB(shape=3), tC(shape=(n+2)).\n *  Here n is a undefined variable that is decided by the outside, tB imposes\n *  a constraint such that it can only take tensor with shape 3, tC imposes\n *  another constraint that it's shape must equals n + 2.\n *  So if we call it with f(bufferA, bufferB, bufferC), we need to generate\n *  the following binding sequence:\n *  - define n = bufferA.shape[0]\n *  - assert bufferB.shape[0] == 3\n *  - assert bufferB.shape[1] == n + 3\n *\n *  In general, this is a constraint solving problem. We have simplified assumption\n *  over the binding declaration, such that we require the variable occured in\n *  constraint must be declared in argument list. So it is illegal to have signature\n *  f(tA(shape=(n+3))) without any argument variable corresponds to n, even though\n *  it is already enough to derive n from the input argument.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/arg_binder.h",
    "lines": [
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6667572,
    "satd_repo": 70746484,
    "satd_sha": "3c19159587b67eab8017e4efaf57d0e95c44adb7",
    "satd_text": " -------------------------------------\n In TVM, we can describe convolution via 2D reduction in a simple way.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/python/reduction.py",
    "lines": [
      129,
      130
    ],
    "matched_text": "# -------------------------------------"
  },
  {
    "satd_id": 6667642,
    "satd_repo": 70746484,
    "satd_sha": "5445061469200edcb389addb16124d6f7ca35a66",
    "satd_text": " Align stack to be multiple of 4 if it is\n TODO(tqchen) have pass to detect vector access and pre-set alignment",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      1315,
      1316
    ],
    "matched_text": "    // Align stack to be multiple of 4 if it is"
  },
  {
    "satd_id": 6667675,
    "satd_repo": 70746484,
    "satd_sha": "fcfec961a5f11813e10c61e71eeb1d8f1f3e1f43",
    "satd_text": "#####################################################################\n When you want to evaluate the performance of the kernel on the remote\n device, it is important to avoid overhead of remote function call.\n :code:`time_evaluator` will returns a remote function that runs the\n function over number times, measures the cost per run on the remote\n device and returns the measured cost.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/cross_compilation_and_rpc.py",
    "lines": [
      146,
      147,
      148,
      149,
      150,
      151
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6667676,
    "satd_repo": 70746484,
    "satd_sha": "fcfec961a5f11813e10c61e71eeb1d8f1f3e1f43",
    "satd_text": "#####################################################################\n .. note::\n\n   the argument :code:`target` in :code:`build` should be replaced\n   :code:`'llvm'` with the target triple of your device, which might be\n   different for different device. For example, it is\n   :code:`'llvm -target=armv7l-none-linux-gnueabihf'` for my Raspberry\n   Pi. Here we use :code:`'llvm'` directly to make the tutorial runable.\n\n   Usually, you can query the target by execute :code:`gcc -v` on your\n   device, although it may be still a loose configuration.\n\n   Besides :code:`-target`, you can also set other compilation options\n   like:\n\n   * -mtriple=<target triple>\n       Specify the target triple, same as '-target'.\n   * -mcpu=<cpuname>\n       Specify a specific chip in the current architecture to generate code for. By default this is inferred from the target triple and autodetected to the current architecture.\n   * -mattr=a1,+a2,-a3,...\n       Override or control specific attributes of the target, such as whether SIMD operations are enabled or not. The default set of attributes is set by the current CPU.\n       To get the list of available attributes, you can do:\n\n       .. code-block:: bash\n\n         llc -mtriple=<your device target triple> -mattr=help\n\n   These options are consistent with `llc <http://llvm.org/docs/CommandGuide/llc.html>`_.\n   So for my board, to get the best performance, the complete compilation\n   option would be:\n\n   .. code-block:: bash\n\n     llvm -mtriple=armv7l-none-linux-gnueabihf -mcpu=cortex-a53 -mattr=+neon\n\n   It is recommended to set target triple and feature set to contain specific\n   feature available, so we can take full advantage of the features of the\n   board.\n   You can find more details about cross compilation attributes from\n   `LLVM guide of cross compilation <https://clang.llvm.org/docs/CrossCompilation.html>`_.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/cross_compilation_and_rpc.py",
    "lines": [
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6667761,
    "satd_repo": 70746484,
    "satd_sha": "f467f66e32dd670388889e62daed81c2ad843ba6",
    "satd_text": "#####################################################################\n .. _reduction-with-tuple-inputs:\n\n Describe Reduction with Collaborative Inputs\n --------------------------------------------\n Sometimes, we requires multiple inputs to express some reduction\n operators, and the inputs will collaborate together, e.g. :code:`argmax`.\n In the reduction procedure, :code:`argmax` need to compare the value of\n operands, also need to keep the index of operand. It can be expressed\n with :any:`comm_reducer` as below:",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/tuple_inputs_operation.py",
    "lines": [
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6667767,
    "satd_repo": 70746484,
    "satd_sha": "f467f66e32dd670388889e62daed81c2ad843ba6",
    "satd_text": "#####################################################################\n Summary\n -------\n This tutorial introduces the usage of tuple inputs operation.\n\n - Describe normal batchwise computation.\n - Describe reduction operation with tuple inputs.\n - Notice that you can only schedule computation in terms of operation instead of tensor.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/python/tuple_inputs_operation.py",
    "lines": [
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6667772,
    "satd_repo": 70746484,
    "satd_sha": "f467f66e32dd670388889e62daed81c2ad843ba6",
    "satd_text": "! \\brief The left argument of reducer ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      50
    ],
    "matched_text": "  /*! \\brief The left argument of reducer */"
  },
  {
    "satd_id": 6667782,
    "satd_repo": 70746484,
    "satd_sha": "f467f66e32dd670388889e62daed81c2ad843ba6",
    "satd_text": " .. _general-reduction:\n\n#####################################################################\n .. note::\n\n   Sometimes we would like to perform reduction that involves multiple\n   values like :code:`argmax`, which can be done by tuple inputs.\n   See :ref:`reduction-with-tuple-inputs` for more detail.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": false,
    "lines": false,
    "matched_text": null
  },
  {
    "satd_id": 6667823,
    "satd_repo": 70746484,
    "satd_sha": "58967616598564b11a73ac2d4d742f968083414a",
    "satd_text": " By default we cleanup - remove the container once it finish running (--rm)\n and share the PID namespace (--pid=host) so the process inside does not have\n pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tests/ci_build/ci_build.sh",
    "lines": [
      111,
      112,
      113
    ],
    "matched_text": "# By default we cleanup - remove the container once it finish running (--rm)"
  },
  {
    "satd_id": 6667849,
    "satd_repo": 70746484,
    "satd_sha": "134c6ba33511adff37b79be30303c972cb9d2a07",
    "satd_text": " pylint: disable=unused-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/contrib/rpc.py",
    "lines": [
      30
    ],
    "matched_text": "    # pylint: disable=unused-variable"
  },
  {
    "satd_id": 6667899,
    "satd_repo": 70746484,
    "satd_sha": "134c6ba33511adff37b79be30303c972cb9d2a07",
    "satd_text": "!\n * \\brief Temporal argument buffer.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      24,
      25,
      26
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6667912,
    "satd_repo": 70746484,
    "satd_sha": "134c6ba33511adff37b79be30303c972cb9d2a07",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      358
    ],
    "matched_text": "        // always send handle in 64 bit."
  },
  {
    "satd_id": 6667912,
    "satd_repo": 70746484,
    "satd_sha": "134c6ba33511adff37b79be30303c972cb9d2a07",
    "satd_text": " always send handle in 64 bit.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/rpc/rpc_session.cc",
    "lines": [
      429
    ],
    "matched_text": "          // always send handle in 64 bit."
  },
  {
    "satd_id": 6667951,
    "satd_repo": 70746484,
    "satd_sha": "979623e56e97080e91f00678787416a3e255f812",
    "satd_text": "#####################################################################\n Hook Python Function as Extern\n ------------------------------\n Since we can call into any PackedFunc in TVM. We can use the extern\n function to callback into python.\n\n The following example registers a python function into tvm runtime system\n and use it to complete one stage of the computation.\n This makes TVM much more flexible. For example, we can insert front-end\n callbacks to inspect the intermediate results or mix customized code\n with TVM.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/extern_op.py",
    "lines": [
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6667992,
    "satd_repo": 70746484,
    "satd_sha": "bf8a5c07de4fbabff262bedf331e7b0fbf9b2dad",
    "satd_text": "!\n   * \\brief The predicate under which store can happen\n   *  Use this when there can be duplicated threads doing the same store.\n   * \\note Experimental primitive: used by cross thread-reduction.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/schedule.h",
    "lines": [
      359,
      360,
      361,
      362,
      363
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6667993,
    "satd_repo": 70746484,
    "satd_sha": "bf8a5c07de4fbabff262bedf331e7b0fbf9b2dad",
    "satd_text": "!\n   * \\brief Set predicate under which store to the array can be performed.\n   *  Use this when there are duplicated threads doing the same store and we only\n   *  need one of them to do the store.\n   *\n   * \\note This is a dangerous scheduling primitive that can change behavior of program.\n   *    Only do when we are certain that thare are duplicated store.\n   * \\param predicate The condition to be checked.\n   * \\return reference to self.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/schedule.h",
    "lines": [
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6668029,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      29
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6668029,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_metal.cc",
    "lines": [
      38
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6668068,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": " Hack to get Warp size from device.\n Note that in Metal\n state.threadExecutionWidth can vary per kernel\n maybe due to resource constraint.\n so state.threadExecutionWidth can be smaller than warp size\n For safe issue, turn off warp-aware optimization for now\n But we keep this code.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/metal/metal_device_api.mm",
    "lines": [
      57,
      58,
      59,
      60,
      61,
      62,
      63
    ],
    "matched_text": "// Hack to get Warp size from device."
  },
  {
    "satd_id": 6668098,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": " Module to support thread-safe multi-GPU execution.\n cuModule is a per-GPU module\n The runtime will contain a per-device module table\n The modules will be lazily loaded",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/cuda/cuda_module.cc",
    "lines": [
      25,
      26,
      27,
      28
    ],
    "matched_text": "// Module to support thread-safe multi-GPU execution."
  },
  {
    "satd_id": 6668098,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": " Module to support thread-safe multi-GPU execution.\n cuModule is a per-GPU module\n The runtime will contain a per-device module table\n The modules will be lazily loaded",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/metal/metal_module.mm",
    "lines": [
      23,
      24,
      25,
      26
    ],
    "matched_text": "// Module to support thread-safe multi-GPU execution."
  },
  {
    "satd_id": 6668121,
    "satd_repo": 70746484,
    "satd_sha": "706f9b6f7eabf29aaa2f0d97c0d17fc92696c253",
    "satd_text": "!\n * \\brief argument union type of 32bit.\n * Choose 32 bit because most GPU API do not work well with 64 bit.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/pack_args.h",
    "lines": [
      21,
      22,
      23,
      24
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6668185,
    "satd_repo": 70746484,
    "satd_sha": "9ba40dc0fe9f69d8118650f6813e02b081d37ea9",
    "satd_text": " load 64 bit version",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/make_api.cc",
    "lines": [
      65
    ],
    "matched_text": "    // load 64 bit version"
  },
  {
    "satd_id": 6668329,
    "satd_repo": 70746484,
    "satd_sha": "97c67e538303e1c8075859528b578cc49d954a06",
    "satd_text": "#####################################################################\n Multiple States\n ---------------\n For complicated applications like RNN, we might need more than one\n recurrent state. Scan support multiple recurrent states.\n The following example demonstrate how we can build recurrence with two states.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/scan.py",
    "lines": [
      106,
      107,
      108,
      109,
      110,
      111
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668338,
    "satd_repo": 70746484,
    "satd_sha": "968c539b4d4322021f6624519c59e363dcb822e9",
    "satd_text": "#####################################################################\n Schedule the Reduction\n ----------------------\n There are several ways to schedule a reduction.\n Before doing anything, let us print out the IR code of default schedule.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/reduction.py",
    "lines": [
      46,
      47,
      48,
      49,
      50
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668342,
    "satd_repo": 70746484,
    "satd_sha": "968c539b4d4322021f6624519c59e363dcb822e9",
    "satd_text": "#####################################################################\n Reduction Factoring and Parallelization\n ---------------------------------------\n One problem of building a reduction is that we cannot simply\n parallelize over the reduction axis. We need to devide the computation\n of the reduction, store the local reduction result in a temporal array.\n Before doing a reduction over the temp array.\n\n The rfactor primitive does such rewrite of the computation.\n In the following schedule, the result of B is write written to a temporary\n result B.rf. The factored dimension becomes the first dimension of B.rf.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/reduction.py",
    "lines": [
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668344,
    "satd_repo": 70746484,
    "satd_sha": "968c539b4d4322021f6624519c59e363dcb822e9",
    "satd_text": "#####################################################################\n Summary\n -------\n This tutorial provides a walk through of reduction schedule.\n\n - Describe reduction with reduce_axis.\n - Use rfactor to factor out axis if we need parallelism.",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/python/reduction.py",
    "lines": [
      127,
      128,
      129,
      130,
      131,
      132,
      133
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668383,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": " Add any paths that contain custom static files (such as style sheets) here,\n relative to this directory. They are copied after the builtin static files,\n so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docs/conf.py",
    "lines": [
      132,
      133,
      134,
      135
    ],
    "matched_text": "# Add any paths that contain custom static files (such as style sheets) here,"
  },
  {
    "satd_id": 6668385,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": " The name of the Pygments (syntax highlighting) style to use.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docs/conf.py",
    "lines": [
      108
    ],
    "matched_text": "# The name of the Pygments (syntax highlighting) style to use."
  },
  {
    "satd_id": 6668402,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": " If true, `todo` and `todoList` produce output, else they produce nothing.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "docs/conf.py",
    "lines": [
      117
    ],
    "matched_text": "# If true, `todo` and `todoList` produce output, else they produce nothing."
  },
  {
    "satd_id": 6668412,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": "#####################################################################\n .. note:: Runtime API and Thread-Safety\n\n   The compiled modules of TVM do not depend on the TVM compiler.\n   Instead, it only depends on a minimum runtime library.\n   TVM runtime library wraps the device drivers and provide\n   thread-safe and device agnostic call into the compiled functions.\n\n   This means you can call the compiled TVM function from any thread,\n   on any GPUs.\n",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "tutorials/python/get_started.py",
    "lines": [
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668414,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": "#####################################################################\n .. note:: Code Specialization\n\n   As you may noticed, during the declaration, A, B and C both\n   takes the same shape argument n. TVM will take advantage of this\n   to pass only single shape argument to the kernel, as you will find in\n   the printed device code. This is one form of specialization.\n\n   On the host side, TVM will automatically generate check codes\n   that checks the constraints in the parameters. So if you pass\n   arrays with different shape into the fadd, an error will be raised.\n\n   We can do more specializations. For example, we can write\n   :code:`n = tvm.convert(1024)` instead of :code:`n = tvm.var(\"n\")`,\n   in the computation declaration. The generated function will\n   only take vectors with length 1024.\n",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "tutorials/python/get_started.py",
    "lines": [
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668419,
    "satd_repo": 70746484,
    "satd_sha": "ca5929e949c0929a13113a2906108811d556833e",
    "satd_text": "#####################################################################\n Vector Add Example\n ------------------\n In this tutorial, we will use a vector addition example to demonstrate\n the workflow in TVM. We will demonstrate how we can describe and compile\n vector addition code that runs on GPU.\n",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "tutorials/python/get_started.py",
    "lines": [
      16,
      17,
      18,
      19,
      20,
      21
    ],
    "matched_text": "######################################################################"
  },
  {
    "satd_id": 6668455,
    "satd_repo": 70746484,
    "satd_sha": "4d2809058cb01b48531ea33e81bd7182f8bf517c",
    "satd_text": " delete duplicated thread extent attr",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/schedule_ops.cc",
    "lines": [
      162
    ],
    "matched_text": "      // delete duplicated thread extent attr"
  },
  {
    "satd_id": 6668528,
    "satd_repo": 70746484,
    "satd_sha": "54593ca1cc90e98abb09e64d73f1694f8082c757",
    "satd_text": " special case, no reduction is needed.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/lower_thread_allreduce.cc",
    "lines": [
      139
    ],
    "matched_text": "      // special case, no reduction is needed."
  },
  {
    "satd_id": 6668554,
    "satd_repo": 70746484,
    "satd_sha": "54593ca1cc90e98abb09e64d73f1694f8082c757",
    "satd_text": " specially handle cross thread reduction.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/op/compute_op.cc",
    "lines": [
      293
    ],
    "matched_text": "    // specially handle cross thread reduction."
  },
  {
    "satd_id": 6668565,
    "satd_repo": 70746484,
    "satd_sha": "6d798778637859afd55b54300dc8949c1d3a9f62",
    "satd_text": " Pass up bit mask with or relation.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/message_passing.cc",
    "lines": [
      248
    ],
    "matched_text": "// Pass up bit mask with or relation."
  },
  {
    "satd_id": 6668584,
    "satd_repo": 70746484,
    "satd_sha": "6d798778637859afd55b54300dc8949c1d3a9f62",
    "satd_text": " Handle reduction factor.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/schedule_dataflow_rewrite.cc",
    "lines": [
      247
    ],
    "matched_text": "// Handle reduction factor."
  },
  {
    "satd_id": 6668640,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " TODO(tqchen, thierry) add one cache here.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/verilog/codegen_verilog.cc",
    "lines": [
      425
    ],
    "matched_text": "      // TODO(tqchen, thierry) add one cache here."
  },
  {
    "satd_id": 6668654,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " TODO(tqchen, thierry) add delay model from expression",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/verilog/codegen_verilog.cc",
    "lines": [
      483
    ],
    "matched_text": "  // TODO(tqchen, thierry) add delay model from expression.a"
  },
  {
    "satd_id": 6668654,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " TODO(tqchen, thierry) add delay model from expression",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/verilog/codegen_verilog.cc",
    "lines": [
      539
    ],
    "matched_text": "  // TODO(tqchen, thierry) add delay model from expression"
  },
  {
    "satd_id": 6668664,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " TODO(tqchen, thierry) add delay model from expression.a",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/verilog/codegen_verilog.cc",
    "lines": [
      483
    ],
    "matched_text": "  // TODO(tqchen, thierry) add delay model from expression.a"
  },
  {
    "satd_id": 6668709,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " Initialize the memory map channels\n TODO(tqchen) move the logic to explicit specification.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/verilog/verilog_ir.cc",
    "lines": [
      76,
      77
    ],
    "matched_text": "    // Initialize the memory map channels"
  },
  {
    "satd_id": 6668785,
    "satd_repo": 70746484,
    "satd_sha": "df6fcc509c6475ff39ea6a4f98a05cc80b19398e",
    "satd_text": " We know that the extent of the loop won't depend on relaxed scope.\n TODO(tqchen) have a verification pass.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/narrow_channel_access.cc",
    "lines": [
      34,
      35
    ],
    "matched_text": "    // We know that the extent of the loop won't depend on relaxed scope."
  },
  {
    "satd_id": 6668832,
    "satd_repo": 70746484,
    "satd_sha": "9ebb57b3313f5a633a6bca809db7e2e6f393f61e",
    "satd_text": " This is not thread safe, but fine for simulation.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/codegen/verilog/vpi_device_api.cc",
    "lines": [
      54
    ],
    "matched_text": "    // This is not thread safe, but fine for simulation."
  },
  {
    "satd_id": 6668869,
    "satd_repo": 70746484,
    "satd_sha": "9ebb57b3313f5a633a6bca809db7e2e6f393f61e",
    "satd_text": " allocator block for reuse",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/verilog/vpi_device_api.cc",
    "lines": [
      104
    ],
    "matched_text": "  // allocator block for reuse"
  },
  {
    "satd_id": 6669008,
    "satd_repo": 70746484,
    "satd_sha": "2548cedcb882a96ecf526335c2b5eda0d24daca5",
    "satd_text": " pylint: disable=invalid-name,unused-import,redefined-builtin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/api.py",
    "lines": [
      2
    ],
    "matched_text": "# pylint: disable=invalid-name,unused-import,redefined-builtin"
  },
  {
    "satd_id": 6669097,
    "satd_repo": 70746484,
    "satd_sha": "3fb85796959d926fe6df088479ce296f98363bc7",
    "satd_text": "!\n   * \\brief Communicative reduction.\n   *  Cannot be directly parallelized.\n   *\n   *  Disallow: parallel/vectorize\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr.h",
    "lines": [
      127,
      128,
      129,
      130,
      131,
      132
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6669150,
    "satd_repo": 70746484,
    "satd_sha": "2c512ca78d313873ca54a419ca23d816669b8c8f",
    "satd_text": " odd base, shift both to left.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      1058
    ],
    "matched_text": "      // odd base, shift both to left."
  },
  {
    "satd_id": 6669184,
    "satd_repo": 70746484,
    "satd_sha": "71334483305d7c24f946ca0f42bded0734c70ed6",
    "satd_text": " simplify the base by putting it in range.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/modular.cc",
    "lines": [
      117
    ],
    "matched_text": "  // simplify the base by putting it in range."
  },
  {
    "satd_id": 6669232,
    "satd_repo": 70746484,
    "satd_sha": "2f462ccab50b0939e271235e66aa407821c45e60",
    "satd_text": " Dirty matching to check PTX vs cubin.\n TODO(tqchen) more reliable checks",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/build_cuda.cc",
    "lines": [
      68,
      69
    ],
    "matched_text": "    // Dirty matching to check PTX vs cubin."
  },
  {
    "satd_id": 6669239,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": "!\n   * \\brief Get a PackedFunc from module.\n   *\n   *  The PackedFunc may not be fully initialized,\n   *  there might still be first time running overhead when\n   *  executing the function on certain devices.\n   *  For benchmarking, use prepare to eliminate\n   *\n   * \\param name the name of the function.\n   * \\param sptr_to_self The shared_ptr that points to this module node.\n   *\n   * \\return PackedFunc(nullptr) when it is not available.\n   *\n   * \\note The function will always remain valid.\n   *   If the function need resource from the module(e.g. late linking),\n   *   it should capture sptr_to_self.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/module.h",
    "lines": [
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6669268,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": "! \\brief helper macro to supress unused warning ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/registry.h",
    "lines": [
      85
    ],
    "matched_text": "/*! \\brief helper macro to supress unused warning */"
  },
  {
    "satd_id": 6669278,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": " pylint: disable=unused-import, invalid-name, undefined-variable",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/module.py",
    "lines": [
      2
    ],
    "matched_text": "# pylint: disable=unused-import, invalid-name, undefined-variable"
  },
  {
    "satd_id": 6669294,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": " The module, can be moved to ee if JIT is enabled.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/llvm_module.cc",
    "lines": [
      146
    ],
    "matched_text": "  // The module, can be moved to ee if JIT is enabled."
  },
  {
    "satd_id": 6669367,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": " Module to support thread-safe multi-GPU execution.\n cuModule is a per-GPU module\n The runtime will contain a per-device module table\n The modules will be lazily loaded",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/cuda/cuda_module.cc",
    "lines": [
      24,
      25,
      26,
      27
    ],
    "matched_text": "// Module to support thread-safe multi-GPU execution."
  },
  {
    "satd_id": 6669386,
    "satd_repo": 70746484,
    "satd_sha": "efae4be0bd078a94e5ffd97f1a0fe87d606b1ac6",
    "satd_text": " Module to support thread-safe multi-device execution.\n OpenCL runtime is a bit tricky because clSetKernelArg is not thread-safe\n To make the call thread-safe, we create a thread-local kernel table\n and lazily install new kernels into the kernel table when the kernel is called.\n The kernels are recycled when the module get destructed.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/opencl/opencl_module.cc",
    "lines": [
      19,
      20,
      21,
      22,
      23
    ],
    "matched_text": "// Module to support thread-safe multi-device execution."
  },
  {
    "satd_id": 6669405,
    "satd_repo": 70746484,
    "satd_sha": "8f240ee76dc65ac656ba586229b13e5b12c04c96",
    "satd_text": " Always pass via 64 bit value.\n For handle type, Handle(64) maps to 32 bit void* in 32bit platform.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      811,
      812
    ],
    "matched_text": "    // Always pass via 64 bit value."
  },
  {
    "satd_id": 6669416,
    "satd_repo": 70746484,
    "satd_sha": "8f240ee76dc65ac656ba586229b13e5b12c04c96",
    "satd_text": " always pass via 64 bit pointers\n For handle type, Handle(64) will simply become 32 bit void*",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.cc",
    "lines": [
      462,
      463
    ],
    "matched_text": "    // always pass via 64 bit pointers"
  },
  {
    "satd_id": 6669437,
    "satd_repo": 70746484,
    "satd_sha": "8f240ee76dc65ac656ba586229b13e5b12c04c96",
    "satd_text": " Short hande code to get a constant int 32",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/codegen_llvm.h",
    "lines": [
      55
    ],
    "matched_text": "  // Short hande code to get a constant int 32"
  },
  {
    "satd_id": 6669474,
    "satd_repo": 70746484,
    "satd_sha": "8f240ee76dc65ac656ba586229b13e5b12c04c96",
    "satd_text": " Environment to keep jit resources alive.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/llvm/llvm_exec_engine.cc",
    "lines": [
      18
    ],
    "matched_text": "// Environment to keep jit resources alive."
  },
  {
    "satd_id": 6669564,
    "satd_repo": 70746484,
    "satd_sha": "d114dfc96ef39cbef30866c40a0dbc73365458f0",
    "satd_text": " buffere realization to be replaced",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/schedule_ops.cc",
    "lines": [
      723
    ],
    "matched_text": "  // buffere realization to be replaced"
  },
  {
    "satd_id": 6669584,
    "satd_repo": 70746484,
    "satd_sha": "820a85975f09ce5eb2aaad0df3496e69874f3b80",
    "satd_text": " In default, we always need all spatial axis\n Unless that axis only refers back to itself as a fixed point.\n TODO(tqchen): Add fix point detection.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/schedule/bound.cc",
    "lines": [
      309,
      310,
      311
    ],
    "matched_text": "      // In default, we always need all spatial axis"
  },
  {
    "satd_id": 6669682,
    "satd_repo": 70746484,
    "satd_sha": "45597d00061c155f7844b873149d36a48467c959",
    "satd_text": " place the vector lanes in least significant dimension.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/vectorize_loop.cc",
    "lines": [
      221
    ],
    "matched_text": "    // place the vector lanes in least significant dimension."
  },
  {
    "satd_id": 6669696,
    "satd_repo": 70746484,
    "satd_sha": "45597d00061c155f7844b873149d36a48467c959",
    "satd_text": " variable to be replaced",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/vectorize_loop.cc",
    "lines": [
      58
    ],
    "matched_text": "  // variable to be replaced"
  },
  {
    "satd_id": 6669696,
    "satd_repo": 70746484,
    "satd_sha": "45597d00061c155f7844b873149d36a48467c959",
    "satd_text": " variable to be replaced",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/vectorize_loop.cc",
    "lines": [
      244
    ],
    "matched_text": "  // variable to be replaced"
  },
  {
    "satd_id": 6669795,
    "satd_repo": 70746484,
    "satd_sha": "883779888896453ad6e21f33dcd163d1a3358ae1",
    "satd_text": " The simplify statement.\n NOLINT(*)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.cc",
    "lines": [
      305,
      306
    ],
    "matched_text": "  // The simplify statement."
  },
  {
    "satd_id": 6669800,
    "satd_repo": 70746484,
    "satd_sha": "883779888896453ad6e21f33dcd163d1a3358ae1",
    "satd_text": "!\n   * \\brief simplify stmt.\n   * \\param stmt The stmt to be simplified.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.h",
    "lines": [
      31,
      32,
      33,
      34
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6669808,
    "satd_repo": 70746484,
    "satd_sha": "883779888896453ad6e21f33dcd163d1a3358ae1",
    "satd_text": "!\n   * \\brief simplify expression e.\n   * \\param expr The expression to be simplified.\n   ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/arithmetic/canonical.h",
    "lines": [
      26,
      27,
      28,
      29
    ],
    "matched_text": "  /*!"
  },
  {
    "satd_id": 6669810,
    "satd_repo": 70746484,
    "satd_sha": "883779888896453ad6e21f33dcd163d1a3358ae1",
    "satd_text": "!\n * \\brief Simplify by applying canonical form.\n * \\param stmt The statement to be canonically simplifed.\n * \\return Canonicalized statement.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_pass.h",
    "lines": [
      65,
      66,
      67,
      68,
      69
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6669830,
    "satd_repo": 70746484,
    "satd_sha": "d89917b6705fa18ec9d1287f67dc8380d8dc3a1e",
    "satd_text": " If sync is inserted. remove the irrelevant things.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/storage_sync.cc",
    "lines": [
      170
    ],
    "matched_text": "      // If sync is inserted. remove the irrelevant things."
  },
  {
    "satd_id": 6669944,
    "satd_repo": 70746484,
    "satd_sha": "a2c8a29b216ab399f48c99e6b9fb5e534f46ebbd",
    "satd_text": "! \\brief The reduction axis ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/ir.h",
    "lines": [
      33
    ],
    "matched_text": "  /*! \\brief The reduction axis */"
  },
  {
    "satd_id": 6669950,
    "satd_repo": 70746484,
    "satd_sha": "a2c8a29b216ab399f48c99e6b9fb5e534f46ebbd",
    "satd_text": "!\n * \\brief Rebase the iteration to make min to be 0.\n *  This is useful to normalize the Schedule\n *  to make every leaf variable's min to be 0.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/schedule.h",
    "lines": [
      324,
      325,
      326,
      327,
      328
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6669957,
    "satd_repo": 70746484,
    "satd_sha": "a2c8a29b216ab399f48c99e6b9fb5e534f46ebbd",
    "satd_text": " This is relaxiation\n TODO(tqchen): consider convert to StrideSet.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/schedule/int_set.cc",
    "lines": [
      222,
      223
    ],
    "matched_text": "    // This is relaxiation"
  },
  {
    "satd_id": 6670044,
    "satd_repo": 70746484,
    "satd_sha": "891630ed4df3015ed38cf61b9c73c0fa02c21166",
    "satd_text": " TODO(tqchen): merge this with CUDA logic.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/runtime/opencl/opencl_common.h",
    "lines": [
      163
    ],
    "matched_text": "  // TODO(tqchen): merge this with CUDA logic."
  },
  {
    "satd_id": 6670060,
    "satd_repo": 70746484,
    "satd_sha": "891630ed4df3015ed38cf61b9c73c0fa02c21166",
    "satd_text": " convert code for void argument",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/opencl/opencl_module.cc",
    "lines": [
      107
    ],
    "matched_text": "  // convert code for void argument"
  },
  {
    "satd_id": 6670108,
    "satd_repo": 70746484,
    "satd_sha": "891630ed4df3015ed38cf61b9c73c0fa02c21166",
    "satd_text": " The type codes are hidden in the code space.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/stack_vm/stack_vm.h",
    "lines": [
      137
    ],
    "matched_text": "     *  // The type codes are hidden in the code space."
  },
  {
    "satd_id": 6670141,
    "satd_repo": 70746484,
    "satd_sha": "891630ed4df3015ed38cf61b9c73c0fa02c21166",
    "satd_text": " The type codes are hidden in the code space.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/runtime/stack_vm/stack_vm.h",
    "lines": [
      137
    ],
    "matched_text": "     *  // The type codes are hidden in the code space."
  },
  {
    "satd_id": 6670156,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/packed_func_ext.h",
    "lines": [
      31,
      32,
      33
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670156,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/base/common.h",
    "lines": [
      60,
      61,
      62
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670156,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/c_api/c_api_registry.h",
    "lines": [
      37,
      38,
      39
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670210,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " handle uses 64 bit by default.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/packed_func.h",
    "lines": [
      514
    ],
    "matched_text": "    t.bits = 64;  // handle uses 64 bit by default."
  },
  {
    "satd_id": 6670222,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " Forward declare NodeRef and Node for extensions.\n This header works fine without depend on NodeRef\n as long as it is not used.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/packed_func.h",
    "lines": [
      27,
      28,
      29
    ],
    "matched_text": "// Forward declare NodeRef and Node for extensions."
  },
  {
    "satd_id": 6670229,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/packed_func_ext.h",
    "lines": [
      31,
      32,
      33
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670229,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/base/common.h",
    "lines": [
      60,
      61,
      62
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670229,
    "satd_repo": 70746484,
    "satd_sha": "ff06917c599fa38f4e0c8230ed32f2811a67fdeb",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/c_api/c_api_registry.h",
    "lines": [
      37,
      38,
      39
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670273,
    "satd_repo": 70746484,
    "satd_sha": "4242b9cff5f87c024ed662b7819585d80d910320",
    "satd_text": " namespace jit\n namespace tvm",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/jit/stack_vm.cc",
    "lines": [
      333,
      334
    ],
    "matched_text": "}  // namespace jit"
  },
  {
    "satd_id": 6670273,
    "satd_repo": 70746484,
    "satd_sha": "4242b9cff5f87c024ed662b7819585d80d910320",
    "satd_text": " namespace jit\n namespace tvm",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/jit/stack_vm.h",
    "lines": [
      296,
      297
    ],
    "matched_text": "}  // namespace jit"
  },
  {
    "satd_id": 6670346,
    "satd_repo": 70746484,
    "satd_sha": "4242b9cff5f87c024ed662b7819585d80d910320",
    "satd_text": " pylint: disable=redefined-builtin, undefined-variable, unused-import",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/api.py",
    "lines": [
      2
    ],
    "matched_text": "# pylint: disable=redefined-builtin, undefined-variable, unused-import"
  },
  {
    "satd_id": 6670358,
    "satd_repo": 70746484,
    "satd_sha": "01a7ce0cb6490c1233bc33c33d679e742b178241",
    "satd_text": "!\n * \\brief Packed function is a runtime function\n *  whose argument type_codes are erased by packed format.\n *\n *  This is an useful unified interface to call generated functions.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/runtime/runtime.h",
    "lines": [
      16,
      17,
      18,
      19,
      20,
      21
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6670363,
    "satd_repo": 70746484,
    "satd_sha": "01a7ce0cb6490c1233bc33c33d679e742b178241",
    "satd_text": "!\n * \\brief See pesudo code\n *\n *  bool tvm_print(VType value) {\n *     LOG(INFO) << value;\n *  }\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      81,
      82,
      83,
      84,
      85,
      86,
      87
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6670435,
    "satd_repo": 70746484,
    "satd_sha": "4f1473f3a10f613df795816bcee541feef12f48d",
    "satd_text": "!\n * \\brief See pesudo code\n *\n *  bool tvm_handle_is_null(void* handle) {\n *     return handle == nullptr\n *  }\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir.h",
    "lines": [
      73,
      74,
      75,
      76,
      77,
      78,
      79
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6670439,
    "satd_repo": 70746484,
    "satd_sha": "4f1473f3a10f613df795816bcee541feef12f48d",
    "satd_text": " add to alloc buffer type.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.cc",
    "lines": [
      17
    ],
    "matched_text": "  // add to alloc buffer type."
  },
  {
    "satd_id": 6670453,
    "satd_repo": 70746484,
    "satd_sha": "3c1020dffb94e8ee4e076fa69374ad9df1d339ae",
    "satd_text": "! \\brief print the current indented value ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.h",
    "lines": [
      57
    ],
    "matched_text": "  /*! \\brief print the current indented value */"
  },
  {
    "satd_id": 6670457,
    "satd_repo": 70746484,
    "satd_sha": "3c1020dffb94e8ee4e076fa69374ad9df1d339ae",
    "satd_text": " vtable to print code",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.h",
    "lines": [
      97
    ],
    "matched_text": "  // vtable to print code"
  },
  {
    "satd_id": 6670457,
    "satd_repo": 70746484,
    "satd_sha": "3c1020dffb94e8ee4e076fa69374ad9df1d339ae",
    "satd_text": " vtable to print code",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.h",
    "lines": [
      99
    ],
    "matched_text": "  // vtable to print code"
  },
  {
    "satd_id": 6670460,
    "satd_repo": 70746484,
    "satd_sha": "3c1020dffb94e8ee4e076fa69374ad9df1d339ae",
    "satd_text": "! \\brief The current indentation value ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/codegen/codegen_c.h",
    "lines": [
      101
    ],
    "matched_text": "  /*! \\brief The current indentation value */"
  },
  {
    "satd_id": 6670481,
    "satd_repo": 70746484,
    "satd_sha": "383494a51a3c9169e50650570ffd178e750e60e5",
    "satd_text": " This is the only place in the project where RTTI is used\n It can be turned off, but will make non strict checking.\n TODO(tqchen) possibly find alternative to turn of RTTI",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/c_api/c_api_registry.h",
    "lines": [
      37,
      38,
      39
    ],
    "matched_text": "    // This is the only place in the project where RTTI is used"
  },
  {
    "satd_id": 6670584,
    "satd_repo": 70746484,
    "satd_sha": "7f82912bfb3d9af249a6df28998d01dca60dc1e6",
    "satd_text": " create a buffer entry\n TODO(tqchen) allow permutation and inference of index dimension.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/pass/storage_flatten.cc",
    "lines": [
      126,
      127
    ],
    "matched_text": "      // create a buffer entry"
  },
  {
    "satd_id": 6670593,
    "satd_repo": 70746484,
    "satd_sha": "7f82912bfb3d9af249a6df28998d01dca60dc1e6",
    "satd_text": " TODO(tqchen) allow permutation and inference of index dimension.\n relative index",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/pass/storage_flatten.cc",
    "lines": [
      101,
      102
    ],
    "matched_text": "    // TODO(tqchen) allow permutation and inference of index dimension."
  },
  {
    "satd_id": 6670596,
    "satd_repo": 70746484,
    "satd_sha": "0992873af2fad1b02f39b17cd5bc94446f3efc0d",
    "satd_text": " Maybe need more information(alignment) later",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/buffer.h",
    "lines": [
      71
    ],
    "matched_text": "  // Maybe need more information(alignment) later"
  },
  {
    "satd_id": 6670691,
    "satd_repo": 70746484,
    "satd_sha": "78ea652d61746fd39fe0c3a8f6da1b8c9d57b367",
    "satd_text": " Boundary condition checking\n Need better boundary condition here.",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/schedule_ops.cc",
    "lines": [
      203,
      204
    ],
    "matched_text": "      // Boundary condition checking"
  },
  {
    "satd_id": 6670837,
    "satd_repo": 70746484,
    "satd_sha": "5445a93697222b926efe8bdae0087a74c7a9d50a",
    "satd_text": " TODO(tqchen) add simplify to end - begin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/domain.cc",
    "lines": [
      12
    ],
    "matched_text": "  // TODO(tqchen) add simplify to end - begin"
  },
  {
    "satd_id": 6670837,
    "satd_repo": 70746484,
    "satd_sha": "5445a93697222b926efe8bdae0087a74c7a9d50a",
    "satd_text": " TODO(tqchen) add simplify to end - begin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/expr.cc",
    "lines": [
      19
    ],
    "matched_text": "  // TODO(tqchen) add simplify to end - begin"
  },
  {
    "satd_id": 6670869,
    "satd_repo": 70746484,
    "satd_sha": "7591714a364a682d87641cab70fd19b30e5f754c",
    "satd_text": " for loop with stride\n TODO(tqchen) split the loop to deal with tails",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/pass/schedule_ops.cc",
    "lines": [
      50,
      51
    ],
    "matched_text": "  // for loop with stride"
  },
  {
    "satd_id": 6670987,
    "satd_repo": 70746484,
    "satd_sha": "be8de13fd674623fbde49e622cd3bf12c0ca49b3",
    "satd_text": " to be implemented by child class\n NOLINT(*)\n NOLINT(*)",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_mutator.h",
    "lines": [
      76,
      77,
      78
    ],
    "matched_text": "  // to be implemented by child class"
  },
  {
    "satd_id": 6670989,
    "satd_repo": 70746484,
    "satd_sha": "be8de13fd674623fbde49e622cd3bf12c0ca49b3",
    "satd_text": "!\n * \\brief a base class for mutator to iterative mutate the IR\n *\n *  This IRMutator is implemented via IRFunctor instead of Visitor Pattern.\n *  This enables easy extensions of possible new IRNode.\n *  It also makes changing return types easier.\n *\n * \\note If you want to return a different type other than Expr and Stmt,\n *       Simply following the same pattern as IRMutator and create a seperate class.\n * \\sa IRFunctor\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/ir_mutator.h",
    "lines": [
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6671009,
    "satd_repo": 70746484,
    "satd_sha": "0153649e267072d5c5c79135d8db5b675cc1a4ce",
    "satd_text": "! \\brief The reduction domain ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/ir_node.h",
    "lines": [
      30
    ],
    "matched_text": "  /*! \\brief The reduction domain */"
  },
  {
    "satd_id": 6671042,
    "satd_repo": 70746484,
    "satd_sha": "0068781d8fd2e4830afd5982b76993134ca09b12",
    "satd_text": " TODO(tqchen) add simplify to end - begin",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "src/lang/domain.cc",
    "lines": [
      12
    ],
    "matched_text": "  // TODO(tqchen) add simplify to end - begin"
  },
  {
    "satd_id": 6671048,
    "satd_repo": 70746484,
    "satd_sha": "062bb8532663bbd9ded0c1f243dd256f5c83ff23",
    "satd_text": " TODO(tqchen) Call;",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/c_api/c_api_ir.cc",
    "lines": [
      94
    ],
    "matched_text": "// TODO(tqchen) Call;"
  },
  {
    "satd_id": 6671049,
    "satd_repo": 70746484,
    "satd_sha": "622cee7a5d8c3cb91bf2d6deee11cfdc7d3c287a",
    "satd_text": " TODO(tqchen) For;",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/c_api/c_api_ir.cc",
    "lines": [
      73
    ],
    "matched_text": "// TODO(tqchen) For;"
  },
  {
    "satd_id": 6671052,
    "satd_repo": 70746484,
    "satd_sha": "622cee7a5d8c3cb91bf2d6deee11cfdc7d3c287a",
    "satd_text": " TODO(tqchen) Realize;",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/c_api/c_api_ir.cc",
    "lines": [
      78
    ],
    "matched_text": "// TODO(tqchen) Realize;"
  },
  {
    "satd_id": 6671054,
    "satd_repo": 70746484,
    "satd_sha": "622cee7a5d8c3cb91bf2d6deee11cfdc7d3c287a",
    "satd_text": " TODO(tqchen) Provide;\n TODO(tqchen) Allocate;",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "src/c_api/c_api_ir.cc",
    "lines": [
      75,
      76
    ],
    "matched_text": "// TODO(tqchen) Provide;"
  },
  {
    "satd_id": 6671109,
    "satd_repo": 70746484,
    "satd_sha": "1338392811089428b3328a0609bd4f874df80ae5",
    "satd_text": " TODO(tqchen) change to stack based impl.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/expr_util.h",
    "lines": [
      38
    ],
    "matched_text": "  // TODO(tqchen) change to stack based impl."
  },
  {
    "satd_id": 6671109,
    "satd_repo": 70746484,
    "satd_sha": "1338392811089428b3328a0609bd4f874df80ae5",
    "satd_text": " TODO(tqchen) change to stack based impl.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/expr_util.h",
    "lines": [
      76
    ],
    "matched_text": "  // TODO(tqchen) change to stack based impl."
  },
  {
    "satd_id": 6671141,
    "satd_repo": 70746484,
    "satd_sha": "816419bec5d477b97404d250d4d7729dcefaf11f",
    "satd_text": "! \\brief whether the split is over reduction domain",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/split.h",
    "lines": [
      39
    ],
    "matched_text": "  /*! \\brief whether the split is over reduction domain*/"
  },
  {
    "satd_id": 6671235,
    "satd_repo": 70746484,
    "satd_sha": "5324b21132db5581cc2a8dab343ad1700d174431",
    "satd_text": "! \\brief The reduction domain ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "include/tvm/expr_node.h",
    "lines": [
      151
    ],
    "matched_text": "  /*! \\brief The reduction domain */"
  },
  {
    "satd_id": 6671240,
    "satd_repo": 70746484,
    "satd_sha": "5324b21132db5581cc2a8dab343ad1700d174431",
    "satd_text": "!\n * \\brief simplify the expression src\n * \\param src The source expression\n * \\return the simplified expression.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/expr_util.h",
    "lines": [
      14,
      15,
      16,
      17,
      18
    ],
    "matched_text": "/*!"
  },
  {
    "satd_id": 6671241,
    "satd_repo": 70746484,
    "satd_sha": "5324b21132db5581cc2a8dab343ad1700d174431",
    "satd_text": " TODO(tqchen) change to stack based impl.",
    "satd_label": "Requirement-SATD",
    "satd_label_short": "req",
    "file": "include/tvm/expr_util.h",
    "lines": [
      28
    ],
    "matched_text": "  // TODO(tqchen) change to stack based impl."
  },
  {
    "satd_id": 6671262,
    "satd_repo": 70746484,
    "satd_sha": "3e693f53e0bc25d7830e67145decc650789f5802",
    "satd_text": " coding: utf-8\n pylint: disable=invalid-name, protected-access, too-many-arguments, too-many-lines",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "python/tvm/cpp/_ctypes/_api.py",
    "lines": [
      1,
      2
    ],
    "matched_text": "# coding: utf-8"
  },
  {
    "satd_id": 6671276,
    "satd_repo": 70746484,
    "satd_sha": "3e693f53e0bc25d7830e67145decc650789f5802",
    "satd_text": "! \\brief  macro to guard beginning and end section of all functions ",
    "satd_label": "Documentation-SATD",
    "satd_label_short": "doc",
    "file": "src/c_api/c_api_common.h",
    "lines": [
      17
    ],
    "matched_text": "/*! \\brief  macro to guard beginning and end section of all functions */"
  },
  {
    "satd_id": 6671298,
    "satd_repo": 70746484,
    "satd_sha": "3e693f53e0bc25d7830e67145decc650789f5802",
    "satd_text": "!\n * \\brief call a function by using arguments in the stack.\n * The stack will be cleanup to empty after this call, whether the call is successful.\n *\n * \\param handle The function handle\n * \\param ret_val The return value.\n * \\param ret_typeid the type id of return value.\n ",
    "satd_label": "Code|Design-SATD",
    "satd_label_short": "CD",
    "file": "include/tvm/c_api.h",
    "lines": [
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116
    ],
    "matched_text": "/*!"
  }
]
